<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python语法学习</title>
      <link href="/2025/01/19/pythonlearning/"/>
      <url>/2025/01/19/pythonlearning/</url>
      
        <content type="html"><![CDATA[<h2 id="学习环境"><a href="#学习环境" class="headerlink" title="学习环境"></a>学习环境</h2><ol><li><a href="https://www.python.org/downloads/release/python-379/">Python 3.7.9</a></li><li><a href="https://www.jetbrains.com/pycharm/download/other.html">PyCharm Professional Edition 2020.3.2</a></li><li><a href="https://www.ghpym.com/ideapatch.html">JetBrains 2020.3 通杀补丁（学习用，有能力请支持正版）</a></li><li><a href="https://www.bilibili.com/video/BV1Mz4y1C7LV"> 黑马程序员 python 5.0</a></li></ol><h2 id="Python-基础语法"><a href="#Python-基础语法" class="headerlink" title="Python 基础语法"></a>Python 基础语法</h2><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 单行注释&quot;&quot;&quot;多行注释1多行注释2多行注释3&quot;&quot;&quot;&#39;&#39;&#39;多行注释1多行注释2多行注释3&#39;&#39;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul><li>可改变的量为变量，指向内存的一块空间，当不使用时即会被回收</li><li>变量名只能由数字、字母和下划线组成，不能用关键字，不能数字开头，建议不要用中文</li><li>变量名尽量见名知意</li><li>Python 中常量，一般通过全部大写字母来约定俗成</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 查询关键字import keywordprint(keyword.kwlist)# 变量的交换a &#x3D; 10b &#x3D; 19a, b &#x3D; b, aprint(a)  # 19print(b)  # 10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="布尔"><a href="#布尔" class="headerlink" title="布尔"></a>布尔</h3><ul><li>True：除了 False 都是 True</li><li>False：0、0.0、0j、’’、[]、()、set()、{}、None</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"># bool()，强制将其他类型转为boolprint(bool(10))  # Trueprint(bool(0))  # Falseprint(bool(0.0))  # Falseprint(bool(&#39;0&#39;))  # Trueprint(bool(&#39;&#39;))  # Falseprint(bool(&#123;&#125;))  # Falseprint(bool([]))  # Falseprint(bool(set()))  # Falseprint(bool(0j))  # Falseprint(bool(None))  # False<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h3><ul><li>int 整型，二进制，八进制，十进制，十六进制</li><li>float 浮点型，小数</li><li>conplex 复数，实部+虚部</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"># type()，获取变量的类型# id()，获取变量内存地址a &#x3D; 0b11print(a, type(a))  # 3 &lt;class &#39;int&#39;&gt;b &#x3D; 0o11print(b, type(b))  # 9 &lt;class &#39;int&#39;&gt;c &#x3D; 0x11print(c, type(c))  # 17 &lt;class &#39;int&#39;&gt;d &#x3D; 1.1print(d, type(d))  # 1.1 &lt;class &#39;float&#39;&gt;e &#x3D; 2e2print(e, type(e))  # 200.0 &lt;class &#39;float&#39;&gt;f &#x3D; 1 + 2jprint(f, type(f))  # (1+2j) &lt;class &#39;complex&#39;&gt;g &#x3D; complex(2, 3)print(g, type(g))  # (2+3j) &lt;class &#39;complex&#39;&gt;h &#x3D; Trueprint(h, type(h))  # True &lt;class &#39;bool&#39;&gt;i &#x3D; Falseprint(i, type(i))  # False &lt;class &#39;bool&#39;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"># int()，强制将int、float、bool、纯数字字符串转为intprint(int(10))  # 10print(int(10.66))  # 10print(int(True))  # 1print(int(False))  # 0print(int(&#39;12345678&#39;))  # 12345678# float()，强制将int、float、bool、纯数字字符串转为floatprint(float(10))  # 10.0print(float(10.66))  # 10.66print(float(True))  # 1.0print(float(False))  # 0.0print(float(&#39;12345678&#39;))  # 12345678.0# complex()，强制将int、float、bool、纯数字字符串、complex转为complexprint(complex(10))  # (10+0j)print(complex(10.66))  # (10.66+0j)print(complex(True))  # (1+0j)print(complex(False))  # 0jprint(complex(&#39;12345678&#39;))  # (12345678+0j)print(complex(1+2j))  # (1+2j)# 当两个不同类型的数据进行运算的时候，低精度默认向高精度转换# bool -&gt; int -&gt; float -&gt; complex# 不要用小数作比较，存在精度损耗<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 2 -&gt; 10a &#x3D; 0b11print(int(a))  # 3# 8 -&gt; 10b &#x3D; 0o11print(int(b))  # 9# 16 -&gt; 10c &#x3D; 0x11print(int(c))  # 17# 10 -&gt; 2d &#x3D; 3print(bin(d))  # 0b11# 10 -&gt; 8print(oct(d))  # 0o3# 10 -&gt; 16print(hex(d))  # 0x3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><h4 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"># +、-、*、&#x2F;、&#x2F;&#x2F;、%、**# &#x2F; 永远返回浮点数类型# &#x2F;&#x2F; 直接舍弃小数部分# % 求余数，** 乘方# 混合运算优先级顺序，() 高于 ** 高于 *,&#x2F;,&#x2F;&#x2F;,% 高于 +,-print(5 + 2)  # 7print(5.0 + 2)  # 7.0print(5 - 2)  # 3print(5 * 2)  # 10print(5 &#x2F; 2)  # 2.5print(4 &#x2F; 2)  # 2.0print(5 &#x2F;&#x2F; 2)  # 2print(5 % 2)  # 1print(5 ** 2)  # 25<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"># &#x3D;，将等号右侧的结果赋值给等号左边得到变量# 单变量赋值num &#x3D; 1print(num)  # 1# 多变量赋值a, b, c &#x3D; 1, 1.1, &quot;hello&quot;print(a)  # 1print(b)  # 1.1print(c)  # hello# 多变量赋相同值a &#x3D; b &#x3D; 100print(a)  # 100print(b)  # 100# 变量交换值a &#x3D; 10b &#x3D; 20a, b &#x3D; b, aprint(a)  # 20print(b)  # 10# +&#x3D;，c +&#x3D; a 等价于 c &#x3D; c + a# -&#x3D;，c -&#x3D; a 等价于 c &#x3D; c - a# *&#x3D;，c *&#x3D; a 等价于 c &#x3D; c * a# &#x2F;&#x3D;，c &#x2F;&#x3D; a 等价于 c &#x3D; c &#x2F; a# &#x2F;&#x2F;&#x3D;，c &#x2F;&#x2F;&#x3D; a 等价于 c &#x3D; c &#x2F;&#x2F; a# %&#x3D;，c %&#x3D; a 等价于 c &#x3D; c % a# **&#x3D;，c **&#x3D; a 等价于 c &#x3D; c ** a# 注意：先计算右侧结果，在进行复合赋值运算a &#x3D; 10a *&#x3D; 1 + 2print(a)  # 30<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"># &#x3D;&#x3D;，判断相等，如果两侧操作数结果相等，则为 True，反之为 False# !&#x3D;，不等于，如果两侧操作数不相等，则为 True，反之为 False# &gt;，如果运算符左侧操作数结果大于右侧操作数结果，则为 True，反之为 False# &lt;，如果运算符左侧操作数结果小于右侧操作数结果，则为 True，反之为 False# &gt;&#x3D;，如果运算符左侧操作数结果大于等于右侧操作数结果，则为 True，反之为 False# &lt;&#x3D;，如果运算符左侧操作数结果小于等于右侧操作数结果，则为 True，反之为 Falseprint(1 &#x3D;&#x3D; 1)  # Trueprint(2 !&#x3D; 1)  # Trueprint(3 &gt; 2)  # Trueprint(2 &lt; 3)  # Trueprint(3 &gt;&#x3D; 2)  # Trueprint(2 &lt;&#x3D; 3)  # True<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"># and，与，都真才真，若前一个表达式为假则不会再继续运算后面的表达式，因此建议假可能性大的放前面，优化程序# or，或，一真则真，若钱一个表达式为真则不会再继续运算后面的表达式，因此建议真可能性大的放前面，优化程序# not，非，取反<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><h4 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"># if判断if 条件1：    条件1成立的代码    ......elif 条件2:    条件2成立的代码    ......else:    条件都不成立执行的代码    ......# 打印成绩等地，Anum &#x3D; 100if num &gt; 90:    print(&#39;A&#39;)elif num &gt; 60:    print(&#39;B&#39;)else:    print(&#39;C&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 条件成立执行的表达式 if 条件 else 条件不成立执行的表达式a &#x3D; 10 if 5 &gt; 3 else 5print(a)  # 10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="while语句"><a href="#while语句" class="headerlink" title="while语句"></a>while语句</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 单 while 循环while 条件：    条件成立执行代码1    条件成立执行代码2    ......# 循环打印 5 次，hello worldn &#x3D; 1while n &lt;&#x3D; 5:    print(&#39;hello world&#39;)    n +&#x3D; 1“”“hello worldhello worldhello worldhello worldhello world”“”# while else，else 为循环执行之后执行的代码n &#x3D; 1while n &lt;&#x3D; 5:    print(&#39;hello world&#39;)    n +&#x3D; 1else:    print(&#39;loop done&#39;)“”“hello worldhello worldhello worldhello worldhello worldloop done”“”<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 跳出循环<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="continue语句"><a href="#continue语句" class="headerlink" title="continue语句"></a>continue语句</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 跳过此次循环，转而执行下一次循环<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 单 for 循环for 临时变量 in 序列：    重复执行代码1    重复执行代码2    ......# for 循环打印 hello worldfor word in &quot;hello world&quot;:    print(word)&quot;&quot;&quot;hello world&quot;&quot;&quot;# for else，else 为循环执行之后执行的代码for word in &quot;hello world&quot;:    print(word)else:    print(&quot;loop done&quot;)&quot;&quot;&quot;hello worldloop done&quot;&quot;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><ul><li>可用 <code>&quot;....&quot;</code>、<code>&#39;...&#39;</code> 以及 <code>&quot;&quot;&quot;...&quot;&quot;&quot;</code> 来表示字符串</li><li>字符串可用 <code>/</code>来转义特殊字符，字符串前加 <code>r</code>，即表示原始字符串</li><li>不可变类型</li></ul><h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 索引从0开始，有负索引，从-1开始，因为 -0 &#x3D; 0# 索引如果越界，会报错 IndexErrorword &#x3D; &#39;Python&#39;print(word[0])  # Pprint(word[-1])  # nprint(word[5])  # nprint(word[-6])  # P<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 切片越界自动处理，并不会报错word &#x3D; &#39;Python&#39;print(word[0:2])  # Pyprint(word[::2])  # 设置步进为 2，Ptoprint(word[2:])  # thonprint(word[:])  # Pythonprint(word[3:])  # honprint(word[1:8])  # ython<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"># format()# # 格式&#123;:[填充][对齐 &lt; &gt; &#x3D; ^][符号 + &#x3D; ][宽度][千位分隔符 , _][.保留位数][类型 b c d o x n...]&#125;print(&#39;&#123;&#125;、&#123;&#125;、&#123;&#125;&#39;.format(1, 2, 3))  # 1、2、3print(&#39;&#123;0&#125;、&#123;1&#125;、&#123;2&#125;&#39;.format(a, b, 3))  # 1、2、3print(&#39;&#123;2&#125;、&#123;1&#125;、&#123;0&#125;&#39;.format(1, b, c))  # 3、2、1print(&#39;&#123;x&#125;、&#123;y&#125;&#39;.format(x&#x3D;3, y&#x3D;2))  # 3、2print(&#39;&#123;0[0]&#125;、&#123;0[1]&#125;&#39;.format([1, 2]))  # 1、2# f-string 使用基本和 format() 格式相同# &#123;&#125;中不允许出现\，如需使用可创建临时变量word &#x3D; &#39;Python&#39;print(f&#39;I like &#123;word&#125;&#39;)  # I like Pythonprint(f&#39;I like &#123;word!s&#125;&#39;)  # 调用str()  I like Pythonprint(f&#39;I like &#123;word!a&#125;&#39;)  # 调用ascii()  I like &#39;Python&#39;print(f&#39;I like &#123;word!r&#125;&#39;)  # 调用repr()  I like &#39;Python&#39;print(f&#39;I like &#123;repr(word)&#125;&#39;)  # I like &#39;Python&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"># str()，强制转化成字符串print(str(1))  # &#39;1&#39;print(str(1.1))  # &#39;1.1&#39;print(str(True))  # &#39;True&#39;print(str([1, 2, 3]))  # &#39;[1, 2, 3]&#39;print(str(&#123;&quot;str&quot;: &quot;123&quot;&#125;))  # &quot;&#123;&#39;str&#39;: &#39;123&#39;&#125;&quot;# + 拼接字符串，* 复制多份str1 &#x3D; &quot;hello &quot;str2 &#x3D; &quot;python&quot;print(str1 + str2)  # hello pythonprint(str1 * 3)  # hello hello hello # repr()，不转移字符原型化输出字符串（pycharm 里面 run 会自动优化输出，使用命令行更直观）print(str(&#39;hello world&#39;))  # &#39;hello world&#39;print(repr(&#39;hello world&#39;))  # &quot;&#39;hello world&#39;&quot;# len()，查看字符串长度hello_str &#x3D; &quot;hello world i like python and c plus and everything hello my friend&quot;print(len(hello_str))  # 67# find(sub[, start[, end]])，检测 sub 子串是否包含在字符串 [start,end] 中，找到返回下标，没找到返回 -1# rfind()，从右边开始找print(hello_str.find(&quot;world&quot;))  # 6print(hello_str.find(&quot;worlds&quot;))  # -1print(hello_str.find(&quot;hello&quot;, 5, 100))  # 52# index(sub[, start[, end]])，检测 sub 子串是否包含在字符串 [start,end] 中，找到返回下标，没找到报错# rindex()，从右边开始找print(hello_str.index(&quot;world&quot;))  # 6print(hello_str.index(&quot;worlds&quot;))  # ValueError: substring not foundprint(hello_str.index(&quot;hello&quot;, 5, 100))  # 52# count()，返回子串出现的次数print(hello_str.count(&quot;hello&quot;))  # 2print(hello_str.count(&quot;i&quot;))  # 4# replace(old, new[, count])，返回字符串的副本，将 new 替代 old，并指定 count 次数new_str &#x3D; hello_str.replace(&quot;hello&quot;, &quot;fuck&quot;)print(hello_str)  # hello world i like python and c plus and everything hello my friendprint(new_str)  # fuck world i like python and c plus and everything fuck my friendnew_str &#x3D; hello_str.replace(&quot;hello&quot;, &quot;fuck&quot;， 1)print(new_str)  # fuck world i like python and c plus and everything hello my friend# split(sep&#x3D;None, maxsplit&#x3D;-1)，返回一个由字符串内单词组成的列表，使用 sep 作为分隔字符串，如果给出了 maxsplit，则最多进行 maxsplit 次拆分，默认以空字符串作为分隔符print(hello_str.split())  # [&#39;hello&#39;, &#39;world&#39;, &#39;i&#39;, &#39;like&#39;, &#39;python&#39;, &#39;and&#39;, &#39;c&#39;, &#39;plus&#39;, &#39;and&#39;, &#39;everything&#39;, &#39;hello&#39;, &#39;my&#39;, &#39;friend&#39;]print(hello_str.split(maxsplit&#x3D;1))  # [&#39;hello&#39;, &#39;world i like python and c plus and everything hello my friend&#39;]# strip([chars])，返回原字符串的副本，移除其中的前导和末尾字符，默认移除前后空白，可指定对应 chars# lstrip()，只删除左边，rstrip()，只删除右边hello_str &#x3D; &quot;   hello world  &quot;print(hello_str)  # &#39;   hello world  &#39;print(hello_str.strip())  # &#39;hello world&#39;# join(iterable)，返回一个由 iterable 中的字符串拼接而成的字符串str_list &#x3D; [&quot;my&quot;, &quot;name&quot;, &quot;is&quot;, &quot;ReaJason&quot;]print(&quot; &quot;.join(str_list))  # my name is ReaJasonstr_dict &#x3D; &#123;&quot;name&quot;: &quot;ReaJason&quot;, &quot;age&quot;: 18&#125;print(&quot; &quot;.join(str_dict))  # name age# capitalize()，返回原字符串的副本，其首个字符大写，其余为小写print(&quot;hello world&quot;.capitalize())  # Hello world# lower()，返回原字符串的副本，其所有区分大小写的字符均转换为小写# islower()，判断字符串是否全为小写print(&quot;HELLO WORLD&quot;.lower())  # hello worldprint(&quot;HELLO WORLD&quot;.islower())  # Falseprint(&quot;hello world&quot;.islower())  # True# title()，返回原字符串的标题版本，其中每个单词第一个字母为大写，其余字母为小写print(&quot;hello world&quot;.title())  # Hello World# upper()，返回原字符串的副本，其中所有区分大小写的字符均转换为大写# isupper()，判断字符串是否全为大写print(&quot;hello world&quot;.upper())  # HELLO WORLDprint(&quot;hello world&quot;.isupper())  # Falseprint(&quot;HELLO WORLD&quot;.isupper())  # True# ljust(width[, fillchar])，返回长度为 width 的靠左对齐字符串，使用指定的 fillchar 填充空位print(&quot;hello world&quot;.ljust(20))  # &#39;hello world         &#39;print(&quot;hello world&quot;.ljust(20, &quot;-&quot;))  # &#39;hello world---------&#39;# rjust(width[, fillchar])，返回长度为 width 的靠右对齐字符串，使用指定的 fillchar 填充空位print(&quot;hello world&quot;.rjust(20))  # &#39;         hello world&#39;print(&quot;hello world&quot;.rjust(20, &quot;-&quot;))  # &#39;---------hello world&#39;# center(width[, fillchar])，返回长度为 width 的居中对齐字符串，使用指定的 fillchar 填充空位print(&quot;hello world&quot;.center(20))  # &#39;    hello world     &#39;print(&quot;hello world&quot;.center(20, &quot;-&quot;))  # &#39;----hello world-----&#39;# startswith(prefix[, start[, end]])，如果字符串以指定的 prefix 开始则返回 True，否则返回 Falseprint(&quot;hello world&quot;.startswith(&quot;hello&quot;))  # Trueprint(&quot;hello world&quot;.startswith(&quot;h&quot;))  # Trueprint(&quot;hello world&quot;.startswith(&quot;world&quot;))  # False# endswith(suffix[, start[, end]])，如果字符串以指定的 suffix 结束返回 True，否则返回 Falseprint(&quot;hello world&quot;.endswith(&quot;world&quot;))  # Trueprint(&quot;hello world&quot;.endswith(&quot;d&quot;))  # Trueprint(&quot;hello world&quot;.endswith(&quot;hello&quot;))  # False# isalpha(),如果字符串中的所有字符都是字母，并且至少有一个字符，返回 True ，否则返回 Falseprint(&quot;hello world&quot;.isalpha())  # False# isdigit()，如果字符串中的所有字符都是数字，并且至少有一个字符，返回 True ，否则返回 Falseprint(&quot;1234&quot;.isdigit())  # True# isalnum()，如果字符串中的所有字符都是字母或数字且至少有一个字符，则返回 True ， 否则返回 Falseprint(&quot;1234&quot;.isalnum())  # Trueprint(&quot;hello world&quot;.isalnum())  # Falseprint(&quot;hello1world&quot;.isalnum())  # True# isspace()，如果字符串中只有空白字符且至少有一个字符则返回 True ，否则返回 Falseprint(&quot;   &quot;.isspace())  # True<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><ul><li>用 <code>[]</code> 组合复合类型（不限定只能一种类型）</li><li>使用方括号，其中的项以逗号分隔: <code>[a]</code>, <code>[a, b, c]</code></li><li>使用一对方括号来表示空列表: <code>[]</code></li><li>可变数据类型，可获取，可修改，有序</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">list1 &#x3D; [1, &#39;Python&#39;, 13.14, True, 1+1j, [1, 2, 3], &#39;ReaJason&#39;]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="索引-1"><a href="#索引-1" class="headerlink" title="索引"></a>索引</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">print(list1[0])  # 1print(list1[-7])  # 1print(list1[-1])  # ReaJasonprint(list1[6])  # ReaJasonprint(list1[5][1])  # 2list1[5][1] &#x3D; 250print(list1)  # [1, &#39;Python&#39;, 13.14, True, (1+1j), [1, 250, 3], &#39;ReaJason&#39;]# 修改指定索引数据list1[0] &#x3D; 10print(list1)  # [10, &#39;Python&#39;, 13.14, True, (1+1j), [1, 2, 3], &#39;ReaJason&#39;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="切片-1"><a href="#切片-1" class="headerlink" title="切片"></a>切片</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">print(list1[0:2])  # [1, &#39;Python&#39;]print(list1[0:5:2])  # [1, 13.14, (1+1j)]print(list1[::-1])  # [&#39;ReaJason&#39;, [1, 2, 3], (1+1j), True, 13.14, &#39;Python&#39;, 1]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"># for 遍历列表list1 &#x3D; [1, &#39;Python&#39;, 13.14, True, 1+1j, [1, 2, 3], &#39;ReaJason&#39;]for i in list1:    print(i)&quot;&quot;&quot;1Python13.14True(1+1j)[1, 2, 3]ReaJason&quot;&quot;&quot;# enumarate()，返回索引和值的元组list1 &#x3D; [1, &#39;Python&#39;, 13.14, True, 1+1j, [1, 2, 3], &#39;ReaJason&#39;]for index, value in enumerate(list1):    print(f&quot;&#123;index&#125;：&#123;value&#125;&quot;)&quot;&quot;&quot;0：11：Python2：13.143：True4：(1+1j)5：[1, 2, 3]6：ReaJason&quot;&quot;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="常用函数-1"><a href="#常用函数-1" class="headerlink" title="常用函数"></a>常用函数</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"># list()，强制转换成列表print(list(&#39;12345678&#39;))  # [&#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;, &#39;8&#39;]# + 拼接列表，* 复制元素多份list1 &#x3D; [1, 2, 3]list2 &#x3D; [&quot;hello&quot;, &quot;python&quot;,]print(list1 + list2)  # [1, 2, 3, &#39;hello&#39;, &#39;python&#39;]print(list2 * 2)  # [&#39;hello&#39;, &#39;python&#39;, &#39;hello&#39;, &#39;python&#39;]# len()，获取列表元素个数list2 &#x3D; [1, 2, 3, 4, 5, 1, 2]print(len(list2))  # 7# count(x)，返回元素 x 在列表中出现的次数print(list2.count(1))  # 2# reverse()，直接翻转原数组的所有元素list2.reverse()print(list2)  # [5, 4, 3, 2, 1]# sort(key&#x3D;None, reverse&#x3D;False)，对列表中的元素进行排序list2.sort()  # [1, 1, 2, 2, 3, 4, 5]print(list2)list2.sort(reverse&#x3D;True)print(list2)  # [5, 4, 3, 2, 2, 1, 1]# index(x[, start[, end]])，返回列表中第一个值为 x 的元素的索引，如果不存在会抛出 ValueError 异常name_list &#x3D; [&quot;ReaJason&quot;, &quot;Tom&quot;, &quot;Lucy&quot;, &quot;LiLy&quot;]print(name_list.index(&quot;Tom&quot;))  # 1print(name_list.index(&quot;Toms&quot;))  # ValueError: &#39;Toms&#39; is not in list# in，not in，判断元素是否在列表中，为通用方法，适用于字符串，字典，元组，集合print(&quot;ReaJason&quot; in name_list)  # Trueprint(&quot;Dazzling&quot; in name_list)  # Falseprint(&quot;ReaJason&quot; not in name_list)  # Falseprint(&quot;Dazzling&quot; not in name_list)  # True# append(x)，在列表末尾添加元素xname_list.append(&quot;Jack&quot;)print(name_list)  # [&#39;ReaJason&#39;, &#39;Tom&#39;, &#39;Lucy&#39;, &#39;LiLy&#39;, &#39;Jack&#39;]# extend(iterable)，使用可迭代对象中的所有元素来扩展列表name_list.extend([1, 2, 3, 4, 5])print(name_list)  # [&#39;ReaJason&#39;, &#39;Tom&#39;, &#39;Lucy&#39;, &#39;LiLy&#39;, 1, 2, 3, 4, 5]# insert(i,x)，在指定i索引位置插入元素x、name_list.insert(1, &quot;Dazzling&quot;)print(name_list)  # [&#39;ReaJason&#39;, &#39;Dazzling&#39;, &#39;Tom&#39;, &#39;Lucy&#39;, &#39;LiLy&#39;]# del，删除目标元素或变量del name_list[0]print(name_list)  # [&#39;Tom&#39;, &#39;Lucy&#39;, &#39;LiLy&#39;]del name_listprint(name_list)  # NameError: name &#39;name_list&#39; is not defined# pop()，pop(i)，删除列表最后一个元素，删除列表指定i索引位置的元素x &#x3D; name_list.pop()y &#x3D; name_list.pop(0)print(x)  # LiLyprint(y)  # ReaJasonprint(name_list)  # [&#39;Tom&#39;, &#39;Lucy&#39;]# remove(x)，移除列表中从左到右第一个值为x的元素name_list.remove(&quot;Tom&quot;)print(name_list)  # [&#39;ReaJason&#39;, &#39;Lucy&#39;, &#39;LiLy&#39;]# clear()，清空列表name_list.clear()print(name_list)  # []# copy()，返回列表的一个浅拷贝name_list2 &#x3D; name_list.copy()name_list2.append(&quot;Dazzling&quot;)print(name_list)  # [&#39;ReaJason&#39;, &#39;Tom&#39;, &#39;Lucy&#39;, &#39;LiLy&#39;]print(name_list2)  # [&#39;ReaJason&#39;, &#39;Tom&#39;, &#39;Lucy&#39;, &#39;LiLy&#39;, &#39;Dazzling&#39;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"># range(start, stop[, step])，range 构造器的参数必须为整数，用来生成序列print(list(range(10)))  # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]print(list(range(10, 0, -1)))  # [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]print(list(range(0)))  # []# 列表推导式，返回一个列表list1 &#x3D; [i for i in range(10)]print(list1)  # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]print(list(range(10)))  # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]# 带 if 的列表推导式，如果 i 为偶数，则选择list1 &#x3D; [i for i in range(10) if i%2 &#x3D;&#x3D; 0]print(list1)  # [0, 2, 4, 6, 8]# 多个 for 循环实现列表推导式，将多层次列表展开arr &#x3D; [[1, 2, 3], [4, 5, 6]]list1 &#x3D; [j for i in arr for j in i]print(list1)  # [1, 2, 3, 4, 5, 6]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><ul><li>用 <code>（）</code> 组合复合类型（不限定只能一种类型）</li><li>使用一对圆括号来表示空元组: <code>()</code></li><li>使用一个后缀的逗号来表示单元组: <code>a,</code> 或 <code>(a,)</code></li><li>使用以逗号分隔的多个项: <code>a, b, c</code> or <code>(a, b, c)</code></li><li>元素数据不可修改，有序</li><li>索引切片和 list 一样</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">tuple1 &#x3D; (1, &#39;Python&#39;, 13.14, True, 1 + 1j, [1, 2, 3], &#39;ReaJason&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="常用函数-2"><a href="#常用函数-2" class="headerlink" title="常用函数"></a>常用函数</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"># tuple()，强制转换成元组print(tuple(&#39;12345678&#39;))  # (&#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;, &#39;8&#39;)# len()，获取列表元素个数print(len(tuple1))  # 7# count(x)，返回元素 x 在列表中出现的次数num_tuple &#x3D; (1, 1, 2, 3, 4, 5)print(num_tuple.count(1))  # 2print(num_tuple.count(2))  # 1# index(x[, start[, end]])，返回列表中第一个值为 x 的元素的索引，如果不存在会抛出 ValueError 异常print(num_tuple.index(1))  # 2print(num_tuple.index(6))  # ValueError: tuple.index(x): x not in tuple<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><ul><li>符号为：<code>&#123;&#125;</code></li><li>数据以键值对形式出现</li><li>各个键值对之间用逗号隔开</li><li>字典是无序的对象集合，使用键-值（key-value）存储，拥有极快的查询速度</li><li>字典是可变类型，键（key）必须使用不可变类型</li><li>同一个字典中，键（key）必须是唯一的</li></ul><h4 id="字典创建"><a href="#字典创建" class="headerlink" title="字典创建"></a>字典创建</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 使用 &#123;key1: value1, key1: value1&#125;的形式 创建字典dict1 &#x3D; &#123;&quot;name&quot;: &quot;ReaJason&quot;, &quot;age&quot;: 22, &quot;gender&quot;: &quot;female&quot;&#125;# 使用dict构造器创建dict2 &#x3D; dict(name&#x3D;&quot;ReaJason&quot;, age&#x3D;22, gender&#x3D;&quot;female&quot;)# 创建空字典dict3 &#x3D; &#123;&#125;dict4 &#x3D; dict()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">dict1 &#x3D; &#123;&quot;name&quot;: &quot;ReaJason&quot;, &quot;age&quot;: 22, &quot;gender&quot;: &quot;female&quot;&#125;# 增，d[key] &#x3D; valuedict1[&#39;id&#39;] &#x3D; 10print(dict1)  # &#123;&#39;name&#39;: &#39;ReaJason&#39;, &#39;age&#39;: 22, &#39;gender&#39;: &#39;female&#39;, &#39;id&#39;: 10&#125;# 改，d[key] &#x3D; valuedict1[&#39;age&#39;] &#x3D; 18print(dict1)  # &#123;&#39;name&#39;: &#39;ReaJason&#39;, &#39;age&#39;: 18, &#39;gender&#39;: &#39;female&#39;&#125;# 删，del d[val]，将 d[key] 从 d 中移除。 如果映射中不存在 key 则会引发 KeyErrordel dict1[&#39;name&#39;]print(dict1)  # &#123;&#39;age&#39;: 22, &#39;gender&#39;: &#39;female&#39;&#125;# clear()，移除字典中的所有元素dict1.clear()print(dict1)  # &#123;&#125;# 查，d[key]，返回 d 中以 key 为键的项。 如果映射中不存在 key 则会引发 KeyErrorprint(dict1[&#39;name&#39;])  # ReaJasonprint(dict1[&#39;id&#39;])  # KeyError: &#39;id&#39;# get(key[, default])，如果 key 存在于字典中则返回 key 的值，否则返回 default。 如果 default 未给出则默认为 None，因而此方法绝不会引发 KeyErrorprint(dict1.get(&#39;name&#39;))  # ReaJasonprint(dict1.get(&#39;id&#39;))  # Noneprint(dict1.get(&#39;id&#39;, 1))  # 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="常用函数-3"><a href="#常用函数-3" class="headerlink" title="常用函数"></a>常用函数</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">dict1 &#x3D; &#123;&quot;name&quot;: &quot;ReaJason&quot;, &quot;age&quot;: 22, &quot;gender&quot;: &quot;female&quot;&#125;# len(d)，返回字典 d 中的项数print(len(dict1))  # 3# key in d，如果 d 中存在键 key 则返回 True，否则返回 Falseprint(&quot;name&quot; in dict1)  # True# key not in d，如果 d 中不存在键 key 则返回 True，否则返回 Falseprint(&quot;id&quot; not in dict1)  # True# keys()，返回由字典键组成的一个新视图，类似于字典所有键组成的列表print(dict1.keys())  # dict_keys([&#39;name&#39;, &#39;age&#39;, &#39;gender&#39;])# values()，返回由字典值组成的一个新视图，类似于字典所有值组成的列表print(dict1.values())  # dict_values([&#39;ReaJason&#39;, 22, &#39;female&#39;])# items()，返回由字典项 ((键, 值) 对) 组成的一个新视图print(dict1.items())  # dict_items([(&#39;name&#39;, &#39;ReaJason&#39;), (&#39;age&#39;, 22), (&#39;gender&#39;, &#39;female&#39;)])# 字典遍历，获取 key 和 valuefor key,value in dict1.items():    print(f&quot;&#123;key&#125;：&#123;value&#125;&quot;)&quot;&quot;&quot;name：ReaJasonage：22gender：female&quot;&quot;&quot;# update([other])，使用来自 other 的键&#x2F;值对更新字典，覆盖原有的键，原地更新dict2 &#x3D; &#123;&quot;hobby&quot;: &quot;learning&quot;, &quot;id&quot;: 1&#125;dict1.update(dict2)print(dict1)  # &#123;&#39;name&#39;: &#39;ReaJason&#39;, &#39;age&#39;: 22, &#39;gender&#39;: &#39;female&#39;, &#39;hobby&#39;: &#39;learning&#39;, &#39;id&#39;: 1&#125;dict3 &#x3D; &#123;&quot;name&quot;: &quot;Dazzling&quot;, &quot;age&quot;: 18, &quot;gender&quot;: &quot;male&quot;&#125;dict1.update(dict3)print(dict1)  # &#123;&#39;name&#39;: &#39;Dazzling&#39;, &#39;age&#39;: 18, &#39;gender&#39;: &#39;male&#39;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="字典推导式"><a href="#字典推导式" class="headerlink" title="字典推导式"></a>字典推导式</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 字典推导式用于快速生成字典，以及提取目标数据cookies &#x3D; &quot;anonymid&#x3D;jy0ui55o-u6f6zd; depovince&#x3D;GW; _r01_&#x3D;1;&quot;cookies &#x3D; &#123;cookie.split(&quot;&#x3D;&quot;)[0]:cookie.split(&quot;&#x3D;&quot;)[1] for cookie in cookies.split(&quot;; &quot;)&#125;print(cookies)  # &#123;&#39;anonymid&#39;: &#39;jy0ui55o-u6f6zd&#39;, &#39;depovince&#39;: &#39;GW&#39;, &#39;_r01_&#39;: &#39;1;&#39;&#125;# 其他用法同列表推导式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><ul><li>多个元素的无序组合，集合是无序的，不支持索引操作</li><li>集合元素是唯一的，可用于去重</li></ul><h4 id="集合创建"><a href="#集合创建" class="headerlink" title="集合创建"></a>集合创建</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 使用 &#123;value1, value2&#125;set1 &#x3D; &#123;1, 2, 3, 1, 3, 4&#125;# 使用set()方法set2 &#x3D; set([1, 2, 3, 1, 3, 4])# 创建空集合set3 &#x3D; set()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="增删改查-1"><a href="#增删改查-1" class="headerlink" title="增删改查"></a>增删改查</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">set1 &#x3D; &#123;10, 20&#125;# add(elem)，将元素 elem 添加到集合中set1.add(30)set1.add(10)print(set1)  # &#123;10, 20, 30&#125;# update(*others)，更新集合，添加来自 others 中的所有元素list1 &#x3D; [10, 20, 30, 40, 50]set1.update(list1)print(set1)  # &#123;40, 10, 50, 20, 30&#125;# remove(elem)，从集合中移除元素 elem。 如果 elem 不存在于集合中则会引发 KeyErrorset1.remove(10)print(set1)  # &#123;20&#125;set1.remove(10)  # KeyError: 10# discard(elem)，如果元素 elem 存在于集合中则将其移除set1.discard(10)print(set1)  # &#123;20&#125;set1.discard(10)# pop()，从集合中移除并返回任意一个元素。 如果集合为空则会引发 KeyErrorset1.pop()set1.pop()print(set1)  # set()set1.pop()  # KeyError: &#39;pop from an empty set&#39;# x in s，检测 x 是否为 s 中的成员print(10 in set1)  # Trueprint(100 in set1)  # False# x not in s，检测 x 是否非 s 中的成员print(10 not in set1)  # Falseprint(100 not in set1)  # True<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ul><li>将一段具有独立功能的代码块整合到一个整体并命名。在需要的地方调用，实现更高效的代码复用</li><li>函数定义参数可有可无，返回值也一样，函数必须先定义后使用</li><li>函数设计要尽量短小，嵌套层次不宜过深</li><li>函数申明应该做到合理、简单、易于使用</li><li>函数参数设计应考虑向下兼容</li><li>一个函数只做一件事，尽量保证函数语句粒度的一致性</li></ul><h4 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 使用 def 定义函数，return 返回需要返回的值（非必需）def 函数名(参数1（可选）, 参数2（可选）):    函数内代码    ......    return 返回值（可选）# 定义一个实现加法的函数def a_add_b(a, b):    return a + bresult &#x3D; a_add_b(10, 90)print(result)  # 100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="说明文档"><a href="#说明文档" class="headerlink" title="说明文档"></a>说明文档</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">def a_add_b(a, b):    &quot;&quot;&quot;    我是a_add_b的说明文档：一个实现加法的函数    :param a: 参数 1    :param b: 参数 2    :return: 返回值    &quot;&quot;&quot;    return a + b# help(函数名称)，查看函数的说明文档help(a_add_b)&quot;&quot;&quot;Help on function a_add_b in module __main__:a_add_b(a, b)    一个实现加法的函数    :param a: 参数 1    :param b: 参数 2    :return: 返回值&quot;&quot;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h4><ul><li>局部变量，定义在函数内部，作用范围为该函数内</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">def test():    a &#x3D; 100    print(a)test()  # 100print(a)  # NameError: name &#39;a&#39; is not defined<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>全局变量，定义在全局，当前 py 文件内都可访问到</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">a &#x3D; 100def test():    print(a)test()  # 100print(a)  # 100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>global()，可被用来表明特定变量生存于全局作用域并且应当在其中被重新绑定</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">a &#x3D; 100print(f&quot;全局变量a：&#123;a&#125;&quot;)  # 全局变量a：100def test1():    a &#x3D; 200  # 局部变量，    print(f&quot;test1函数的a：&#123;a&#125;&quot;)def test2():    global a  # 修改全局变量    a &#x3D; 300    print(f&quot;test2函数的a：&#123;a&#125;&quot;)test1()  # test1函数的a：200test2()  # test2函数的a：300print(f&quot;全局变量a：&#123;a&#125;&quot;)  # 全局变量a：300<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>nonlocal()，表明特定变量生存于外层作用域中并且应当在其中被重新绑定</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">def test():    a &#x3D; 200        def test1():        print(f&quot;test1函数的a：&#123;a&#125;&quot;)            def test2():        nonlocal a  # 修改局部变量        print(f&quot;test2函数的a：&#123;a&#125;&quot;)        a &#x3D; 100        print(f&quot;test1函数的a：&#123;a&#125;&quot;)    test1()    test2()test()&quot;&quot;&quot;test1函数的a：200test2函数的a：200test1函数的a：100&quot;&quot;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h4><ul><li>位置参数</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 位置参数与形参一一对应def user_info(name, age, gender):    print(f&quot;name：&#123;name&#125;，age：&#123;age&#125;，gender：&#123;gender&#125;&quot;)user_info(&quot;ReaJason&quot;, 18, &quot;female&quot;)  # name：ReaJason，age：18，gender：femaleuser_info(18, &quot;female&quot;, &quot;ReaJason&quot;)  # name：18，age：female，gender：ReaJason<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>关键字参数</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 当函数调用时既有位置参数也有关键字参数时，关键字参数必须写在最后def user_info(name, age, gender):    print(f&quot;name：&#123;name&#125;，age：&#123;age&#125;，gender：&#123;gender&#125;&quot;)user_info(name&#x3D;&quot;ReaJason&quot;, age&#x3D;18, gender&#x3D;&quot;female&quot;)  # name：ReaJason，age：18，gender：femaleuser_info(age&#x3D;18, gender&#x3D;&quot;female&quot;, name&#x3D;&quot;ReaJason&quot;)  # name：ReaJason，age：18，gender：femaleuser_info(&quot;ReaJason&quot;, 18, gender&#x3D;&quot;female&quot;)  # name：ReaJason，age：18，gender：femaleuser_info(name&#x3D;&quot;ReaJason&quot;, age&#x3D;18, &quot;female&quot;)  # SyntaxError: positional argument follows keyword argument<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>默认参数</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 所有位置参数必须在默认参数之前def user_info(name, age, gender&#x3D;&quot;female&quot;):    print(f&quot;name：&#123;name&#125;，age：&#123;age&#125;，gender：&#123;gender&#125;&quot;)user_info(&quot;ReaJason&quot;, 18)  # name：ReaJason，age：18，gender：femaleuser_info(&quot;ReaJason&quot;, 18, &quot;male&quot;)  # name：ReaJason，age：18，gender：male<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>可变长参数</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"># *args，传进去的所有参数都会被 args 变量收集，根据参数位置合并为一个元组def user_info(*args):    print(args)user_info(&quot;ReaJason&quot;, 18, &quot;female&quot;, [&quot;learning&quot;, &quot;gaming&quot;])# (&#39;ReaJason&#39;, 18, &#39;female&#39;, [&#39;learning&#39;, &#39;gaming&#39;])# **kwargs，传进去的所有参数都会被 kwargs 变量收集，将关键字参数做为 key 后面的值作为 value 合并为一个一个字典def user_info(**kwargs):    print(kwargs)user_info(name&#x3D;&quot;ReaJason&quot;, age&#x3D;18, gender&#x3D;&quot;female&quot;, hobby&#x3D;[&quot;learning&quot;, &quot;gaming&quot;])# &#123;&#39;name&#39;: &#39;ReaJason&#39;, &#39;age&#39;: 18, &#39;gender&#39;: &#39;female&#39;, &#39;hobby&#39;: [&#39;learning&#39;, &#39;gaming&#39;]&#125;# 当位置参数，默认参数，与可变长参数在同一个函数定义中，相对位置为 位置参数 &gt; 默认参数 &gt; 可变长参数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="lambda函数"><a href="#lambda函数" class="headerlink" title="lambda函数"></a>lambda函数</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 定义匿名函数a_add_b &#x3D; lambda a, b: a+bprint(a_add_b(10, 90))  # 100# 用于列表排序，选定 key<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="map函数"><a href="#map函数" class="headerlink" title="map函数"></a>map函数</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 求一个序列或者多个序列进行函数映射之后的值，列表推导得方式更好def func(x):    return x ** 2list1 &#x3D; [1, 2, 3, 4, 5]list2 &#x3D; [i ** 2 for i in list1]  # 推荐方式result1 &#x3D; map(func, list1)result2 &#x3D; map(lambda x: x ** 2, list1)print(result1)  # &lt;map object at 0x00000177FD39D848&gt;print(list(result1))  # [1, 4, 9, 16, 25]print(list(result2))  # [1, 4, 9, 16, 25]print(list2)  # [1, 4, 9, 16, 25]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="reduce函数"><a href="#reduce函数" class="headerlink" title="reduce函数"></a>reduce函数</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 对一个序列进行压缩运算，得到一个值import functools  # import 导入模块list1 &#x3D; [1, 2, 3, 4, 5, 6]result &#x3D; functools.reduce(lambda x, y: x + y, list1)print(result)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="filter函数"><a href="#filter函数" class="headerlink" title="filter函数"></a>filter函数</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 过滤掉序列中不符合函数条件的元素，列表推导得方式更好def func(x):    return x % 2 &#x3D;&#x3D; 0list1 &#x3D; [1, 2, 3, 4, 5, 6]list2 &#x3D; [i for i in list1 if i % 2 &#x3D;&#x3D; 0]  # 推荐方式result1 &#x3D; filter(func, list1)result2 &#x3D; filter(lambda x: x % 2 &#x3D;&#x3D; 0, list1)print(result1)  # &lt;filter object at 0x000001D589779048&gt;print(list(result1))  # [2, 4, 6]print(list(result2))  # [2, 4, 6]print(list2)  # [2, 4, 6]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><h4 id="文件的读"><a href="#文件的读" class="headerlink" title="文件的读"></a>文件的读</h4><ul><li>关于文件读四个模式</li><li><code>r</code>，以只读的方式打开文件，未找到文件会报错，文件的指针将会放在文件的开头，这是默认模式，<code>r</code> 打开文本文件</li><li><code>rb</code>，以二进制格式打开一个文件用于只读。文件指针放在文件的开头。这是默认模式，<code>rb</code> 打开非文本文件</li><li><code>r+</code>，打开一个文件用于读写，准确来说是读并且追加。文件指针将会放在文件的开头</li><li><code>rb+</code>，以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"># f.read(size)，读取文件指定 size 大小字节的数据，每执行一次往后移动指定位数，如果未指定 size，则读取文件所有数据# text.txt 文本内容如下：&quot;&quot;&quot;hello world&quot;&quot;&quot;f &#x3D; open(&quot;text.txt&quot;, &quot;r&quot;)content &#x3D; f.read(5)print(content)  # hellocontent &#x3D; f.read(6)print(content)  #  worldf.close()f &#x3D; open(&quot;text.txt&quot;, &quot;r&quot;)content &#x3D; f.read()print(content)  # hello worldf.close()# f.readlines()，以列表的形式读取文件中的所有行# text.txt 文本内容如下：&quot;&quot;&quot;hello worldhello python&quot;&quot;&quot;f &#x3D; open(&quot;text.txt&quot;, &quot;r&quot;)content &#x3D; f.readlines()print(content)  # [&#39;hello world\n&#39;, &#39;hello python&#39;]f.close()# f.readline()，从文件中读取一行，换行符（\n）留在字符串的末尾，中间空白行是 \n # text.txt 文本内容如下：&quot;&quot;&quot;hello worldhello python&quot;&quot;&quot;f &#x3D; open(&quot;text.txt&quot;, &quot;r&quot;)content &#x3D; f.readline()print(f&quot;第一行&#123;content!r&#125;&quot;)  # 第一行&#39;hello world\n&#39;content &#x3D; f.readline()print(f&quot;第二行&#123;content!r&#125;&quot;)  # 第二行&#39;\n&#39;content &#x3D; f.readline()print(f&quot;第三行&#123;content!r&#125;&quot;)  # 第三行&#39;hello python&#39;content &#x3D; f.readline()print(f&quot;第四行&#123;content!r&#125;&quot;)  # 第四行&#39;&#39;，此时文件一共三行，已读完，并不报错，输出空白字符f.close()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="文件的写"><a href="#文件的写" class="headerlink" title="文件的写"></a>文件的写</h4><ul><li>关于文件写四个模式</li><li><code>w</code>，打开一个文件只用于写入。如果文件已存在则先清空后写入，如果没有文件则创建文件</li><li><code>wb</code>，以二进制格式打开一个文件只用于写入。</li><li><code>w+</code>，打开一个文件用于读写，巴拉巴拉</li><li><code>wb+</code>，以二进制格式打开一个文件用于读写，巴拉巴拉</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"># f.write(string) 会把 string 的内容写入到文件中，并返回写入的字符数f &#x3D; open(&quot;text1.txt&quot;, &quot;w&quot;)f.write(&quot;hello world&quot;)  # 将字符串写入文件中f.close()# text1.txt 文本内容：&quot;&quot;&quot;hello world&quot;&quot;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="文件的追加"><a href="#文件的追加" class="headerlink" title="文件的追加"></a>文件的追加</h4><ul><li>关于文件写四个模式</li><li><code>a</code>，打开一个文件用于追加。如果文件存在，新内容将写在文件已有内容之后。文件不存在则创建新文件进行写入。</li><li><code>ab</code>，<code>a+</code>，<code>ab+</code></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">f &#x3D; open(&quot;text2.txt&quot;, encoding&#x3D;&quot;utf-8&quot;, mode&#x3D;&quot;a&quot;)f.write(&quot;我是第一句&quot;)f.close()# text1.txt 文本内容：&quot;&quot;&quot;我是第一句&quot;&quot;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"># f.tell() 返回一个整数，给出文件对象在文件中的当前位置，表示为二进制模式下时从文件开始的字节数，以及文本模式下的意义不明的数字# text.txt 文本内容：&quot;&quot;&quot;hello world&quot;&quot;&quot;f &#x3D; open(&quot;text.txt&quot;, &quot;r&quot;)print(f.tell())  # 0content &#x3D; f.read(5)print(content)  # helloprint(f.tell())  # 5f.close()# f.seek(offset, whence)，通过向一个参考点添加 offset 来计算位置；参考点由 whence 参数指定。 whence 的 0 值表示从文件开头起算，1 表示使用当前文件位置，2 表示使用文件末尾作为参考点f &#x3D; open(&quot;text.txt&quot;, &quot;r&quot;)print(f.tell())  # 0f.seek(6)content &#x3D; f.read()print(content)  # worldprint(f.tell())  # 11f.close()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="with"><a href="#with" class="headerlink" title="with"></a>with</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"># with open(filename, mode, encoding) as f，打开文件不再需要 f.close，with 会自动处理# 不设置读写模式，默认为 r 模式打开文件with open(&quot;text.txt&quot;, encoding&#x3D;&quot;utf-8&quot;) as result:    print(result.read())&quot;&quot;&quot;hello worldhello python&quot;&quot;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Python-类与对象"><a href="#Python-类与对象" class="headerlink" title="Python 类与对象"></a>Python 类与对象</h2><ol><li>类是对一系列具有相同<strong>特征</strong>和<strong>行为</strong>的事物的统称，是一个抽象概念，特征即属性，行为即方法</li><li>对象是类的一个实例，先有类，后有对象</li><li>类名遵循大驼峰命名如：<code>HelloWorld</code></li><li>属性和方法可以在类中指定也可以动态添加</li><li>面向对象的三个特点：封装、继承、多态</li></ol><h3 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">&quot;&quot;&quot;class 类名:    代码&quot;&quot;&quot;# self 指的是调用该函数的对象# 定义一个动物类，拥有 name 属性，eat 方法class Animal:    name &#x3D; None        def eat(self):        print(f&quot;&#123;self.name&#125; 正在吃...&quot;)# 实例化一个动物：猫，获取属性通过 对象名.属性名cat &#x3D; Animal()  # 获得一个 Animal 的实例，拥有 name 属性，和 eat 方法cat.name &#x3D; &quot;猫&quot;  # 指定 cat 的 name 属性的值为猫print(cat.name)  # 获取 cat 的 name 属性的值 # 猫cat.eat()  # 调用 cat 的 eat 方法#  猫 正在吃...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="魔法方法"><a href="#魔法方法" class="headerlink" title="魔法方法"></a>魔法方法</h3><h4 id="init-方法"><a href="#init-方法" class="headerlink" title="init 方法"></a>init 方法</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"># __init__ 为初始化方法class Animal:    def __init__(self, name):        self.name &#x3D; name    def eat(self):        print(f&quot;&#123;self.name&#125; 正在吃...&quot;)cat &#x3D; Animal(&quot;猫&quot;)  # 传入 name 参数，用于初始化一个猫的实例print(cat)  # &lt;__main__.Animal object at 0x0000028581CED688&gt;cat.eat()  # 猫 正在吃...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="str-方法"><a href="#str-方法" class="headerlink" title="str 方法"></a>str 方法</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 当 print 对象的时候，默认打印的是对象的内存地址，定义 __str__ 方法，再次打印对象则输出的是 __str__ 方法的返回值class Animal:    def __init__(self, name):        self.name &#x3D; name        def __str__(self):        return f&quot;这是一只&#123;self.name&#125;&quot;        def eat(self):        print(f&quot;&#123;self.name&#125; 正在吃...&quot;)        dog &#x3D; Animal(&quot;狗&quot;)  # 传入 name 参数，用于初始化一个狗的实例print(dog)  # 这是一只狗dog.eat()  # 狗 正在吃...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="del-方法"><a href="#del-方法" class="headerlink" title="del 方法"></a>del 方法</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 当删除对象的时候，python 解释器会默认调用 __del__ 方法（析构方法）class Animal:        def __init__(self, name):        self.name &#x3D; name        def __str__(self):        return f&quot;这是一只&#123;self.name&#125;&quot;        def eat(self):        print(f&quot;&#123;self.name&#125; 正在吃...&quot;)        def __del__(self):        print(f&quot;&#123;self.name&#125; 死了&quot;)    dog &#x3D; Animal(&quot;狗&quot;)  # 传入 name 参数，用于初始化一个狗的实例print(dog)  # 这是一只狗dog.eat()  # 狗 正在吃...#  狗 死了  # 程序结束，对象删除，所以调用了__del__方法，系统收回内存<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><ol><li>所有类默认继承 object 类 </li><li>子类继承父类的所有属性和方法</li><li>子类可以重写父类方法</li><li>多继承，一个子类可以有多个父类</li></ol><h4 id="单继承"><a href="#单继承" class="headerlink" title="单继承"></a>单继承</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">class A:    def __init__(self):        self.num &#x3D; 1        def print_num(self):        print(f&quot;我的数字是：&#123;self.num&#125;&quot;)class B(A):    pass  # pass用来代码占位，没有任何实际意义b &#x3D; B()  # 创建 B 类的一个实例对象print(b.num)  # 1 # 打印 b 实例的 num 属性的值，找不到去父类找b.print_num()  # 我的数字是：1 # 调用 b 实例的 print_num 方法，找不到去父类找<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="重写方法"><a href="#重写方法" class="headerlink" title="重写方法"></a>重写方法</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">class A:    def __init__(self):        self.num &#x3D; 1        def print_num(self):        print(f&quot;A的数字是：&#123;self.num&#125;&quot;)class B(A):    def print_num(self):        print(f&quot;B的数字是：2&quot;)b &#x3D; B()b.print_num()  # B的数字是：2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">class A:    def __init__(self):        self.num &#x3D; 1        def print_num(self):        print(f&quot;A的数字是：&#123;self.num&#125;&quot;)class B:    def __init__(self):        self.num &#x3D; 2        def print_num(self):        print(f&quot;B的数字是：&#123;self.num&#125;&quot;)class C(B, A):    pass    c &#x3D; C()  # 创建 C 类的一个实例对象print(c.num)  # 2 # 打印 c 实例的 num 属性的值，找不到去父类找c.print_num()  # B的数字是：2 # 调用 c 实例的 print_num 方法，找不到去父类找# __mro__()方法获取继承顺序，即子类未找到属性或方法向上查找父类的顺序print(C.__mro__)  # (&lt;class &#39;__main__.C&#39;&gt;, &lt;class &#39;__main__.B&#39;&gt;, &lt;class &#39;__main__.A&#39;&gt;, &lt;class &#39;object&#39;&gt;)# 如打印顺序可知，C 找不到的话，找 B，再 A，最后 object类<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="多层继承"><a href="#多层继承" class="headerlink" title="多层继承"></a>多层继承</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">class A:    def __init__(self):        self.num &#x3D; 1        def print_num(self):        print(f&quot;A的数字是：&#123;self.num&#125;&quot;)class B:    def __init__(self):        self.num &#x3D; 2        def print_num(self):        print(f&quot;B的数字是：&#123;self.num&#125;&quot;)class C(B, A):    passclass D(C):    passd &#x3D; D()d.print_num()  # B的数字是：2print(D.__mro__)# (&lt;class &#39;__main__.D&#39;&gt;, &lt;class &#39;__main__.C&#39;&gt;, &lt;class &#39;__main__.B&#39;&gt;, &lt;class &#39;__main__.A&#39;&gt;, &lt;class &#39;object&#39;&gt;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="super"><a href="#super" class="headerlink" title="super()"></a>super()</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 子类调用父类的方法class A:    def __init__(self):        self.num &#x3D; 1        def print_num(self):        print(f&quot;A的数字是：&#123;self.num&#125;&quot;)class B(A):    def print_num(self):        super(B, self).print_num()  # A的数字是：1        print(f&quot;B的数字是：2&quot;)b &#x3D; B()b.print_num()  # B的数字是：2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="私有属性"><a href="#私有属性" class="headerlink" title="私有属性"></a>私有属性</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 设置属性和方法，不继承给子类，在属性和方法名前加 __（双下划钱）class A:    def __init__(self):        self.num &#x3D; 1        self.__score &#x3D; 100        def print_num(self):        print(f&quot;A的数字是：&#123;self.num&#125;&quot;)class B(A):    def __init__(self):        super(B, self).__init__()  # 继承A类的初始化方法        def print_num(self):        print(f&quot;B的数字是：&#123;self.num&#125;&quot;)b &#x3D; B()print(b.num)  # 1print(b.__score)  # AttributeError: &#39;B&#39; object has no attribute &#39;__score&#39;# 修改私有属性，get，setclass A:    def __init__(self):        self.num &#x3D; 1        self.__score &#x3D; 100        def print_num(self):        print(f&quot;A的数字是：&#123;self.num&#125;&quot;)        def get_score(self):        return self.__score        def set_score(self, score):        self.__score &#x3D; scorea &#x3D; A()# print(a.__score)print(a.get_score())  # 100a.set_score(1000)print(a.get_score())  # 1000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><ol><li>多态是指一类事物有多种形态</li><li>子类重写父类方法，调用不同子类对象的相同父类方法，可以产生不同的执行结果</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">class Animal:        def work(self):        print(&quot;动物在叫，人坏掉&quot;)class Cat(Animal):        def work(self):        print(&quot;猫在叫，人坏掉&quot;)    class Dog(Animal):        def work(self):        print(&quot;狗在叫，人坏掉&quot;)class Person:        def work_with_pet(self, cls):        cls.work()cat &#x3D; Cat()dog &#x3D; Dog()person &#x3D; Person()person.work_with_pet(cat)  # 猫在叫，人坏掉person.work_with_pet(dog)  # 狗在叫，人坏掉<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h3><ul><li>当方法中需要使用类对象（如访问私有类属性等），定义类方法</li><li>类方法一般和类属性配合使用</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"># @classmethod，第一个参数必须是类对象，一般为 clsclass Animal:    __name &#x3D; &quot;动物&quot;        @classmethod    def get_name(cls):        return cls.__namea &#x3D; Animal()print(a.get_name())  # 动物<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><ul><li>静态方法既不需要传递类对象也不需要传入实例对象</li><li>静态方法也能够通过实例对象和类对象去访问</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"># @staticmethodclass Animal:        @staticmethod    def eat():        print(&quot;吃就完事了&quot;)a &#x3D; Animal()a.eat()  # 吃就完事了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Python-错误和异常"><a href="#Python-错误和异常" class="headerlink" title="Python 错误和异常"></a>Python 错误和异常</h2><h3 id="语法错误"><a href="#语法错误" class="headerlink" title="语法错误"></a>语法错误</h3><p>语法错误又称解析错误，可能是你在学习Python 时最容易遇到的错误</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 符号或者缩进语法错误等等<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><p>即使语句或表达式在语法上是正确的，但在尝试执行时，它仍可能会引发错误。 在执行时检测到的错误被称为 异常，异常不一定会导致严重后果。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">try:    可能出现异常的代码except 异常类型:    出现异常之后执行的代码# r 模式打开文件，文件不存在会抛出异常try:    f &#x3D; open(&quot;text.txt&quot;, &quot;r&quot;)except:    f &#x3D; open(&quot;text.txt&quot;, &quot;w&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="捕获指定异常"><a href="#捕获指定异常" class="headerlink" title="捕获指定异常"></a>捕获指定异常</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">try:    print(&quot;12345&quot;)    f &#x3D; open(&quot;123.txt&quot;, &quot;r&quot;)  # 只读模式打开，未找到文件，抛出异常    print(&quot;1111&quot;)  # 上面异常，下面代码将不再执行    print(num)    # 未定义 num，会抛出 NameError 异常错误信息except (NameError, IOError) as result: # 将错误信息赋值给result    print(&quot;产生错误了&quot;)    print(result)&quot;&quot;&quot;12345产生错误了[Errno 2] No such file or directory: &#39;123.txt&#39;&quot;&quot;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="捕获所有异常"><a href="#捕获所有异常" class="headerlink" title="捕获所有异常"></a>捕获所有异常</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">try:    print(&quot;12345&quot;)    f &#x3D; open(&quot;123.txt&quot;, &quot;r&quot;)    print(&quot;1111&quot;)    print(num)except Exception as result: # 将错误信息赋值给result    print(&quot;产生错误了&quot;)    print(result)&quot;&quot;&quot;12345产生错误了[Errno 2] No such file or directory: &#39;123.txt&#39;&quot;&quot;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="else-语句"><a href="#else-语句" class="headerlink" title="else 语句"></a>else 语句</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 没有异常发生执行的代码，用 else 语句<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="finally-语句"><a href="#finally-语句" class="headerlink" title="finally 语句"></a>finally 语句</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 无论异常是否发生，一定都会执行的代码，用 finally 语句，常用于资源的清理<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">class PhoneNumError(Exception):        def __init__(self, phone):        self.phone &#x3D; phone        def __str__(self):        return f&quot;&#123;self.phone&#125;，手机位数错误，应为11位&quot;try:    phone_num &#x3D; &quot;1029321212&quot;    if len(phone_num) &lt; 11:        raise PhoneNumError(phone_num)except Exception as e:    print(e)  # 1029321212，手机位数错误，应为11位<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Python-模块与包"><a href="#Python-模块与包" class="headerlink" title="Python 模块与包"></a>Python 模块与包</h2><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><p>模块是一个包含Python定义和语句的文件。文件名就是模块名后跟文件后缀 <code>.py</code></p><p>自定义模块名尽量不要与已有模块同名</p><h4 id="模块的导入"><a href="#模块的导入" class="headerlink" title="模块的导入"></a>模块的导入</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">import 模块名import 模块名1,模块名2       # （不推荐）from 模块名 import 模块内函数from 模块名 import *        # （不推荐）import 模块名 as 别名from 模块名 import 模块内函数 as 别名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="模块搜索顺序"><a href="#模块搜索顺序" class="headerlink" title="模块搜索顺序"></a>模块搜索顺序</h4><ol><li>当前目录</li><li>python 环境变量默认目录下</li><li>python 默认路径</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"># __all__，设置可导出的函数# 当导出模块后，只能使用__all__ 列表中的函数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><p>包是一种通过用“带点号的模块名”来构造 Python 模块命名空间的方法，将有联系的模块组织到一个文件夹，且含有 <code>__init__</code> 文件</p><h4 id="导入包"><a href="#导入包" class="headerlink" title="导入包"></a>导入包</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">import 包名.模块名from 包名 import 模块名# 必须在__init__文件中，添加__all__ &#x3D; []，控制允许导入的模块列表<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis</title>
      <link href="/2024/12/14/javamybatis/"/>
      <url>/2024/12/14/javamybatis/</url>
      
        <content type="html"><![CDATA[<h2 id="第一个-Mybatis-程序"><a href="#第一个-Mybatis-程序" class="headerlink" title="第一个 Mybatis 程序"></a>第一个 Mybatis 程序</h2><p>pom.xml</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>mybatis-config.xml</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><h3 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h3><ul><li>一级缓存是默认就存在的，存在于 SqlSession 生命周期中即会话缓存，每个 SqlSession 都有自己的一级缓存</li><li>当第一次和第二次查询参数完全相同时，第二次就会直接从缓存中获取对象，而不会去查询数据库</li><li>如果需要取消一级缓存需要在 select 标签上设置 flushCache 为 true</li><li>insert，update，delete 都会清空一级缓存</li></ul><h3 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h3><ul><li>二级缓存在于 SqlSessionFactory 生命周期中</li></ul><p>设置二级缓存：</p><ol><li>全局配置：<code>&lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot; /&gt;</code></li><li>mapper.xml 中配置：<code>&lt;cache /&gt;</code></li><li>mapper 接口中配置：<code>@CacheNamespace</code></li><li>混用两种配置：<code>@CacheNamespaceRef </code>，<code>&lt;cache-ref namespace=&quot;top.reajason.mapper.RoleMapper&quot; /&gt;</code></li></ol><p>默认二级缓存的效果：</p><ul><li>映射语句文件中的所有 select 语句的结果将会被缓存。</li><li>映射语句文件中的所有 insert、update 和 delete 语句会刷新缓存。</li><li>缓存会使用最近最少使用算法（LRU, Least Recently Used）算法来清除不需要的缓存。</li><li>缓存不会定时进行刷新（也就是说，没有刷新间隔）。</li><li>缓存会保存列表或对象（无论查询方法返回哪种）的 1024 个引用。</li><li>缓存会被视为读&#x2F;写缓存，这意味着获取到的对象并不是共享的，可以安全地被调用者修改，而不干扰其他调用者或线程所做的潜在修改。</li></ul><p>二级缓存适合场景：</p><ul><li>以查询为主的应用中，只有尽可能少的增删改操作</li><li>绝大多数以单表操作存在时，关联表较少时使用参照缓存 <code>&lt;cache-ref namespace=&quot;&quot;&gt;</code> 来进行配置</li><li>无法保证出现脏读的情况，应使用可控制的缓存来代替二级缓存</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue Learning</title>
      <link href="/2024/11/30/vuelearning/"/>
      <url>/2024/11/30/vuelearning/</url>
      
        <content type="html"><![CDATA[<h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><p>CDN 引入：<code>&lt;script src=&quot;https://unpkg.com/vue@next&quot;&gt;&lt;/script&gt;</code></p><p>静态引入：<code>&lt;script src=&quot;js/vue.js&quot;&gt;&lt;/script&gt;</code></p><h2 id="Counter-计数器"><a href="#Counter-计数器" class="headerlink" title="Counter 计数器"></a>Counter 计数器</h2><p>js 原生实现：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>counter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>increment<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>+1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>decrement<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>-1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> counterEl <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".counter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> incrementEl <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".increment"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> decrementEl <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".decrement"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    counterEl<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> counter<span class="token punctuation">;</span>    incrementEl<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      counter<span class="token operator">++</span><span class="token punctuation">;</span>      counterEl<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> counter<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    decrementEl<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      counter<span class="token operator">--</span><span class="token punctuation">;</span>      counterEl<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> counter<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>vue 实现：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">            &lt;div>                &lt;h1>&#123;&#123;message&#125;&#125;&lt;/h1>            &lt;h2>&#123;&#123;counter&#125;&#125;&lt;/h2>            &lt;button @click="increment">+1&lt;/button>            &lt;button @click="decrement">-1&lt;/button>                &lt;/div>        </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>      <span class="token comment">// vue3 中 data 必须是一个函数</span>      <span class="token function-variable function">data</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>          <span class="token literal-property property">counter</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>          <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">"Hello World"</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>counter<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>counter<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Vue基础"><a href="#Vue基础" class="headerlink" title="Vue基础"></a>Vue基础</h2><p>methods 中函数不能使用箭头函数，如果箭头函数，箭头函数里面的 this 就指向了 window。</p><p>vscode 生成代码片段：<code>文件</code>-&gt;<code>首选项</code>-&gt;<code>用户片段</code>-&gt;<code>输入 html</code>，打开 <a href="https://snippet-generator.app/">Vscode代码片段生成</a> 复制进去即可。</p><h3 id="Mustche-语法"><a href="#Mustche-语法" class="headerlink" title="Mustche 语法"></a>Mustche 语法</h3><p>即双括号语法，其中可以写属性名、表达式、函数调用、三元运算符。不能写语句（赋值，循环等）。</p><h3 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h3><p>v-bind 用于绑定属性，简写为 :</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my-app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>imgUrl<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aUrl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>百度一下<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">"#my-app"</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">imgUrl</span><span class="token operator">:</span> <span class="token string">"https://github.githubassets.com/images/modules/profile/badge--acv-64.png"</span><span class="token punctuation">,</span>                <span class="token literal-property property">aUrl</span><span class="token operator">:</span> <span class="token string">"https://www.baidu.com"</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>动态绑定 class</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">.active</span> <span class="token punctuation">&#123;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my-app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;active: isActive&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>嘻嘻嘻<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classGroup<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>哈哈哈<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>toggle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>转换<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">"#my-app"</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">isActive</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token literal-property property">classGroup</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'active'</span><span class="token punctuation">,</span> <span class="token string">'title'</span><span class="token punctuation">,</span> <span class="token string">'abc'</span><span class="token punctuation">]</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>isActive <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>isActive            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>动态绑定 style</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my-app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myStyle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>嘻嘻嘻<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;'font-size': '100px', color: 'red'&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>嘻嘻嘻<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">"#my-app"</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">myStyle</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">fontSize</span><span class="token operator">:</span> <span class="token string">"24px"</span><span class="token punctuation">,</span>                    <span class="token literal-property property">fontWeight</span><span class="token operator">:</span> <span class="token number">700</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>动态绑定属性，此处的 name 也根据 data 声明来决定</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:[name]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>value<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>哈哈<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>data()&#123;name: 'abc',value: 'cdf'&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>v-bind 直接绑定对象，如下会生成 &lt;div name&#x3D;”ReaJason” age&#x3D;”18”&gt;哈哈&lt;&#x2F;div&gt;</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my-app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-bind</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>哈哈<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">"#my-app"</span><span class="token punctuation">,</span>      <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>              <span class="token literal-property property">info</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"ReaJason"</span><span class="token punctuation">,</span>                  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span>              <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h3><p>v-on 绑定事件，简写为 @</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my-app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btnClick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123;counter&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btnClick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">"#my-app"</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">counter</span><span class="token operator">:</span> <span class="token number">0</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token function">btnClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>counter<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>v-on 传递参数</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my-app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 默认传递 event 对象 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btnClick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>按钮1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 当指定传参时，使用 event 对象需要显式指定 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btnClick1($event, '18')<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>按钮2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">"#my-app"</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">counter</span><span class="token operator">:</span> <span class="token number">0</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token function">btnClick</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token function">btnClick1</span><span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"=========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>v-on 使用修饰符</p><p>.stop：阻止事件冒泡</p><p>@keyup.enter：绑定回车键，可自定义和其他键位</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my-app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btnClick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click.stop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btnClick1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">@keyup.enter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>printV<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">"#my-app"</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">counter</span><span class="token operator">:</span> <span class="token number">0</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token function">btnClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"btnClick"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token function">btnClick1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"btnClick1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token function">printV</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h3><p>v-if 是惰性的，条件为 false，不会渲染，条件为 true 才能看见</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my-app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>score > 90<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>优秀<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">v-else-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>score > 60<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>良好<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">v-else</span><span class="token punctuation">></span></span>不及格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">"#my-app"</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">score</span><span class="token operator">:</span> <span class="token number">61</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h3><p>v-show 为 false 时，相当于给元素添加了 display&#x3D;none 属性</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>嘻嘻嘻<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my-app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isShow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>哈哈哈<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isShow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>嘻嘻嘻<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">"#my-app"</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">isShow</span><span class="token operator">:</span> <span class="token boolean">false</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h3><p>列表渲染，支持数组、对象、数字，可以是用 in 也可以用 of。</p><p>当数组使用更新数组的方法会改变原来的值会更新视图，而生成新数组的方法不会更新回原数组，如 filter、concat、slice。</p><p>v-for 中的 key 是为了高效进行数组渲染时候对数组中多余或需要添加的元素的修改。</p><ul><li>没有 key，vue 会尽可能复用原先的 VNode 节点填充，最后进行添加和删除节点</li><li>有 key 时，会先从前进行比对，再从后往前比对，中间使用 map 进行比对，再决定需要删除和添加的元素</li></ul><p>对于 Vue 来说，html 会转换为 VNode Tree，再渲染到页面上。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my-app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>遍历数组:一个参数<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>movie in movies<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>movie<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123;movie&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>遍历数组:两个参数<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(movie,index) in movies<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>movie<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123;index&#125;&#125;---&#123;&#123;movie&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>遍历对象:一个参数<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>value in info<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>value<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123;value&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>遍历对象:两个参数<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(value,key) in info<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>key<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123;key&#125;&#125;---&#123;&#123;value&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>遍历对象:三个参数<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(value,key,index) in info<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>key<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123;index&#125;&#125;---&#123;&#123;key&#125;&#125;---&#123;&#123;value&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>遍历数字:一个参数<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>value in 4<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>value<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123;value&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>遍历数字:两个参数<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(value,index) in 4<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>value<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123;index&#125;&#125;---&#123;&#123;value&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">"#my-app"</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">movies</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"朝花夕誓"</span><span class="token punctuation">,</span><span class="token string">"烟火"</span><span class="token punctuation">,</span><span class="token string">"你的名字"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token literal-property property">info</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"ReaJason"</span><span class="token punctuation">,</span> <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">"male"</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h3><p>计算属性，计算属性是有缓存的，状态改变时只会计算一次，而 methods 每次都会当函数进行调用</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my-app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>&#123;&#123;fullName&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>&#123;&#123;fullName&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>&#123;&#123;fullName&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>&#123;&#123;fullName&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>&#123;&#123;getFullName()&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>&#123;&#123;getFullName()&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>&#123;&#123;getFullName()&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>&#123;&#123;getFullName()&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">"#my-app"</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token string">"Tom"</span><span class="token punctuation">,</span>                <span class="token literal-property property">lastName</span><span class="token operator">:</span> <span class="token string">"Jason"</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token function">getFullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"方法调用了"</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token function">fullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"计算属性调用了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>计算属性的 get 和 set，如果单函数就是 get 方法，如果需要加 set 方法使用对象即可</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my-app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>&#123;&#123;fullName&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>changeFullName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>change<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">"#my-app"</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token string">"Tom"</span><span class="token punctuation">,</span>                <span class="token literal-property property">lastName</span><span class="token operator">:</span> <span class="token string">"Jason"</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token function">changeFullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>fullName <span class="token operator">=</span> <span class="token string">"Code Why"</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">fullName</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">var</span> str <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> str<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h3><p>侦听器，侦听数据的变化自动调用</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my-app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">"#my-app"</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">"hahah"</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token comment">/*                mmessage：侦听的属性名            */</span>            <span class="token function">message</span><span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span> oldValue</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"新值："</span><span class="token punctuation">,</span> newValue<span class="token punctuation">,</span> <span class="token string">"旧值："</span><span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>默认只能侦听属性本身，无法侦听到内部数据的改变</p><p>deep：true，开启深度侦听，可侦听内部属性的变化，无论多深</p><p>immediate：true，立即执行，无论数据是否改变都会执行一次</p><p>由于对象是引用类型，因此 oldValue 和 newValue 会执行同一个对象导致打印同一个值</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my-app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>name:&#123;&#123;info.name&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>age:&#123;&#123;info.name&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>friend.name:&#123;&#123;info.friend[0].name&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>changeInfo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>改变info<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>changeName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>改变info的name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>changeFriendName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>改变info的friend中的name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">"#my-app"</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">info</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token literal-property property">friend</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"lucy"</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token function">changeInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>info <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Mory"</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token literal-property property">friend</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Jack"</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token function">changeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>info<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Jery"</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token function">changeFriendName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>info<span class="token punctuation">.</span>friend<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"lily"</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">info</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token function-variable function">handler</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span> oldValue</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"新值："</span><span class="token punctuation">,</span> newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"旧值："</span><span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token literal-property property">deep</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token literal-property property">immediate</span><span class="token operator">:</span> <span class="token boolean">true</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="购物车案例"><a href="#购物车案例" class="headerlink" title="购物车案例"></a>购物车案例</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>购物车案例<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">#app</span> <span class="token punctuation">&#123;</span>        <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>        <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>        <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token property">margin</span><span class="token punctuation">:</span> 0px auto<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">table</span> <span class="token punctuation">&#123;</span>        <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #e9e9e9<span class="token punctuation">;</span>        <span class="token property">border-collapse</span><span class="token punctuation">:</span> collapse<span class="token punctuation">;</span>        <span class="token property">border-spacing</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">th,    td</span> <span class="token punctuation">&#123;</span>        <span class="token property">padding</span><span class="token punctuation">:</span> 8px 16px<span class="token punctuation">;</span>        <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #e9e9e9<span class="token punctuation">;</span>        <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">th</span> <span class="token punctuation">&#123;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> #f7f7f7<span class="token punctuation">;</span>        <span class="token property">color</span><span class="token punctuation">:</span> #5c6b77<span class="token punctuation">;</span>        <span class="token property">font-weight</span><span class="token punctuation">:</span> 600<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my-app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>books.length > 0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>&#123;&#123;title&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>priceBox<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>toP<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>总价格：&#123;&#123;totalPrice&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thead</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>书名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>时间<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>价格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>数量<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>操作<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thead</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(book, index) of books<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>&#123;&#123;book.id&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>&#123;&#123;book.name&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>&#123;&#123;book.time&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>&#123;&#123;book.price&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>decreCount(index)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>-1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">margin</span><span class="token punctuation">:</span> 0 5px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>&#123;&#123;book.count&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>increCount(index)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>+1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deleteBook(index)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>移除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-else</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>购物车为空<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.bootcdn.net/ajax/libs/vue/3.1.5/vue.global.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">"#my-app"</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"购物车案例"</span><span class="token punctuation">,</span>                <span class="token literal-property property">books</span><span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token punctuation">&#123;</span>                        <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"算法导论"</span><span class="token punctuation">,</span>                        <span class="token literal-property property">time</span><span class="token operator">:</span> <span class="token string">"2020-01"</span><span class="token punctuation">,</span>                        <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                        <span class="token literal-property property">price</span><span class="token operator">:</span> <span class="token number">80</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                    <span class="token punctuation">&#123;</span>                        <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>                        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"设计模式"</span><span class="token punctuation">,</span>                        <span class="token literal-property property">time</span><span class="token operator">:</span> <span class="token string">"2021-01"</span><span class="token punctuation">,</span>                        <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                        <span class="token literal-property property">price</span><span class="token operator">:</span> <span class="token number">60</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                    <span class="token punctuation">&#123;</span>                        <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>                        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"CS61B"</span><span class="token punctuation">,</span>                        <span class="token literal-property property">time</span><span class="token operator">:</span> <span class="token string">"2020-04"</span><span class="token punctuation">,</span>                        <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                        <span class="token literal-property property">price</span><span class="token operator">:</span> <span class="token number">100</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                    <span class="token punctuation">&#123;</span>                        <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>                        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"JavaScript百炼成仙"</span><span class="token punctuation">,</span>                        <span class="token literal-property property">time</span><span class="token operator">:</span> <span class="token string">"2020-02"</span><span class="token punctuation">,</span>                        <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                        <span class="token literal-property property">price</span><span class="token operator">:</span> <span class="token number">34</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">]</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token function">totalPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">let</span> finalPrice <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> book <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>books<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    finalPrice <span class="token operator">+=</span> book<span class="token punctuation">.</span>price <span class="token operator">*</span> book<span class="token punctuation">.</span>count                <span class="token punctuation">&#125;</span>                <span class="token keyword">return</span> finalPrice            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token function">decreCount</span><span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>books<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>count<span class="token operator">--</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token function">increCount</span><span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>books<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>count<span class="token operator">++</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token function">deleteBook</span><span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>books<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h3><p>v-model 可以在表单 input、textarea 以及 select 等元素上创建双向数据绑定，实质就是语法糖，将 data 中的数据绑定到表单元素中，同时监听表单元素的更新，同步更新到 data 中</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my-app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            普通输入框：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&emsp;">&amp;emsp;</span>&#123;&#123;text&#125;&#125; <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            单选复选框：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>singleCheckBox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>agree<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>同意协议            &#123;&#123;singleCheckBox&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            多选复选框：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multiChcekBox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>篮球<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>篮球            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multiChcekBox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>足球<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>足球            &#123;&#123;multiChcekBox&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            单选按钮：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>female<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>女            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>male<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 男            &#123;&#123;gender&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            下拉框：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>point<span class="token punctuation">"</span></span> <span class="token attr-name">multiple</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>打游戏<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>打游戏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>看电影<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>看电影<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>逛街<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>逛街<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>抓娃娃<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>抓娃娃<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span> &#123;&#123;point&#125;&#125; <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            文本域：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>body<span class="token punctuation">"</span></span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>            &#123;&#123;body&#125;&#125; <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">"#my-app"</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">"Hello World"</span><span class="token punctuation">,</span>                <span class="token literal-property property">singleCheckBox</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>                <span class="token literal-property property">multiChcekBox</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token literal-property property">gender</span><span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">,</span>                <span class="token literal-property property">point</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>                <span class="token literal-property property">body</span><span class="token operator">:</span><span class="token string">"你好你好你好"</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>默认监听 input 框的 change 事件，使用 .lazy 修饰符，监听 change 事件</p><p>v-model 绑定的数据总为 string，如果需要为数字类型，使用 .number 修饰符</p><p>.trim 为自动为数据去除前后空白字符</p><h3 id="组件化开发"><a href="#组件化开发" class="headerlink" title="组件化开发"></a>组件化开发</h3><p>全局组件，所有组件中都能使用当前组件，使用 app.component 注册的组件为全局组件</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my-app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>gl</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>gl</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>gl</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>gl</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>gl</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>gl</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>global<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>&#123;&#123;message&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> gl <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">"#global"</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">"Hello 全局组件"</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// App 为根组件</span>    <span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">"#my-app"</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>    <span class="token comment">// 当前注册组件为全局组件</span>    app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"gl"</span><span class="token punctuation">,</span> gl<span class="token punctuation">)</span><span class="token punctuation">;</span>    app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>局部组件，只有注册的组件才能使用，在组件内部使用 compoennts 注册的组件为局部组件</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my-app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tel1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tel1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tel2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tel2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tel2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>&#123;&#123;message&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tel1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>&#123;&#123;message&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> tel1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">"#tel1"</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">"Hello tel1"</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> tel2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">"#tel2"</span><span class="token punctuation">,</span>            <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">"Hello tel2"</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token comment">// App 为根组件</span>    <span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">"#my-app"</span><span class="token punctuation">,</span>        <span class="token literal-property property">components</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            tel1<span class="token punctuation">,</span>            tel2        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>    app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2><p>webpack是一个静态的模块化打包工具，为现代的 JavaScript 应用程序。</p><p>webpack 能将各种各样的前端模块化开发格式文件，转为 js，html，css，以及静态资源</p><p>安装 webpack：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm install webpack webpack-cli –g # 全局安装npm install webpack webpack-cli –D # 局部安装<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>通常使用局部 webpack 来管理项目文件，而项目文件通过 package.json 来进行依赖管理，使用 <code>npm init</code> 即可生成当前项目的 package.json 文件。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">&#123;  &quot;name&quot;: &quot;1&quot;,  &quot;version&quot;: &quot;1.0.0&quot;,  &quot;description&quot;: &quot;&quot;,  &quot;main&quot;: &quot;index.js&quot;,  &quot;scripts&quot;: &#123;    &quot;build&quot;: &quot;webpack&quot;  &#125;,  &quot;author&quot;: &quot;&quot;,  &quot;license&quot;: &quot;ISC&quot;,  &quot;devDependencies&quot;: &#123;    &quot;webpack&quot;: &quot;^5.64.4&quot;,    &quot;webpack-cli&quot;: &quot;^4.9.1&quot;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用局部 webpack 需要使用 <code>npx webpack</code>，在 package.json 中添加脚本之后，使用 <code>nom run build</code> 即可使用局部 webpack 打包</p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>配置文件名为：<code>webpack.config.json</code>，可以使用其他名字，但是使用 webpack 时需要指定配置文件</p><p>webpack 会从入口文件，生成依赖树，只有依赖的文件才会打包进去</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"node:path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">"./src/main.js"</span><span class="token punctuation">,</span> <span class="token comment">// 指定入口文件</span>    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">"bundle.js"</span><span class="token punctuation">,</span>  <span class="token comment">// 指定打包之后文件名</span>        <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"./dist"</span><span class="token punctuation">)</span> <span class="token comment">// 指定打包文件输出路径</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="css-loader"><a href="#css-loader" class="headerlink" title="css-loader"></a>css-loader</h3><p>webpack 默认只会解析 js 文件，其他文件都需要 loader 支持，css-loader 支持解析 css 文件</p><p>安装 css-loader：<code>npm install css-loader -D</code></p><p>loader 配置方式，module.rules：</p><ul><li>test 属性：用于对 resource 进行匹配，通常设置为正则表达式</li><li>use 属性：<ul><li>loader：required，loader 加载器的字符串</li><li>options：optional，值会传入 loader 中</li><li>user:[“style-loader”] 是 user:[{loader:”style-loader”}]</li></ul></li><li>loader 属性：Rule.user:[loader] 的缩写</li></ul><p>css-loader 只用于解析 css 文件，而不会加载样式，style-loader 会完成插入 style 的操作</p><p>安装 style-loader：<code>npm install style-loader -D</code></p><p>处理 less 安装：<code>npm install less-loader -D</code></p><p>loader 执行顺序是从右至左（从下到上或从后往前）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"node:path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">"./src/main.js"</span><span class="token punctuation">,</span>    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">"bundle.js"</span><span class="token punctuation">,</span>        <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"./dist"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>                <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token punctuation">&#123;</span> <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">"style-loader"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                    <span class="token punctuation">&#123;</span> <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">"css-loader"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">]</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.less$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token punctuation">&#123;</span> <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">"style-loader"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// 最后插入 css</span>                    <span class="token punctuation">&#123;</span> <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">"css-loader"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// 然后解析 css</span>                    <span class="token punctuation">&#123;</span> <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">"less-loader"</span> <span class="token punctuation">&#125;</span> <span class="token comment">// 先将 less 解析为 css</span>                <span class="token punctuation">]</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="PostCSS"><a href="#PostCSS" class="headerlink" title="PostCSS"></a>PostCSS</h3><p>PostCSS 是一个通过 JavaScript 来转换样式的工具，可进行 CSS 的转换和适配，比如自动添加浏览器前缀、css 样式重置等</p><p>安装 postcss、postcss-cli：<code>npm install postcss postcss-cli -D</code></p><p>安装 autoprefixer 插件：<code>npm install autoprefixer -D</code></p><p>直接使用 postcss 并使用插件：<code>npx postcss --use autoprefixer -o end.css ./src/css/style.css</code></p><p>安装 postcss-loader：<code>npm install postcss-loader -D</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>    <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span> <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">"style-loader"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span> <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">"css-loader"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">"postcss-loader"</span><span class="token punctuation">,</span>                <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">postcssOptions</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                        <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>                            <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"autoprefixer"</span><span class="token punctuation">)</span>                        <span class="token punctuation">]</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用单独配置：postcss.config.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"autoprefixer"</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>postcss-preset-env 更加强大，它能将现代 CSS 特性转成大多数浏览器认识的 CSS，并内置了 autoprefixer。</p><p>安装 postcss-preset-env ：<code>npm install postcss-preset-env -D</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// postcss.config.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"postcss-preset-env"</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="打包图片"><a href="#打包图片" class="headerlink" title="打包图片"></a>打包图片</h3><p>安装 file-loader：<code>npm install file-loader -D</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>    <span class="token literal-property property">test</span><span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(jpg|png|gif)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>    <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">"file-loader"</span><span class="token punctuation">,</span>        <span class="token literal-property property">options</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">outputPath</span><span class="token operator">:</span> <span class="token string">"img"</span><span class="token punctuation">,</span> <span class="token comment">// 图片文件打包到 img 文件夹下</span>            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"[name]_[hash:6].[ext]"</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>url-loader 可以将较小的文件转为 base64 的 URI，</p><p>安装 url-loader：<code>npm install url-loader -D</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>    <span class="token literal-property property">test</span><span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(jpg|png|gif)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>    <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">"url-loader"</span><span class="token punctuation">,</span>        <span class="token literal-property property">options</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"img/[name]_[hash:6].[ext]"</span><span class="token punctuation">,</span>            <span class="token literal-property property">limit</span><span class="token operator">:</span> <span class="token number">100</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token comment">// byte</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="asset-module-type"><a href="#asset-module-type" class="headerlink" title="asset module type"></a>asset module type</h3><p>资源模板类型：webpack5 不需要下载 loader</p><ul><li>asset&#x2F;resource 对应 file-loader</li><li>asset&#x2F;inline 对应 url-loader</li><li>asset 由 webpack 决定使用哪种 loader</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>    <span class="token literal-property property">test</span><span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(jpg|png|gif)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"asset"</span><span class="token punctuation">,</span>    <span class="token literal-property property">generator</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">"img/[name]_[hash:6][ext]"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">parser</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">dataUrlCondition</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">maxSize</span><span class="token operator">:</span> <span class="token number">100</span> <span class="token operator">*</span> <span class="token number">1024</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字体文件"><a href="#字体文件" class="headerlink" title="字体文件"></a>字体文件</h3><p>……待学习</p><h2 id="组件化开发-1"><a href="#组件化开发-1" class="headerlink" title="组件化开发"></a>组件化开发</h2><h3 id="父子组件通信"><a href="#父子组件通信" class="headerlink" title="父子组件通信"></a>父子组件通信</h3><ul><li><p>父传子使用 props 属性，没有注册的在 $attrs 中</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 父组件 在子组件的标签中直接传值</span><span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>h2<span class="token operator">></span>你好<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span><span class="token operator">&lt;</span>header<span class="token operator">-</span>vue <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"active"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>header<span class="token operator">-</span>vue<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token comment">// 子组件使用 props 接收，如果没有在 props 中接受则会进到 $atrrs 中去</span><span class="token comment">// class,id,style 会默认传递给子组件的跟组件，使用 inheritAttrs:flase 禁用</span><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>h2<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> msg <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>    <span class="token operator">&lt;</span>h2<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> $attrs<span class="token punctuation">.</span>class <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>    <span class="token operator">&lt;</span>h2 <span class="token operator">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"$attrs.class"</span><span class="token operator">></span>节点<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// props: &#123;</span>  <span class="token comment">//     msg: &#123;</span>  <span class="token comment">//         type: String,</span>  <span class="token comment">//         require: false,</span>  <span class="token comment">//         default: "默认值"</span>  <span class="token comment">//     &#125;</span>  <span class="token comment">// &#125;,</span>  <span class="token literal-property property">inheritAttrs</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"msg"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>子传父使用 $emit 事件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 子组件使用 emits 定义传递事件，然后在触发事件的时候传递到父组件</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">emits</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"add"</span><span class="token punctuation">,</span> <span class="token string">"sub"</span><span class="token punctuation">,</span> <span class="token string">"addN"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">n</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">incre</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"add"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">decre</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"sub"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">increN</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"addN"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 父组件监听子组件传递过来的事件进行处理</span> <span class="token operator">&lt;</span>counter<span class="token operator">-</span>vue @add<span class="token operator">=</span><span class="token string">"addOne"</span> @sub<span class="token operator">=</span><span class="token string">"subOne"</span> @addN<span class="token operator">=</span><span class="token string">"addNOne"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>counter<span class="token operator">-</span>vue<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="Tab栏制作"><a href="#Tab栏制作" class="headerlink" title="Tab栏制作"></a>Tab栏制作</h3><p>App.vue</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;      &lt;tab-bar :titles&#x3D;&quot;title&quot; @change&#x3D;&quot;change&quot;&#x2F;&gt;      &lt;h2&gt;&#123;&#123;contents[curIndex]&#125;&#125;&lt;&#x2F;h2&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;import TabBar from &quot;.&#x2F;TabBar.vue&quot;;export default &#123;  components: &#123;    TabBar,  &#125;,  data() &#123;    return &#123;      curIndex: 0,      title: [&quot;衣服&quot;,&quot;裤子&quot;,&quot;鞋子&quot;],      contents: [&quot;衣服页面&quot;,&quot;裤子页面&quot;,&quot;鞋子页面&quot;]    &#125;;  &#125;,  methods:&#123;      change(index)&#123;          this.curIndex &#x3D; index      &#125;  &#125;&#125;;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>TabBar.vue</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div class&#x3D;&quot;tab-control&quot;&gt;    &lt;div      v-for&#x3D;&quot;(title, index) in titles&quot;      :key&#x3D;&quot;title&quot;      class&#x3D;&quot;tab-control-item&quot;      :class&#x3D;&quot;&#123; active: curIndex &#x3D;&#x3D;&#x3D; index &#125;&quot;      @click&#x3D;&quot;itemClick(index)&quot;    &gt;      &lt;span&gt;&#123;&#123; title &#125;&#125;&lt;&#x2F;span&gt;    &lt;&#x2F;div&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123;  props: &#123;    titles: &#123;      type: Array,      default() &#123;        return [];      &#125;,    &#125;  &#125;,  emits:[&quot;change&quot;],  data() &#123;    return &#123;      curIndex: 0,    &#125;;  &#125;,  methods: &#123;    itemClick(index) &#123;      this.curIndex &#x3D; index;      this.$emit(&quot;change&quot;, index)    &#125;,  &#125;,&#125;;&lt;&#x2F;script&gt;&lt;style scoped&gt;.tab-control &#123;  display: flex;  justify-content: space-between;&#125;.tab-control-item.active &#123;    color: red;&#125;.tab-control-item.active span &#123;    border-bottom: 3px solid red;&#125;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="非父子组件通信"><a href="#非父子组件通信" class="headerlink" title="非父子组件通信"></a>非父子组件通信</h3><p>Provide和Inject：</p><ul><li>父组件通过 provide 为组件树的所有子组件提供数据</li><li>子组件通过 inject 来获取组件树上父组件使用 provide 传递的数据</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 父组件</span><span class="token function">provide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">"Hello My Son"</span><span class="token punctuation">,</span>        <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">10</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 子组件</span><span class="token literal-property property">inject</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"count"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>全局事件总线 mitt：</p><ul><li>可全局发出和监听事件</li><li>发出事件：<code>emitter.emit(&quot;why&quot;, &#123;name: &quot;why&quot;, age: &quot;18&quot;&#125;)</code></li><li>监听事件：<code>emitter.on(&quot;why&quot;, (info) -&gt; console.log(info))</code></li><li>取消所有监听：<code>emitter.all.clear</code></li></ul><p>插槽 slot：</p><ul><li>子组件使用 slot 标签定义插槽，父组件中使用子组件时，在子组件中使用其他标签，会被插入到子组件的插槽中</li><li>匿名插槽：即 <code>&lt;slot&gt;&lt;/slot&gt;</code>，默认名字为 default，如果有多个匿名插槽，所有插槽都会渲染一遍父组件传来的标签</li><li>具名插槽：即 <code>&lt;slot name=&quot;why&quot;&gt;&lt;/slot&gt;</code>，父组件中使用 <code>v-slot:name</code> 可指定名字插入到子组件的哪个插槽</li><li><code>v-slot:name</code> 可缩写为 <code>#name</code></li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 子组件具名插槽 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 父组件插值 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tab-bar</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#left</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>左边来点啥<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>center</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>中间来点啥<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>right</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>右边来点啥<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tab-bar</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>动态插槽名使用：<code>v-slot:[name]</code></p><p>作用域插槽：父组件使用插槽传来的值，<code>v-slot=&quot;slotProps&quot;</code></p><p>动态组件：使用 component 组件，通过 is 实现，<code>&lt;component :is=&quot;currentTabComponent&quot;&gt;&lt;/component&gt;</code></p><p>保存组件的状态：使用 keep-alive 包裹需要缓存数据的组件即可，默认都可以缓存</p><ul><li>include：只有名称匹配的组件才会被缓存</li><li>exclude：任何名称匹配的组件都不被缓存</li><li>max：最多缓存的组件数</li><li>include 和 exclude 使用逗号分隔字符串、正则表达式和数组</li></ul><p>异步组件：定义路由时一般使用的就是异步组件，异步组件是为了 webpack 的分包</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 使用 defineAsyncComponent 异步加载组件</span><span class="token punctuation">&#123;</span>    <span class="token function">defineAsyncComponent</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>      <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./components/AsyncComponent.vue'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Suspense：加载状态将由 <code>&lt;Suspense&gt;</code> 控制，组件自身的加载、错误、延迟和超时选项都将被忽略</p><ul><li>default：需要记载的异步组件</li><li>fallback：加载错误的时候显示 fallback 插槽的内容</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>suspense</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#default</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>async-home</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>async-home</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#fallback</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>loading</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>loading</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>suspense</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>$refs：用来操作 DOM 节点，DOM 定义 ref 属性，都会加入到实例的 $refs 中</p><p>$parent：获取父组件实例</p><p>$root：获取根组件实例</p><p>$el：获取 DOM 节点</p><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><table><thead><tr><th>func</th><th>desc</th></tr></thead><tbody><tr><td>beforeCreate</td><td>组件实例创建之前</td></tr><tr><td>created</td><td>组件实例创建之后</td></tr><tr><td>beforeMount</td><td>挂载之前</td></tr><tr><td>mounted</td><td>挂载完成</td></tr><tr><td>beforeUpdate</td><td>数据变化界面刷新之前</td></tr><tr><td>updated</td><td>数据刷新之后</td></tr><tr><td>beforeUnmount</td><td>组件销毁取消挂载之前</td></tr><tr><td>unmonted</td><td>组件销毁移除之后</td></tr><tr><td>activated</td><td>组件活跃时</td></tr><tr><td>deactivated</td><td>组件缓存后</td></tr></tbody></table><h3 id="组件-v-modal"><a href="#组件-v-modal" class="headerlink" title="组件 v-modal"></a>组件 v-modal</h3><p>子组件中使用 v-modal 相当于：</p><ul><li>modalValue 属性传给了子组件</li><li>子组件使用 update:modalValue 传递给事件给父组件</li></ul><p>自定义多个 v-modal：<code>&lt;nav-bar v-modal=&quot;message&quot; v-modal:title=&quot;title&quot;&gt;&lt;/nav-bar&gt;</code></p><ul><li>props: [“modalValue”,”title”]</li><li>emits: [“update:modalValue”, “update:title”]</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"modelValue"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token literal-property property">emits</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"update:modelValue"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>modelValue            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"update:modelValue"</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="过渡与动画"><a href="#过渡与动画" class="headerlink" title="过渡与动画"></a>过渡与动画</h2><p>使用 transition 标签包裹需要使用过渡的标签或组件即可</p><ul><li>v-enter-from：定义进入过渡的开始状态。在元素被插入之前生效，在元素被插入之后的下一帧移除。</li><li>v-enter-active：定义进入过渡生效时的状态。在整个进入过渡的阶段中应用，在元素被插入之前生效，在过渡&#x2F;动画完成之后移除。这个类可以被用来定义进入过渡的过程时间，延迟和曲线函数。</li><li>v-enter-to：定义进入过渡的结束状态。在元素被插入之后下一帧生效 (与此同时 v-enter-from 被移除)，在过渡&#x2F;动画完成之后移除。</li><li>v-leave-from：定义离开过渡的开始状态。在离开过渡被触发时立刻生效，下一帧被移除。</li><li>v-leave-active：定义离开过渡生效时的状态。在整个离开过渡的阶段中应用，在离开过渡被触发时立刻生效，在过渡&#x2F;动画完成之后移除。这个类可以被用来定义离开过渡的过程时间，延迟和曲线函数。</li><li>v-leave-to：离开过渡的结束状态。在离开过渡被触发之后下一帧生效 (与此同时 v-leave-from 被移除)，在过渡&#x2F;动画完成之后移除。</li></ul><p>使用 css 动画需要使用 animation ，@keyprame</p><p>过渡模式 mode：out-in 常用</p><ul><li><code>in-out</code>: 新元素先进行进入过渡，完成之后当前元素过渡离开。</li><li><code>out-in</code>: 当前元素先进行离开过渡，完成之后新元素过渡进入。</li></ul><h3 id="animate-css"><a href="#animate-css" class="headerlink" title="animate.css"></a>animate.css</h3><p>使用自定义过渡类完成动画：</p><ul><li><code>enter-from-class</code></li><li><code>enter-active-class</code></li><li><code>enter-to-class</code></li><li><code>leave-from-class</code></li><li><code>leave-active-class</code></li><li><code>leave-to-class</code></li></ul><p>安装：<code>npm install animate.css</code></p><p>引入：<code>import &#39;animate.css&#39;</code></p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;button @click&#x3D;&quot;show &#x3D; !show&quot;&gt;转换&lt;&#x2F;button&gt;    &lt;transition      name&#x3D;&quot;custom-classes-transition&quot;      enter-active-class&#x3D;&quot;animate__animated animate__tada&quot;      leave-active-class&#x3D;&quot;animate__animated animate__bounceOutRight&quot;    &gt;      &lt;p v-if&#x3D;&quot;show&quot;&gt;hello&lt;&#x2F;p&gt;    &lt;&#x2F;transition&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123;  data() &#123;    return &#123;      show: true,    &#125;;  &#125;,&#125;;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="gsap"><a href="#gsap" class="headerlink" title="gsap"></a>gsap</h3><p>使用 js 钩子函数完成动画：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span>  <span class="token attr-name">@before-enter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>beforeEnter<span class="token punctuation">"</span></span>  <span class="token attr-name">@enter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>enter<span class="token punctuation">"</span></span>  <span class="token attr-name">@after-enter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>afterEnter<span class="token punctuation">"</span></span>  <span class="token attr-name">@enter-cancelled</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>enterCancelled<span class="token punctuation">"</span></span>  <span class="token attr-name">@before-leave</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>beforeLeave<span class="token punctuation">"</span></span>  <span class="token attr-name">@leave</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>leave<span class="token punctuation">"</span></span>  <span class="token attr-name">@after-leave</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>afterLeave<span class="token punctuation">"</span></span>  <span class="token attr-name">@leave-cancelled</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>leaveCancelled<span class="token punctuation">"</span></span>  <span class="token attr-name">:css</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- ... --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>安装：<code>npm install gsap</code></p><p>引入：<code>import gsap from &#39;gsap&#39;</code></p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;input v-model&#x3D;&quot;counter&quot; type&#x3D;&quot;num&quot; step&#x3D;&quot;100&quot; &#x2F;&gt;    &lt;h2&gt;&#123;&#123; showValue.toFixed(0) &#125;&#125;&lt;&#x2F;h2&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;import gsap from &quot;gsap&quot;;export default &#123;  data() &#123;    return &#123;      show: true,      counter: 0,      showValue: 0,    &#125;;  &#125;,  watch: &#123;    counter(newValue) &#123;      gsap.to(this, &#123; duration: 1, showValue: newValue &#125;);    &#125;,  &#125;,&#125;;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="列表过渡"><a href="#列表过渡" class="headerlink" title="列表过渡"></a>列表过渡</h3><ul><li>使用 transition-group 包裹列表渲染</li><li>元素动画使用 name 属性定义 css 动画</li><li>移动使用 name 属性的 move</li></ul><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;button @click&#x3D;&quot;add&quot;&gt;Add&lt;&#x2F;button&gt;    &lt;button @click&#x3D;&quot;remove&quot;&gt;Remove&lt;&#x2F;button&gt;    &lt;button @click&#x3D;&quot;shuffle&quot;&gt;Shuffle&lt;&#x2F;button&gt;    &lt;transition-group name&#x3D;&quot;list&quot; tag&#x3D;&quot;p&quot;&gt;      &lt;span v-for&#x3D;&quot;num in nums&quot; :key&#x3D;&quot;num&quot; class&#x3D;&quot;list-item&quot;&gt;        &#123;&#123; num &#125;&#125;      &lt;&#x2F;span&gt;    &lt;&#x2F;transition-group&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;import _ from &quot;lodash&quot;;export default &#123;  data() &#123;    return &#123;      nums: [1, 2, 3, 4, 5, 6, 7],      count: 10,    &#125;;  &#125;,  methods: &#123;    randomIndex() &#123;      return Math.floor(Math.random() * this.nums.length);    &#125;,    add() &#123;      this.nums.splice(this.randomIndex(), 0, this.count++);    &#125;,    remove() &#123;      this.nums.splice(this.randomIndex(), 1);    &#125;,    shuffle() &#123;      this.nums &#x3D; _.shuffle(this.nums);    &#125;,  &#125;,&#125;;&lt;&#x2F;script&gt;&lt;style scoped&gt;.list-item &#123;  display: inline-block;  margin: 0 5px;&#125;.list-enter-active,.list-leave-active &#123;  transition: all 1s ease;&#125;.list-move &#123;  transition: transform 0.8s ease;&#125;.list-enter-from,.list-leave-to &#123;  opacity: 0;  transform: translateY(30px);&#125;.list-leave-active &#123;  position: absolute;&#125;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Mixin"><a href="#Mixin" class="headerlink" title="Mixin"></a>Mixin</h3><p>Mixin 能分发组件中可复用的功能，使用 mixins:[mixin1] 接收，当其中的属性相同时会产生冲突：</p><ol><li>data 函数中返回的对象<ul><li>默认情况进行合并</li><li>属性冲突，保留组件自身的</li></ul></li><li>生命周期钩子函数<ul><li>会合并到数组中，都会调用</li></ul></li><li>其他都会进行合并<ul><li>key 发生冲突选择组件自身的</li></ul></li></ol><p>全局混入：<code>app.mixin()</code></p><p>extends：继承组件的对象属性</p><h2 id="Composition-API"><a href="#Composition-API" class="headerlink" title="Composition API"></a>Composition API</h2><h3 id="setup-函数"><a href="#setup-函数" class="headerlink" title="setup 函数"></a>setup 函数</h3><p>无法使用 this，原因是 setup 没有绑定组件实例，setup 执行时，data，components，methods 都还没执行</p><p>参数：</p><ul><li>props，父组件所传过来的属性</li><li>context，SetupContext 上下文对象<ul><li>attrs，非 props 的属性</li><li>slots，插槽</li><li>emit，setup 中没有 this，只能使用 emit 去取代它发送事件</li></ul></li></ul><p>返回值：返回一个对象，返回值可在 template 中使用，返回的属性不具有响应式，想要响应式需要对应函数包裹属性</p><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p>reactive()：传入对象和数组</p><p>ref()：传入基本数据类型，取值需要 .value，template 中则使用不需要 .value</p><p>readonly()：属性只读无法修改</p><p>isProxy，检查对象是否是 reactive 或 readonly 创建的 proxy</p><p>isReactive，检查对象是否是 reactive 创建的</p><p>isReadonly，检查对象是否是 readonly 创建的</p><p>shallowReactive，不执行深层的响应</p><p>shallowReadonly，不执行深层的只读</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;h2&gt;计数：&#123;&#123; counter &#125;&#125;&lt;&#x2F;h2&gt;    &lt;button @click&#x3D;&quot;increment&quot;&gt;+1&lt;&#x2F;button&gt;    &lt;h2&gt;信息：&#123;&#123; info.uname &#125;&#125;&lt;&#x2F;h2&gt;    &lt;input v-model&#x3D;&quot;info.uname&quot; type&#x3D;&quot;text&quot; &#x2F;&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;import &#123; reactive, ref &#125; from &quot;vue&quot;;export default &#123;  setup(props, context) &#123;    const counter &#x3D; ref(0);    const increment &#x3D; () &#x3D;&gt; &#123;      counter.value++;    &#125;;    const info &#x3D; reactive(&#123;      uname: &quot;ReaJason&quot;,      age: 20,    &#125;);    return &#123;      counter,      increment,      info,    &#125;;  &#125;,&#125;;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>toRefs()，传入 reactive 对象，使其解构出来的仍具有响应式</p><p>toRef(reactive, “name”)，传入 reactive 对象，指定其中 name 属性仍具有响应式并返回</p><p>unref，传入一个对象，如果是 ref 返回值，如果不是直接返回原对象</p><p>isRef，判断对象是否是 ref 对象</p><p>shallowRef，创建浅层的 ref 对象</p><p>triggerRef，手动触发 shallowRef 相关联的副作用</p><p>customRef，自定义 ref，对其自定义跟踪和更新触发，track，trigger</p><p>computed，计算属性</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> computed<span class="token punctuation">,</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> firstName <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">"Rea"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> lastName <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">"Jason"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> fullName <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>firstName<span class="token punctuation">.</span>value  <span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>  lastName<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      fullName    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>provide(name,value)，为子组件及其以下的组件提供数据</p><p>inject(name,default)，获取父组件链的数据</p><h3 id="侦听数据变化"><a href="#侦听数据变化" class="headerlink" title="侦听数据变化"></a>侦听数据变化</h3><p>watchEffect：自动收集依赖，并且会立即执行一次</p><p>停止侦听：watchEffect 返回一个函数，调用这个函数则会停止侦听</p><p>清除副作用：watchEffect 中的箭头函数接收一个参数 onInvalidate</p><p>使用 ref 获取 dom 节点，并调整 watchEffect 执行时机</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;h2 ref&#x3D;&quot;title&quot;&gt;哈哈哈&lt;&#x2F;h2&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;import &#123; ref, watchEffect &#125; from &quot;vue&quot;;export default &#123;  setup() &#123;    const title &#x3D; ref(null);    watchEffect(      () &#x3D;&gt; &#123;        console.log(title.value);      &#125;,      &#123; flush: &quot;post&quot; &#125; &#x2F;&#x2F; 默认是 pre，如果需要操作 dom 节点需要设置 post，不然第一次为 null    );    return &#123;      title,    &#125;;  &#125;,&#125;;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>watch：手动指定侦听的 属性，可获取状态前后的值，等同于 options api 的 watch</p><ul><li>watch 支持侦听，getter 函数，ref 对象，数组</li></ul><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;h2&gt;&#123;&#123; info.name &#125;&#125;&lt;&#x2F;h2&gt;    &lt;button @click&#x3D;&quot;changeData&quot;&gt;change&lt;&#x2F;button&gt;    &lt;h2&gt;&#123;&#123; count &#125;&#125;&lt;&#x2F;h2&gt;    &lt;button @click&#x3D;&quot;changeCount&quot;&gt;+1&lt;&#x2F;button&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;import &#123; reactive, ref, watch &#125; from &quot;vue&quot;;export default &#123;  setup() &#123;    const info &#x3D; reactive(&#123; name: &quot;Rea&quot;, age: &quot;20&quot; &#125;);    &#x2F;&#x2F; 侦听，传入 getter 函数    watch(      () &#x3D;&gt; info.name,      (newValue, oldValue) &#x3D;&gt; &#123;        console.log(&#96;$&#123;newValue  &#125; $&#123;  oldValue&#125;&#96;);      &#125;    );    const count &#x3D; ref(0);    &#x2F;&#x2F; 传入 ref 函数    watch(      count,      (newValue, oldValue) &#x3D;&gt; &#123;        console.log(&#96;$&#123;newValue  &#125; $&#123;  oldValue&#125;&#96;);      &#125;,      &#123; immediate: true, deep: true &#125;    );    const changeCount &#x3D; () &#x3D;&gt; count.value++;    const changeData &#x3D; () &#x3D;&gt; &#123;      info.name &#x3D; &quot;Jason&quot;;    &#125;;    return &#123;      info,      changeData,      changeCount,      count,    &#125;;  &#125;,&#125;;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="生命周期钩子"><a href="#生命周期钩子" class="headerlink" title="生命周期钩子"></a>生命周期钩子</h3><p>组件创建前和创建完成的生命周期直接在 setup 中书写即可</p><table><thead><tr><th>hook</th><th>desc</th></tr></thead><tbody><tr><td>onBeforeMount(()&#x3D;&gt; {})</td><td>挂载前</td></tr><tr><td>onMounted(()&#x3D;&gt; {})</td><td>挂载完成</td></tr><tr><td>onBeforeUpdate(()&#x3D;&gt; {})</td><td>更新前</td></tr><tr><td>onUpdated(()&#x3D;&gt; {})</td><td>更新完成</td></tr><tr><td>onBeforeUnmount(()&#x3D;&gt; {})</td><td>卸载之前</td></tr><tr><td>onUnmounted(()&#x3D;&gt; {})</td><td>卸载完成之后</td></tr><tr><td>onActivated(()&#x3D;&gt; {})</td><td>活动时</td></tr><tr><td>onDeactivated(()&#x3D;&gt; {})</td><td>缓存时</td></tr></tbody></table><h2 id="VueRouter"><a href="#VueRouter" class="headerlink" title="VueRouter"></a>VueRouter</h2><p>安装：<code>npm install vue-router@4 </code></p><p>基本使用：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createRouter<span class="token punctuation">,</span> createWebHistory <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token keyword">import</span> Home <span class="token keyword">from</span> <span class="token string">'../views/Home.vue'</span><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>        <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span>        <span class="token literal-property property">redirect</span><span class="token operator">:</span> <span class="token string">"/home"</span>  <span class="token comment">// 重定向</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>        <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/home'</span><span class="token punctuation">,</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'home'</span><span class="token punctuation">,</span>        <span class="token literal-property property">component</span><span class="token operator">:</span> Home    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>        <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/about'</span><span class="token punctuation">,</span>        <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackChunkName: "home-chunk" */</span><span class="token string">'../views/About.vue'</span><span class="token punctuation">)</span> <span class="token comment">// 组件异步加载，路由分包，前面使用 magic comment 来对分包命名</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">history</span><span class="token operator">:</span> <span class="token function">createWebHistory</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">BASE_URL</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    routes<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> router<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div id&#x3D;&quot;nav&quot;&gt;    &lt;router-link to&#x3D;&quot;&#x2F;&quot;&gt;Home&lt;&#x2F;router-link&gt; |    &lt;router-link to&#x3D;&quot;&#x2F;about&quot;&gt;About&lt;&#x2F;router-link&gt;  &lt;&#x2F;div&gt;  &lt;router-view&#x2F;&gt;&lt;&#x2F;template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>&lt;router-view /&gt;</code> 是用来为渲染组件占位的</p><p><code>&lt;router-link&gt;</code> 是用来指定路由去向</p><ul><li>to 属性：字符串（path 的字符串）或对象</li><li>repalce 属性：点击调用 replace，默认是 push</li><li>active-class 属性：设置激活后应用的 class，默认为 router-link-active</li><li>exact-active-class 属性：链接精准激活时应用的 class，默认是 router-link-exact-active</li></ul><h3 id="动态路由匹配"><a href="#动态路由匹配" class="headerlink" title="动态路由匹配"></a>动态路由匹配</h3><p>路由设置 path：<code>path: &#39;/user/:username&#39;</code></p><p>页面路由：<code>&lt;router-link *to*=&quot;/user/reajason&quot;&gt;User&lt;/router-link&gt;</code></p><p>获取值：所有组件都可以使用 this.$route.params 获取，setup 中使用 useRouter 返回的 route </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>h1<span class="token operator">></span>User<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> $route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>username <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useRoute <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue-router"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> route <span class="token operator">=</span> <span class="token function">useRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> username <span class="token operator">=</span> route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>username<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      username<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="NotFound"><a href="#NotFound" class="headerlink" title="NotFound"></a>NotFound</h3><p>配置 notfound 路由：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/:pathMatch(.*)*'</span><span class="token punctuation">,</span> <span class="token comment">// 最后一个 * ，会将错误路径变成数组，如果没有会是字符串</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'NotFound'</span><span class="token punctuation">,</span>    <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"../views/NotFound.vue"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取错误路径：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>臣妾做不到<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>&#123;&#123;$route.params.pathMatch&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h3><p>配置路由 children 属性：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/home'</span><span class="token punctuation">,</span>    <span class="token literal-property property">component</span><span class="token operator">:</span> Home<span class="token punctuation">,</span>    <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>            <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"message"</span><span class="token punctuation">,</span>            <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../views/HomeMessage.vue'</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>            <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"other"</span><span class="token punctuation">,</span>            <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../views/HomeOther.vue'</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>页面跳转：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>home<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>This is an home page<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/home/message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>消息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span> |        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/home/other<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>其他<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a>编程式导航</h3><p>使用 route 对象：</p><ul><li><code>router.push</code> 等同于 <code>window.history.pushState</code></li><li><code>router.replace</code> 等同于 <code>window.history.replaceState</code></li><li><code>router.go</code> 等同于 <code>window.history.go</code></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 字符串路径</span>router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'/users/eduardo'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/users/eduardo'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'user'</span><span class="token punctuation">,</span> <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">'eduardo'</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/register'</span><span class="token punctuation">,</span> <span class="token literal-property property">query</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">plan</span><span class="token operator">:</span> <span class="token string">'private'</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/about'</span><span class="token punctuation">,</span> <span class="token literal-property property">hash</span><span class="token operator">:</span> <span class="token string">'#team'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/home'</span><span class="token punctuation">,</span> <span class="token literal-property property">replace</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 相当于</span>router<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/home'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 向前移动一条记录，与 router.forward() 相同</span>router<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">// 返回一条记录，与router.back() 相同</span>router<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">// 前进 3 条记录</span>router<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">// 如果没有那么多记录，静默失败</span>router<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="v-slot"><a href="#v-slot" class="headerlink" title="v-slot"></a>v-slot</h3><p>router-link 中的 v-slot 有如下对象：</p><ul><li><code>href</code>：解析后的 URL。将会作为一个 <code>&lt;a&gt;</code> 元素的 <code>href</code> 属性。如果什么都没提供，则它会包含 <code>base</code>。</li><li><code>route</code>：解析后的规范化的地址。</li><li><code>navigate</code>：触发导航的函数。 <strong>会在必要时自动阻止事件</strong>，和 <code>router-link</code> 一样。例如：<code>ctrl</code> 或者 <code>cmd</code> + 点击仍然会被 <code>navigate</code> 忽略。</li><li><code>isActive</code>：如果需要应用 <a href="https://next.router.vuejs.org/zh/api/#active-class">active class</a>，则为 <code>true</code>。允许应用一个任意的 class。</li><li><code>isExactActive</code>：如果需要应用 <a href="https://next.router.vuejs.org/zh/api/#exact-active-class">exact active class</a>，则为 <code>true</code>。允许应用一个任意的 class。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>router<span class="token operator">-</span>link  to<span class="token operator">=</span><span class="token string">"/about"</span>  custom  v<span class="token operator">-</span>slot<span class="token operator">=</span><span class="token string">"&#123; href, route, navigate, isActive, isExactActive &#125;"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>NavLink <span class="token operator">:</span>active<span class="token operator">=</span><span class="token string">"isActive"</span> <span class="token operator">:</span>href<span class="token operator">=</span><span class="token string">"href"</span> @click<span class="token operator">=</span><span class="token string">"navigate"</span><span class="token operator">></span>    <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> route<span class="token punctuation">.</span>fullPath <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>NavLink<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>router-view 中 的 v-slot 有如下对象：</p><ul><li><code>Component</code>: 要传递给 <code>&lt;component&gt;</code> 的 VNodes <code>是</code> prop。</li><li><code>route</code>: 解析出的标准化<a href="https://next.router.vuejs.org/zh/api/#routelocationnormalized">路由地址</a>。</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span> <span class="token attr-name">v-slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123; Component, route &#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span> <span class="token attr-name">:name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>route.meta.transition || 'fade'<span class="token punctuation">"</span></span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>out-in<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span>                       <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Component<span class="token punctuation">"</span></span>                       <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>route.meta.usePathKey ? route.path : undefined<span class="token punctuation">"</span></span>                       <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h3><p>动态添加路由：</p><ol><li><p>添加顶级路由，addRoute</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token function">addRoute</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/about'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> About <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>添加嵌套路由</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token function">addRoute</span><span class="token punctuation">(</span><span class="token string">'admin'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'settings'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> AdminSettings <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>删除路由，</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 根据对象删除</span><span class="token keyword">const</span> removeRoute <span class="token operator">=</span> router<span class="token punctuation">.</span><span class="token function">addRoute</span><span class="token punctuation">(</span>routeRecord<span class="token punctuation">)</span><span class="token function">removeRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 删除路由如果存在的话</span><span class="token comment">// 根据路由名字删除</span>router<span class="token punctuation">.</span><span class="token function">removeRoute</span><span class="token punctuation">(</span><span class="token string">'about'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="导航守卫"><a href="#导航守卫" class="headerlink" title="导航守卫"></a>导航守卫</h3><p>在路由导航生命周期中进行回调。</p><ol><li>导航被触发。</li><li>在失活的组件里调用 <code>beforeRouteLeave</code> 守卫。</li><li>调用全局的 <code>beforeEach</code> 守卫。</li><li>在重用的组件里调用 <code>beforeRouteUpdate</code> 守卫(2.2+)。</li><li>在路由配置里调用 <code>beforeEnter</code>。</li><li>解析异步路由组件。</li><li>在被激活的组件里调用 <code>beforeRouteEnter</code>。</li><li>调用全局的 <code>beforeResolve</code> 守卫(2.5+)。</li><li>导航被确认。</li><li>调用全局的 <code>afterEach</code> 钩子。</li><li>触发 DOM 更新。</li><li>调用 <code>beforeRouteEnter</code> 守卫中传给 <code>next</code> 的回调函数，创建好的组件实例会作为回调函数的参数传入。</li></ol><p>beforeEach：前置路由</p><ul><li>to：即将进入的目标</li><li>from：当前导航正要离开的路由</li><li>返回值 false，取消当前路由</li><li>返回值 路由地址，与 route.push 传入的参数一样</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> <span class="token keyword">from</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ...</span>  <span class="token comment">// 返回 false 以取消导航</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h2><p>安装：<code>npm install vuex@next --save</code></p><p>简单使用，store 中存储数据，mutations 中提供修改数据的方法，全局组件都能访问 this.$store，commit 执行方法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createStore <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">counter</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token function">increment</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            state<span class="token punctuation">.</span>counter<span class="token operator">++</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            state<span class="token punctuation">.</span>counter<span class="token operator">--</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;h2&gt;这是一个数字：&#123;&#123; $store.state.counter &#125;&#125;&lt;&#x2F;h2&gt;  &lt;button @click&#x3D;&quot;increment&quot;&gt;+1&lt;&#x2F;button&gt;  &lt;button @click&#x3D;&quot;decrement&quot;&gt;-1&lt;&#x2F;button&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123;  methods: &#123;    increment() &#123;      this.$store.commit(&quot;increment&quot;);    &#125;,    decrement() &#123;      this.$store.commit(&quot;decrement&quot;);    &#125;,  &#125;,&#125;;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="mapState"><a href="#mapState" class="headerlink" title="mapState"></a>mapState</h3><p>computed 展开 state 中的所有属性：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 传入数组，取出 state 中的值</span><span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"counter"</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 传入对象，可自定义名字</span><span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token function-variable function">sCounter</span><span class="token operator">:</span> <span class="token parameter">state</span> <span class="token operator">=></span> state<span class="token punctuation">.</span>counter<span class="token punctuation">,</span>    <span class="token function-variable function">sName</span><span class="token operator">:</span> <span class="token parameter">state</span> <span class="token operator">=></span> state<span class="token punctuation">.</span>name<span class="token punctuation">,</span>    <span class="token function-variable function">sAge</span><span class="token operator">:</span> <span class="token parameter">state</span> <span class="token operator">=></span> state<span class="token punctuation">.</span>age<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>setup 中使用 mapState：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// computed 函数包裹</span><span class="token keyword">const</span> sCounter <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span> store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>counter<span class="token punctuation">)</span><span class="token comment">// 遍历解构</span><span class="token keyword">const</span> storeStateFn <span class="token operator">=</span> <span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"counter"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> storeState <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>storeStateFn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">fnKey</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> fn <span class="token operator">=</span> storeStateFn<span class="token punctuation">[</span>fnKey<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">$store</span><span class="token operator">:</span> store<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    storeState<span class="token punctuation">[</span>fnKey<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    <span class="token operator">...</span>storeState<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="getters"><a href="#getters" class="headerlink" title="getters"></a>getters</h3><p>相当于 state 的计算属性，但是没有缓存</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">goods</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span><span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">price</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">"java"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span><span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">price</span><span class="token operator">:</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">"js"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span><span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">price</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">"html"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">getters</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token function-variable function">expensiveBook</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span>getters</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> state<span class="token punctuation">.</span>goods<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> item<span class="token punctuation">.</span>price <span class="token operator">></span> <span class="token number">30</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token function-variable function">getGreaterN</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span>getters</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token operator">=></span> state<span class="token punctuation">.</span>goods<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> item<span class="token punctuation">.</span>price <span class="token operator">></span> n<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token comment">// 通过 $store.getters 获取属性值</span><span class="token operator">&lt;</span>h2<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>expensiveBook<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span><span class="token operator">&lt;</span>h2<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span><span class="token function">getGreaterN</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>mapGetters:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">[</span>        <span class="token string">"expensiveBook"</span><span class="token punctuation">,</span>        <span class="token string">"getGreaterN"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="mutations"><a href="#mutations" class="headerlink" title="mutations"></a>mutations</h3><p>更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。mutation 只能使用同步函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 函数传参，传一个值</span><span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">increment</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> payload</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        state<span class="token punctuation">.</span>counter <span class="token operator">+=</span> payload    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            state<span class="token punctuation">.</span>counter<span class="token operator">--</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">"increment"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">"decrement"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token comment">// 函数传参，传入对象</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">"increment"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"ReaJason"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 另一种提交风格</span><span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">increment</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> payload</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        state<span class="token punctuation">.</span>counter <span class="token operator">+=</span> payload<span class="token punctuation">.</span>value    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"increment"</span><span class="token punctuation">,</span>            <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">10</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 使用常量函数名</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 我们可以使用 ES2015 风格的计算属性命名功能来使用一个常量作为函数名</span>    <span class="token punctuation">[</span><span class="token constant">SOME_MUTATION</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 修改 state</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>mapMutations：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ...</span>  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">[</span>      <span class="token string">'increment'</span><span class="token punctuation">,</span> <span class="token comment">// 将 `this.increment()` 映射为 `this.$store.commit('increment')`</span>      <span class="token comment">// `mapMutations` 也支持载荷：</span>      <span class="token string">'incrementBy'</span> <span class="token comment">// 将 `this.incrementBy(amount)` 映射为 `this.$store.commit('incrementBy', amount)`</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">add</span><span class="token operator">:</span> <span class="token string">'increment'</span> <span class="token comment">// 将 `this.add()` 映射为 `this.$store.commit('increment')`</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="actions"><a href="#actions" class="headerlink" title="actions"></a>actions</h3><p>Action 类似于 mutation，不同在于：</p><ul><li>Action 提交的是 mutation，而不是直接变更状态。</li><li>Action 可以包含任意异步操作。</li></ul><p>actions 中函数的 context 包含的参数：</p><ul><li>commit，调用 mutation</li><li>dispatch，调用 action</li><li>getters，获取 getters 中属性</li><li>state，获取 state 中属性</li><li>rootGetters，获取父模块的 getters</li><li>rootState，获取父模块的 state</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token function">increment</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            state<span class="token punctuation">.</span>count<span class="token operator">++</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token function">increment</span> <span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'increment'</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token function">incrementAsync</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> commit <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'increment'</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 使用 dispatch 获取 action 属性</span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'increment'</span><span class="token punctuation">)</span><span class="token comment">// 以载荷形式分发</span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'incrementAsync'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">amount</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 以对象形式分发</span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'incrementAsync'</span><span class="token punctuation">,</span>  <span class="token literal-property property">amount</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>mapActions，actions 中可以返回 Promise 对象</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> mapActions <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ...</span>  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">[</span>      <span class="token string">'increment'</span><span class="token punctuation">,</span> <span class="token comment">// 将 `this.increment()` 映射为 `this.$store.dispatch('increment')`</span>      <span class="token comment">// `mapActions` 也支持载荷：</span>      <span class="token string">'incrementBy'</span> <span class="token comment">// 将 `this.incrementBy(amount)` 映射为 `this.$store.dispatch('incrementBy', amount)`</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">add</span><span class="token operator">:</span> <span class="token string">'increment'</span> <span class="token comment">// 将 `this.add()` 映射为 `this.$store.dispatch('increment')`</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="module"><a href="#module" class="headerlink" title="module"></a>module</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> moduleA <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">state</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">getters</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> moduleB <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">state</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">a</span><span class="token operator">:</span> moduleA<span class="token punctuation">,</span>    <span class="token literal-property property">b</span><span class="token operator">:</span> moduleB  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 获取的是 a 的 state 中的属性</span>store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>a <span class="token comment">// -> moduleA 的状态</span>store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>b <span class="token comment">// -> moduleB 的状态</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>命名空间：模块默认是全局注册的，因此都会合并到主模块上</p><p>使用 namespace:true 隔离开</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 获取子模块的 getters,需要加上模块名称</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">getters</span><span class="token punctuation">(</span><span class="token string">"/home/getName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用子模块的 mutation</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">"/home/changeName"</span><span class="token punctuation">)</span><span class="token comment">// 调用子模块的 actions</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">"/home/changeName"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>子模块调用父模块的 mutation 和 action</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'someMutation'</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'someMutation'</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>createNamespacedHelpers 辅助函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createNamespacedHelpers <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> mapState<span class="token punctuation">,</span> mapActions <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">createNamespacedHelpers</span><span class="token punctuation">(</span><span class="token string">'some/nested/module'</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 在 `some/nested/module` 中查找</span>    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token function-variable function">a</span><span class="token operator">:</span> <span class="token parameter">state</span> <span class="token operator">=></span> state<span class="token punctuation">.</span>a<span class="token punctuation">,</span>      <span class="token function-variable function">b</span><span class="token operator">:</span> <span class="token parameter">state</span> <span class="token operator">=></span> state<span class="token punctuation">.</span>b    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 在 `some/nested/module` 中查找</span>    <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">[</span>      <span class="token string">'foo'</span><span class="token punctuation">,</span>      <span class="token string">'bar'</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="后台管理项目"><a href="#后台管理项目" class="headerlink" title="后台管理项目"></a>后台管理项目</h2>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
          <category> Frontend </category>
          
          <category> Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Learning</title>
      <link href="/2024/11/29/javaspring/"/>
      <url>/2024/11/29/javaspring/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2><h3 id="依赖注入DI"><a href="#依赖注入DI" class="headerlink" title="依赖注入DI"></a>依赖注入DI</h3><blockquote><p>IOC：控制反转，DI：依赖注入</p></blockquote><p>IOC 容器的底层就是对象工厂（工厂模式）：BeanFactory -&gt; AppicationContext</p><p>三种注入方式：</p><ol><li>XML 显式配置</li><li>Java 显式配置</li><li>bean 发现机制和自动装配</li></ol><p><strong>读取 Spring 配置的方式：</strong></p><ul><li>AnnotationConfigApplicationContext：传入 Java 配置类（@Configuration），创建 Spring 容器</li><li>ClassPathXmlApplicationContext：传入 xml 配置文件路径，创建 Spring 容器</li></ul><p>xxxxxxxxxx &#x2F;&#x2F; 读取配置文件Properties prop &#x3D; new Properties();prop.load(new FileInputStream(“src\druid.properties”));​&#x2F;&#x2F; 注册连接池DataSource ds &#x3D; DruidDataSourceFactory.createDataSource(prop);​&#x2F;&#x2F; 获取连接对象Connection cn &#x3D; ds.getConnection();​&#x2F;&#x2F; TODO 数据库操作​&#x2F;&#x2F; 归还连接到连接池中cn.close();java</p><p>声明当前类是一个 bean 的注解：</p><ul><li>默认 bean 的 id 为类名首字母小写进行装配，指定在注解中传入即可</li><li><code>@Component</code>：仅仅表示一个 bean</li><li><code>@Service</code>：业务层中使用</li><li><code>@Controller</code>：控制层使用</li><li><code>@Repository</code>：持久层使用</li><li><code>@Bean</code>：使用在方法上 默认 bean 名字为方法名，返回值注册为 bean</li></ul><p>为了将上述四个注解标记的类装载到 IOC 容器中需要开启组件扫描：</p><ul><li><code>@Configuration</code>：标注当前类为配置类，扫描多个包，<code>@ComponentScan(basePackage=&#123;&quot;service&quot;,&quot;dao&quot;&#125;)</code></li><li><code>@ComponentScan</code>，默认已当前类所在位置为 base-package 扫描</li><li><code>&lt;context:component-scan base-package=&quot;top.reajason&quot;&gt;</code><ul><li><code>&lt;context:include-filter type=&quot;annotation&quot; expression=&quot;org.springframework.stereotype.Controller&quot;&gt;</code> 只扫描 Controller 注解的类</li><li><code>&lt;context:exclude-filter type=&quot;annotation&quot; expression=&quot;org.springframework.stereotype.Controller&quot;&gt;</code> 排除扫描 Controller 注解的类</li></ul></li></ul><p><strong>@ComponentScan：自定义包扫描</strong></p><ul><li>String[] basePackages()：配置基础扫描路径</li><li>Filter[] includeFilters()：只包含 Filter 过滤的</li><li>Filter[] excludeFilters() default：排除 Filter 过滤的<ul><li>@Filter：过滤器<ul><li>FilterType type()：指定过滤类型，默认为注解类，自定义过滤器实现 FilterType 即可</li><li>Class&lt;?&gt;[] classes()：指定过滤的类</li></ul></li></ul></li><li>useDefaultFilters()：默认为 true，扫描 @Component 注解类</li></ul><p>在类中需要使用到容器中的对象时，使用自动装配：</p><ul><li><code>@Autowired</code>：根据属性类型装配，能用在构造器上、属性 Setter 方法上、成员变量定义上。</li><li>如果在找不到 bean 会抛出异常，可以使用 @Autowired(required&#x3D;false) 来允许找不到</li><li><code>@Qualifier</code>：根据属性名称注入</li><li><code>@Resource</code>：根据类型注入也可根据名称注入，不支持 @Primary 和 required &#x3D; false</li><li><code>@Value</code>：注入普通类型</li><li>条件化装配 bean：<code>@Conditional</code></li><li>处理自动装配的歧义：使用 primary 或 qualifier<ul><li><code>@Primary</code>：标注当前 bean 为首选，同类型只能标注一个</li><li><code>@Qualifier(&quot;id&quot;)</code>：指定注入 bean 的 id 消除歧义</li></ul></li></ul><p>使用 Java 代码装配 bean</p><p>@Bean 注解会告诉 Spring 这个方法返回的对象注册成为到上下文的 bean，指定名字使用 name 属性</p><p>bean 默认是单例模式，因此只会调用一次实例化放入到上下文中，之后的所有 new 都会被拦截使用当前方法</p><p>通过 XML 装配 bean，创建对象时默认调用无参构造，使用构造器注入会调用有参构造</p><p>简单定义 bean：<code>&lt;bean id=&quot;util&quot; class=&quot;top.reajason.utils.Util&quot; /&gt;</code></p><p>构造器注入：<code>&lt;constructor-arg ref=&quot;util&quot;&gt;</code>，ref 引用其他 bean，value 传入字符串值，需要注意顺序，可通过 name type 区分</p><p>set 注入：<code>&lt;property name=&quot;url&quot; value=&quot;jdbc:mysql//localhost/test&quot;&gt;</code></p><ul><li>注入数组，array-&gt;value&#x2F;ref</li><li>注入列表，list-&gt;value&#x2F;ref</li><li>注入哈希表，map-&gt;entry</li><li>注入集合，set-&gt;value&#x2F;ref</li></ul><p>赋值空值（null）:<code>&lt;property name=&quot;nullValue&quot;&gt;&lt;null /&gt;&lt;/property&gt;</code></p><p>引入外部属性文件：<code>&lt;context:property-placeholder location=&quot;classpath:jdbc.properties&quot;&gt;</code></p><p>profile 配置，当根据环境不同进行 bean 的装配</p><p><strong>@Profile(“dev”)：可使用在类上，以及任何装配 bean 的地方</strong></p><p>激活 profile 的方法：</p><ul><li>作为 DispatcherServlet 初始化参数</li><li>作为 Web 应用上下文参数</li><li>作为 JNDI 条目</li><li>作为环境变量</li><li>集成测试类，@ActiveProfiles 注解</li></ul><p><strong>@Import：给容器导入组件</strong></p><ul><li>Class&lt;?&gt;[] value()，批量注册组件，默认 id 为全类名</li><li>ImportSelector，实现接口，返回全类名数组，配合 @Import 注册 bean</li><li>ImportBeanDefinitionRegister，实现接口，注册 bean</li></ul><p><strong>FactoryBean：注册 bean，搭配 @Bean 或 @Import 注入容器</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class RJFactoryBean implements FactoryBean&lt;Fish&gt; &#123;    @Override    public Fish getObject() throws Exception &#123;        return new Fish(&quot;Fish&quot;);    &#125;    @Override    public Class&lt;?&gt; getObjectType() &#123;        return Fish.class;    &#125;    @Override    public boolean isSingleton() &#123;        return true;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>@Conditional：条件注册 bean</strong></p><ul><li>Class&lt;? extends Condition&gt;[] value()，实现 Condition 接口自定义条件</li></ul><p><strong>@Lazy：懒加载</strong></p><ul><li>在获取使用 bean 的时候才创建 bean 实例，而不在容器初始化时创建</li></ul><p><strong>@Scope：作用域</strong></p><ul><li>singleton（单例）：整个应用，只创建 bean 的一个实例</li><li>prototype（原型）：每次注入获取都会创建一个新的 bean 实例</li><li>session（会话）：在 Web 应用中，为每个会话创建一个 bean 实例</li><li>request（请求）：在 Web 应用中，为每个请求创建一个 bean 实例</li><li>application（应用）：在 Web 应用中，为 ServletContext 生命周期创建一个 bean 实例</li><li>websocket：在 Web 应用中，为 WebSocket 生命周期创建一个 bean 实例</li></ul><p>使用 @Scope 或 scope&#x3D;””</p><h3 id="bean-生命周期"><a href="#bean-生命周期" class="headerlink" title="bean 生命周期"></a>bean 生命周期</h3><ol><li>Spirng 对 bean 进行实例化</li><li>Spring 将值和 bean 的引用注入到 bean 对应的属性中</li><li>if 实现 BeanNameAware，Spring 将 ID 传递给 setBeanName</li><li>if 实现 BeanFactoryAware，Spring 将 BeanFactory 传递给 setBeanFactory</li><li>if 实现 ApplicationContextAware，Spring 将 bean 所在上下文传递给 setAppilicationContext</li><li>if 实现 BeanPostProcessor，Spring 将调用 postProcessBeforeInitialization 方法</li><li>if 实现 InitializingBean，Spring 将调用 afterPropertiesSet() 类似 init-method</li><li>if 实现 BeanPostProcessor，Spring 将调用 postProcessAfterInitialization</li><li>此时 bean 准备就绪一直在应用上下文直至上下文销毁</li><li>if 实现 DisposableBean，Spring 将调用 destroy() 类似 destroy-method</li></ol><p>对于单实例 bean，容器会负责在 bean 创建后调用 init 方法，在容器销毁后调用 destroy 方法</p><p>对于原型 bean，容器只会调用 init 方法，不会管理 bean，容器销毁也不会调用 destroy 方法</p><p><strong>在生命周期中对 bean 做点事情</strong></p><ol><li><p>基于 @Bean 指定的方式，添加 initMethod 和 destroyMethod方法，xml 为 init-method、destroy-method</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 指定 bean 创建后调用的 init 方法和容器销毁之后的 destroy 方法@Bean(initMethod &#x3D; &quot;init&quot;, destroyMethod &#x3D; &quot;destroy&quot;)public Person getPerson() &#123;    return new Person(&quot;ReaJason&quot;, 19);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>基于实现接口的方式，相当于 init 和 destroy 方法,InitializingBean,DisposableBean</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Componentpublic class Bike implements InitializingBean, DisposableBean &#123;    private String name;    public Bike() &#123;        System.out.println(&quot;Bike constructor......&quot;);    &#125;    &#x2F;&#x2F; 当 bean 属性赋值完成和 init 调用完成时，调用当前方法    @Override    public void afterPropertiesSet() throws Exception &#123;        System.out.println(&quot;Bike afterPropertiesSet......&quot;);    &#125;    &#x2F;&#x2F; 当容器销毁时，调用当前方法    @Override    public void destroy() throws Exception &#123;        System.out.println(&quot;Bike destroy......&quot;);    &#125;    &#x2F;&#x2F; getter&#x2F;setter&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>基于注解的方式指定, @PostConstruct, @PreDestroy</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Person &#123;    private String name;    private Integer age;    public Person(String name, Integer age) &#123;        System.out.println(&quot;Person 构造方法执行了&quot;);        this.name &#x3D; name;        this.age &#x3D; age;    &#125;    public Person() &#123;        System.out.println(&quot;Person 构造方法执行了&quot;);    &#125;    @PostConstruct    public void init()&#123;        System.out.println(&quot;Person 属性赋值完后 init 之前调用当前方法&quot;);    &#125;    @PreDestroy    public void destroy()&#123;        System.out.println(&quot;Person 容器销毁后调用当前方法&quot;);    &#125;        &#x2F;&#x2F; getter&#x2F;setter&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>BeanPostProcessors，控制 bean 生命周期，调用 initMethod 前后调用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; AbstractAutowireCapableBeanFactory#initializeBean 源码Object wrappedBean &#x3D; bean;if (mbd &#x3D;&#x3D; null || !mbd.isSynthetic()) &#123;    &#x2F;&#x2F; bean 后置处理器，初始化前调用    wrappedBean &#x3D; this.applyBeanPostProcessorsBeforeInitialization(bean, beanName);&#125;try &#123;    this.invokeInitMethods(beanName, wrappedBean, mbd); &#x2F;&#x2F; init 方法&#125; catch (Throwable var6) &#123;    throw new BeanCreationException(mbd !&#x3D; null ? mbd.getResourceDescription() : null, beanName, &quot;Invocation of init method failed&quot;, var6);&#125;if (mbd &#x3D;&#x3D; null || !mbd.isSynthetic()) &#123;    &#x2F;&#x2F; bean 后置处理器，初始化后调用    wrappedBean &#x3D; this.applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自定义实现 BeanPostProcessor，并实现其中的两个方法，能够在所有 bean 实例创建前后调用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Componentpublic class CustomPostProcessor implements BeanPostProcessor &#123;    @Override    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException &#123;        System.out.println(&quot;postProcessBeforeInitialization&#x3D;&#x3D;&#x3D;&quot; + beanName);        return bean;    &#125;    @Override    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException &#123;        System.out.println(&quot;postProcessAfterInitialization&#x3D;&#x3D;&#x3D;&quot; + beanName);        return bean;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ApplicationContextAwareProcessor：如果 bean 实现了 aware 接口进入到当前后置处理器会进行方法的调用</p><p>BeanValidationPostProcessor：对 bean 进行验证</p><p>InitDestroyAnnotationBeanPostProcessor：对 @PreDestroy 进行 bean 的设置</p><p>总结：Spring 底层通过对 BeanPostProcessor 的使用，包括 bean 赋值，注入其他组件，生命周期注解功能等</p><p>BeanFactoryPostProcessor：beanFactory 后置处理器，能够获取 bean 的定义对其进行扩展和修改，此时 bean 还没有实例化。</p><h3 id="Aware-获取资源"><a href="#Aware-获取资源" class="headerlink" title="Aware 获取资源"></a>Aware 获取资源</h3><p>组件实现 Aware 接口能从 Spring 中获取对应的资源</p><ul><li>ApplicationContextAware，获取 IOC 容器</li><li>BeanNameAware，获取 Bean 的名字</li><li>EmbeddedValueResolverAware，表达式解析</li><li>BeanFactoryAware，获取 BeanFactory</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Componentpublic class Moon implements ApplicationContextAware, BeanNameAware, EmbeddedValueResolverAware &#123;    private ApplicationContext applicationContext;    private String name;    @Override    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException &#123;        System.out.println(&quot;IOC容器&quot;+ applicationContext);        this.applicationContext &#x3D; applicationContext;    &#125;    @Override    public void setBeanName(String name) &#123;        System.out.println(&quot;BeanName:&quot; + name);    &#125;    @Override    public void setEmbeddedValueResolver(StringValueResolver resolver) &#123;        String s &#x3D; resolver.resolveStringValue(&quot;$&#123;os.name&#125; + #&#123;2 * 100&#125;&quot;);        System.out.println(s);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：Spring 底层组件可以注入到自定义的 bean 中，通过实现对应的 Aware 接口，相应的 Aware 都有对应的后置处理器在 bean 初始化的前后进行 bean 的功能增强。</p><h4 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h4><ol><li>实现 ApplicationListener 接口，注入容器，监听事件为 AplicationEvent 及其子接口</li><li>使用 @EventListener(classes &#x3D; {}) 定义监听方法，监听 classes 为 AplicationEvent 及其子接口</li></ol><p><strong>自定义事件</strong></p><ol><li>实现 ApplicationEvent 接口</li><li>通过上下文 context.publishEvent() 进行发布</li></ol><h3 id="面向切面AOP"><a href="#面向切面AOP" class="headerlink" title="面向切面AOP"></a>面向切面AOP</h3><p>AOP底层原理为动态代理：</p><ol><li>JDK 动态代理：当被代理类有接口时，使用当前方式<ul><li>Proxy.newProxyInstance(ClassLoader, interface, InvocationHandler)</li><li>InvocationHandler -&gt; invoke(proxy,method,args) -&gt; method.invoke(obj,args)</li></ul></li><li>CGLIB 动态代理：当被代理类没有接口时，使用当前方式</li></ol><p>AOP 相关概念：</p><ul><li>通知（Advice）：切面的工作被称为通知<ul><li>前置通知（Before）：目标方法前调用</li><li>后置通知（After）：目标方法之后调用</li><li>返回通知（Afterreturning）：目标方法成功返回之后调用</li><li>异常通知（Afterthrowing）：目标方法抛出异常之后调用</li><li>环绕通知（Around）：可在目标方法前后添加行为</li></ul></li><li>连接点（Join Point）：应用程序中能够插入切面的点</li><li>切点（Pointcut）：切点缩小切面所通知连接点的范围</li><li>切面（Aspect）：通知和切点的结合，</li><li>引入（Introduction）：向现有的类添加新方法或属性</li><li>织入（Weaving）：将切面应用到目标对象并创建新的代理对象的过程<ul><li>编译期：切面在目标类编译时织入。AspectJ</li><li>类加载期：切面在目标类加载到 JVM 中织入。AspectJ5 加载时织入</li><li>运行期：切面在应用运行的某个时刻织入。Spring AOP</li></ul></li></ul><p>引入依赖：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-aspects<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.3.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义切面：</p><ul><li><code>@Aspect</code> 定义当前类为切面</li><li><code>@Before</code>，前置通知</li><li><code>@After</code>，最终通知，抛异常也会执行</li><li><code>@AfterReturning</code>，后置通知，正常返回值才会执行</li><li><code>@AfterThrowing</code>，抛出异常后执行</li><li><code>@Around</code>，环绕通知，方法前后增强</li><li><code>@Pointcut</code>，定义公共切入点，方法名为切入点名称</li><li><code>@Order(n)</code>，n 越小优先级越高</li></ul><p>也可以使用实现接口方式</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Aspect@Componentpublic class SomeServiceAop &#123;    @Pointcut(&quot;execution(* *..*(..))&quot;)    public void pc()&#123;&#125;    @Before(&quot;pc()&quot;)    public void beforeA()&#123;        System.out.println(&quot;前&quot;);    &#125;    @Around(&quot;pc()&quot;)    public void aroundA(ProceedingJoinPoint pjp)&#123;        try &#123;            System.out.println(&quot;环绕前&quot;);            pjp.proceed();            System.out.println(&quot;环绕后&quot;);        &#125; catch (Throwable e) &#123;            e.printStackTrace();            System.out.println(&quot;出意外&quot;);        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>@EnableAspectJAutoProxy</code>，启动自动代理</li><li><code>&lt;aop:aspectj-autoproxy /&gt;</code>，xml 方式</li></ul><p>使用 xml 定义切面：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aop-config</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pc<span class="token punctuation">"</span></span>                  <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>excution(* *..*(..))<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspect</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>someServiceAop<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>before</span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pc<span class="token punctuation">"</span></span>                    <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>beforeA<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspect</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aop-config</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JdbcTemplate"><a href="#JdbcTemplate" class="headerlink" title="JdbcTemplate"></a>JdbcTemplate</h3><p>基本使用：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public int add(User user) &#123;    String sql &#x3D; &quot;insert into user(creation_date,first_name,last_name,last_update,national_code,type) values(?,?,?,?,?,?)&quot;;    Object[] args &#x3D; &#123;user.getCreation_date(), user.getFirst_name(), user.getLast_name(), user.getLast_update(), user.getNational_code(), user.getType()&#125;;    return jdbcTemplate.update(sql, args);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询返回单个值：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public Integer findCount() &#123;    String sql &#x3D; &quot;select count(*) from user&quot;;    return jdbcTemplate.queryForObject(sql, Integer.class);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>查询返回对象：可自己实现 RowMapper 接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public User findById(int id) &#123;    String sql &#x3D; &quot;select * from user where id &#x3D; ?&quot;;    return jdbcTemplate.queryForObject(sql, new BeanPropertyRowMapper&lt;User&gt;(User.class), id);&#125;&#x2F;&#x2F; 自己实现 RowMapper 接口的实例public User findById(int id) &#123;    String sql &#x3D; &quot;select * from user where id &#x3D; ?&quot;;    return jdbcTemplate.queryForObject(sql, new RowMapper&lt;User&gt;() &#123;        @Override        public User mapRow(ResultSet rs, int rowNum) throws SQLException &#123;            User user &#x3D; new User();            user.setId(rs.getInt(&quot;id&quot;));            user.setCreation_date(rs.getTimestamp(&quot;creation_date&quot;));            user.setLast_update(rs.getTimestamp(&quot;last_update&quot;));            user.setType(rs.getString(&quot;type&quot;));            user.setNational_code(rs.getString(&quot;national_code&quot;));            user.setFirst_name(rs.getString(&quot;first_name&quot;));            user.setLast_name(rs.getString(&quot;last_name&quot;));            return user;        &#125;    &#125;, id);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询返回列表：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public List&lt;User&gt; findList() &#123;    String sql &#x3D; &quot;select * from user&quot;;    return jdbcTemplate.query(sql, new BeanPropertyRowMapper&lt;User&gt;(User.class));&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>配置事务管理器：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>annotation-driven</span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用事务，在 service 类中，添加 <code>@Transactional</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@AliasFor(&quot;transactionManager&quot;)String value() default &quot;&quot;;@AliasFor(&quot;value&quot;)String transactionManager() default &quot;&quot;;String[] label() default &#123;&#125;;&#x2F;&#x2F; 事务传播行为，默认为 REQUIRED&#x2F;&#x2F; REQUIRED(0),&#x2F;&#x2F; SUPPORTS(1),&#x2F;&#x2F; MANDATORY(2),&#x2F;&#x2F; REQUIRES_NEW(3), 无论如何都会创建新的事务执行&#x2F;&#x2F; NOT_SUPPORTED(4),&#x2F;&#x2F; NEVER(5),&#x2F;&#x2F; NESTED(6);Propagation propagation() default Propagation.REQUIRED;&#x2F;&#x2F; 事务隔离级别&#x2F;&#x2F; DEFAULT(-1),&#x2F;&#x2F; READ_UNCOMMITTED(1),&#x2F;&#x2F; READ_COMMITTED(2),&#x2F;&#x2F; REPEATABLE_READ(4), MySQL 默认&#x2F;&#x2F; SERIALIZABLE(8);Isolation isolation() default Isolation.DEFAULT;&#x2F;&#x2F; 超时回滚，秒int timeout() default -1;&#x2F;&#x2F; 是否只读boolean readOnly() default false;&#x2F;&#x2F; 回滚的异常Class&lt;? extends Throwable&gt;[] rollbackFor() default &#123;&#125;;&#x2F;&#x2F; 不回滚的异常Class&lt;? extends Throwable&gt;[] noRollbackFor() default &#123;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>纯注解开发事务：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Configuration@ComponentScan(basePackages &#x3D; &quot;top.reajason&quot;)@EnableTransactionManagement@PropertySource(value &#x3D; &quot;classpath:jdbc.properties&quot;)public class TxConfig &#123;    @Value(&quot;$&#123;jdbc.driver&#125;&quot;)    private String driverClassName;    @Value(&quot;$&#123;jdbc.url&#125;&quot;)    private String url;    @Value(&quot;$&#123;jdbc.username&#125;&quot;)    private String username;    @Value(&quot;$&#123;jdbc.password&#125;&quot;)    private String password;    @Bean    public DataSource getDruidDataSource()&#123;        DruidDataSource dataSource &#x3D; new DruidDataSource();        dataSource.setDriverClassName(driverClassName);        dataSource.setUrl(url);        dataSource.setUsername(username);        dataSource.setPassword(password);        return  dataSource;    &#125;    @Bean    public DataSourceTransactionManager getDataSourceTransactionManager(DataSource dataSource)&#123;        DataSourceTransactionManager tx &#x3D; new DataSourceTransactionManager();        tx.setDataSource(dataSource);        return tx;    &#125;    @Bean    public JdbcTemplate getJdbcTemplate(DataSource dataSource)&#123;        JdbcTemplate jdbcTemplate &#x3D; new JdbcTemplate();        jdbcTemplate.setDataSource(dataSource);        return jdbcTemplate;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><ol><li><p>添加依赖 spring-webmvc</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.3.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>注册 DispatcherServlet，&#x2F; 拦截所有请求</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--注册 DispatcherServlet,拦截所有请求--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--创建 DispatcherServlet 对象时 init 方法中会创建 SpringMVC 容器对象,因此需要指定配置文件--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath*:spring-mvc.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用 @Controller 注解创建控制器类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Controllerpublic class HelloController &#123;    @RequestMapping(&quot;&#x2F;home&quot;)    public ModelAndView hello(ModelAndView modelAndView)&#123;        &#x2F;&#x2F; 使用 addObject 等同于 request.setAttribute()        modelAndView.addObject(&quot;msg&quot;, &quot;你好&quot;);        modelAndView.addObject(&quot;fun&quot;,&quot;hello world&quot;);        &#x2F;&#x2F; 使用 setViewName 指定前往的视图页面        modelAndView.setViewName(&quot;home.jsp&quot;);        return modelAndView;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建 spingmvc 配置</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--配置包扫描路径,扫描所有 Controller 注解类--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top.reajason.controller<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h3><ol><li><p>tomcat 启动时，通过读取 web.xml 的标签 <code>&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</code>，因此容器启动时就创建 DispatherServlet 对象，并调用 init 方法，传入的参数名固定为 <code>contextConfigLocation</code>，值为 springmvc 配置文件路径。</p></li><li><p>读取完配置文件后，创建 springmvc 容器对象，标记为 @Controller 都会放入 spingmvc 容器中，最后将 springmvc 容器对象放入全局上下文中，供整个应用使用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">this.getServletContext().setAttribute(attrName, wac);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>请求过程中，调用 doDispatch 方法。</p></li><li><p>用户发送请求之后，DispatcherServlet 会将请求转交给处理器映射器（HandlerMapping）</p><ul><li><code>mappedHandler = this.getHandler(processedRequest);</code></li><li>解析 RequestMapping 是使用的 RequestMappingHandlerMapping</li><li>处理器映射器会在 SpringMVC 容器中找到能够处理当前请求的处理器对象</li><li>将处理器对象以及所有拦截器封装成处理器执行链返还给 DispatcherServlet</li></ul></li><li><p>DispatcherServlet 将处理器执行链对象交给处理器适配器（HandlerAdapter）</p><ul><li><pre class="line-numbers language-language-java"><code class="language-language-java"> HandlerAdapter ha = this.getHandlerAdapter(mappedHandler.getHandler()); ...; mv = ha.handle(processedRequest, response, mappedHandler.getHandler()); <pre class="line-numbers language-none"><code class="language-none">   - 处理 RequestMapping 使用的是 RequestMappingHandlerAdapter   - 处理器适配器执行处理器方法，返回 ModalAndView 给 DispatcherServlet6. DispatcherServlet 将 ModalAndView 对象交给视图解析器（ViewResolver）   - 视图解析器获取 ModalAndView 中的信息组成视图的完整路径，返回 View 对象   - InternalResourceViewResolver 处理 jsp 文件7. 最后 DispatcherServlet 将 View 对象执行 View 对象中的渲染方法将 Modal 的数据渲染出去### 请求处理器请求处理器参数，request，response，session，会自动注入当形参为 string 或对象会接受参数自动赋值@RequestMapping：请求映射，可以指定多个 uri，&#96;value &#x3D; &#123;"&#x2F;first","&#x2F;second"&#125;&#96;- produces 指定 ContentType，produces&#x3D;"text&#x2F;plain;charset&#x3D;utf-8"&#96;&#96;&#96;java@RequestMapping(value &#x3D; "&#x2F;user", method &#x3D; RequestMethod.GET)public String user()&#123;    return "user";&#125;&#x2F;&#x2F; @RequestMapping(value &#x3D; "&#x2F;user", method &#x3D; RequestMethod.GET)&#x2F;&#x2F; 等效于 @GetMapping("&#x2F;user")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li></ul></li></ol><p>请求映射，由 DispatcherServlet 中 doService -&gt; doDispatch 实现</p><p>@PathVariable 获取路径变量</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RequestMapping(value &#x3D; &quot;&#x2F;user&#x2F;&#123;id&#125;&quot;)public String user(@PathVariable int id)&#123;    return &quot;user &quot; + id;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>@RequestHeader 获取请求头</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RequestMapping(value &#x3D; &quot;&#x2F;user&quot;)public String user(@RequestHeader(&quot;User-Agent&quot;) String userAgent,                   @RequestHeader Map&lt;String, String&gt; headerMap)&#123;    return &quot;User-Agent：&quot; + userAgent + &quot;\n&quot; + headerMap;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>@RequestParam 获取请求参数 @RequestParam(value&#x3D;””,required &#x3D; false)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RequestMapping(value &#x3D; &quot;&#x2F;user&quot;)public String user(@RequestParam String username,                   @RequestParam String password,                    @RequestParam Map&lt;String, String&gt; paramMap)&#123;    return &quot;username:&quot; + username + &quot;\npassword&quot; + password + &quot;\n&quot; + paramMap;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>@CookieValue 获取 Cookie 的值</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RequestMapping(value &#x3D; &quot;&#x2F;user&quot;)public String user(@CookieValue(&quot;_ga&quot;) String ga)&#123;    return &quot;_ga:&quot; + ga;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>@RequestAttribute 获取 request 域中的属性</p><p>@MatrixVariable 获取矩阵变量</p><h3 id="处理器返回值"><a href="#处理器返回值" class="headerlink" title="处理器返回值"></a>处理器返回值</h3><p>ModelAndView：包含模型数据和视图</p><p>String：视图名称</p><ul><li>请求转发：forward:viewname</li><li>请求重定向：redirect:viewname</li><li>都不和视图解析器一同工作， 就当没有视图解析器使用</li><li>重定向不能访问 WEB-INF 下的资源，而 forward 可以</li></ul><p>Object：配合 @ReponseBody 会直接转为 json 数据返回</p><ul><li>添加 jackson 依赖</li><li>spring-mvc.xml 添加 &lt;mvc:annotation-driver&gt;，开启注解驱动之后，HttpMessageConverter 将 java 对象转为特定对象类型</li><li>使用 @ReponseBody</li></ul><h3 id="字符过滤器"><a href="#字符过滤器" class="headerlink" title="字符过滤器"></a>字符过滤器</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>utf-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>forceEncoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="静态资源处理"><a href="#静态资源处理" class="headerlink" title="静态资源处理"></a>静态资源处理</h3><p>当 DispatcherSerclet 设置的 url-pattern 为 &#x2F; 时，静态资源也会被拦截</p><p>方法1：使用 <code>&lt;mvc:default-servlet-handler&gt;</code></p><p>方式2：使用 <code>&lt;mvc:resources mapping=&quot;&quot; location=&quot;&quot;&gt;</code></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/html/**<span class="token punctuation">"</span></span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/html/<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/static/**<span class="token punctuation">"</span></span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/WEB-INF/static/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>以上两行配置的作用：</p><p>第一行，当 webapp&#x2F;html 下有文件时，通过访问 <a href="http://localhost:8080/pro/html/test.html">http://localhost:8080/pro/html/test.html</a> 可以访问。</p><p>第二行，当 WEB-INF&#x2F;static 下有文件时，通过访问  <a href="http://localhost:8080/pro/static/html/test.html">http://localhost:8080/pro/static/html/test.html</a> 即可访问。</p><p>总结：mapping 匹配请求的地址，location 为实际文件地址。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Configuration@ComponentScan(basePackages &#x3D; &quot;top.reajason&quot;)public class SpringMVCConfig extends WebMvcConfigurationSupport &#123;    @Override    protected void addResourceHandlers(ResourceHandlerRegistry registry) &#123;        registry.addResourceHandler(&quot;&#x2F;**&quot;).addResourceLocations(&quot;&#x2F;&quot;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="thymeleaf"><a href="#thymeleaf" class="headerlink" title="thymeleaf"></a>thymeleaf</h3><blockquote><p>官网：<a href="https://www.thymeleaf.org/">Thymeleaf</a></p></blockquote><p>引入依赖：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>自动配置，因此开发文件放在 “classpath:&#x2F;templates&#x2F;“，以 “.html” 为结尾</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public static final String DEFAULT_PREFIX &#x3D; &quot;classpath:&#x2F;templates&#x2F;&quot;;public static final String DEFAULT_SUFFIX &#x3D; &quot;.html&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">package top.reajason.springmvc.controller;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.GetMapping;@Controllerpublic class ViewTemplateController &#123;    @GetMapping(&quot;&#x2F;th&quot;)    public String th(Model model)&#123;        model.addAttribute(&quot;msg&quot;, &quot;Hello Thymeleaf&quot;);        model.addAttribute(&quot;link&quot;, &quot;https:&#x2F;&#x2F;reajason.top&quot;);        return &quot;success&quot;;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;msg&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.baidu.com<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;link&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.baidu.com<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;link&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="视图解析"><a href="#视图解析" class="headerlink" title="视图解析"></a>视图解析</h3><p>接收 ModelAndView，根据返回值（viewName）选择 ViewResolver 解析生成 View 对象，调用 View 的 render 方法进行渲染。</p><p>为了保护页面不被随意访问，将视图放在 WEB-INF 下即可，因此使用视图解析器能简化开发</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--SpirngMVC容器自带视图解析器--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/WEB-INF/view/<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Controllerpublic class HelloController &#123;    @RequestMapping(&quot;&#x2F;home&quot;)    public ModelAndView hello(ModelAndView modelAndView)&#123;        &#x2F;&#x2F; 会自动拼接为 &#x2F;WEB-INF&#x2F;view&#x2F;home.jsp        modelAndView.setViewName(&quot;home&quot;);        return modelAndView;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h3><p>HandlerInterceptor 拦截器接口</p><ul><li><p>preHandle：请求前，如果 return false 则停止之后的拦截器方法</p><ul><li>false 后也不会执行所拦截的方法，因此需要在 preHandle 中响应结果</li></ul></li><li><p>postHandle：请求后，渲染前，可以在此修改数据</p></li><li><p>afterCompletion：渲染结束，资源回收</p></li></ul><p>自定义拦截器：</p><ol><li>定义一个类实现 HandlerInterceptor 接口，实现其中的方法</li><li>在实现 WebMvcConfigurer 中，重写 addInterceptor 方法进行注册</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class MyInterceptor implements HandlerInterceptor &#123;    @Override    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;        System.out.println(&quot;方法执行之前&quot;);        return true;    &#125;    @Override    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception &#123;        System.out.println(&quot;方法执行之后&quot;);    &#125;    @Override    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception &#123;        System.out.println(&quot;方法执行完成&quot;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--path表示拦截路径，可使用通配符--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/user/**<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment">&lt;!--声明拦截器对象--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top.reajason.handler.MyInterceptor<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拦截器链：按照声明的顺序会放到一个 ArrayList 进行保持</p><p>当前一个为 false 时后面的就不会再执行了。</p><p>执行顺序为 preHandle 1-&gt;2-&gt;3-&gt;4-&gt;… 执行对应方法</p><p>然后执行 postHandle …-&gt;4-&gt;3-&gt;2-&gt;1</p><p>然后执行 afterCompletion ..-&gt;4-&gt;3-&gt;2-&gt;1 结束</p><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><p>文件上传解析器：MultipartResoler，可自定义替换 SpringBoot 自动配置的</p><p>配置文件前缀为：<code>spring.servlet.multipart</code></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/upload<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    用户名： <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    单文件：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>singleFile<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    多文件：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multiFile<span class="token punctuation">"</span></span> <span class="token attr-name">multiple</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Slf4j@Controllerpublic class UploadController &#123;    @PostMapping(&quot;&#x2F;upload&quot;)    public String upload(@RequestParam(&quot;username&quot;) String username,                         @RequestParam(&quot;password&quot;) String password,                         @RequestPart(&quot;singleFile&quot;) MultipartFile singleFile,                         @RequestPart(&quot;multiFile&quot;) MultipartFile[] multipartFiles) throws IOException &#123;        log.info(username);        log.info(password);        log.info(singleFile.getName());        log.info(String.valueOf(multipartFiles.length));        &#x2F;&#x2F; 保存文件        if(!singleFile.isEmpty())&#123;            String filename &#x3D; singleFile.getOriginalFilename();            singleFile.transferTo(new File(&quot;D:\\&quot; + filename));        &#125;        return &quot;success&quot;;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="异常拦截"><a href="#异常拦截" class="headerlink" title="异常拦截"></a>异常拦截</h3><p>@ExceptionHandler，放在方法上面，指明当前方法处理的异常，方法与控制器方法同样的使用</p><p>@ControllerAdvice，控制器增强，放在类的上面，指定当前</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@ControllerAdvicepublic class GlobalExceptionHandler &#123;    @ExceptionHandler(value &#x3D; NameException.class)    @ResponseBody    public Result doNameException(Exception ex)&#123;        Result r &#x3D; new Result();        r.setSuccess(false);        Map&lt;String,String&gt; map &#x3D; new HashMap&lt;&gt;();        map.put(&quot;msg&quot;, &quot;name 不能为 ReaJason！&quot;);        map.put(&quot;ex.getMessage()&quot;, ex.getMessage());        map.put(&quot;ex.getCause()&quot;, ex.getCause().getMessage());        r.setResult(map);        return r;    &#125;    @ExceptionHandler    @ResponseBody    public Result doException(Exception ex)&#123;        Result r &#x3D; new Result();        r.setSuccess(false);        Map&lt;String,String&gt; map &#x3D; new HashMap&lt;&gt;();        map.put(&quot;ex.getMessage()&quot;, ex.getMessage());        r.setResult(map);        return r;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--spring-mvc.xml 中配置包扫描--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top.reajason.controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top.reajason.handler<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h3><p>定时处理某些事情：<code>@EnableScheduling</code>，使用 Quartz</p><h2 id="SSM-整合"><a href="#SSM-整合" class="headerlink" title="SSM 整合"></a>SSM 整合</h2><h3 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h3><ul><li>SpingMVC：视图层，负责接受请求</li><li>Spring：业务层，管理 service，dao，工具类对象</li><li>MyBatis：持久层，与数据库交互</li></ul><h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><ul><li>SpringMVC 容器，管理 Controller 控制器</li><li>Spring 容器，管理 Service，Dao，工具类对象</li></ul><h3 id="整合步骤"><a href="#整合步骤" class="headerlink" title="整合步骤"></a>整合步骤</h3><ol><li><p>添加依赖</p><ul><li><p>SpringMVC 依赖（包括了 Spring 依赖）</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.3.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>MyBatis 依赖</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.0.27<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>jackson 依赖</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-databind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.13.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>druid 依赖</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.24<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>其他</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.18.22<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.3.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.1-b03<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>创建目录结构</p><ul><li>controller</li><li>service</li><li>dao</li><li>entity</li><li>…</li></ul></li><li><p>配置文件</p><ul><li><p>web.xml，注册 DispatcherServlet、ContextLoaderListener、CharacterEncodingFilter</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath*:conf/spring-mvc.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath*:conf/applicationContext.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">></span></span>org.springframework.web.context.ContextLoaderListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>utf-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>forceEncoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>SpringMVC 配置 (spring-mvc.xml)</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd       http://www.springframework.org/schema/context       https://www.springframework.org/schema/context/spring-context.xsd       http://www.springframework.org/schema/mvc       https://www.springframework.org/schema/mvc/spring-mvc.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top.reajason.controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top.reajason.handler<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/WEB-INF/jsp<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--path表示拦截路径，可使用通配符--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/user/**<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token comment">&lt;!--声明拦截器对象--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top.reajason.handler.MyInterceptor<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Spring 配置 (applicationContext.xml)</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top.reajason<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>exclude-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:conf/jdbc.properties<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.alibaba.druid.pool.DruidDataSource<span class="token punctuation">"</span></span> <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>init<span class="token punctuation">"</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>close<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;jdbc.url&#125;<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;jdbc.username&#125;<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;jdbc.password&#125;<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>configLocation<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:conf/mybatis.xml<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.spring.mapper.MapperScannerConfigurer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>basePackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top.reajason.dao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Mybatis 配置 mybatis.xml</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">configuration</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Config 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top.reajason.entity<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top.reajason.dao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>数据库属性配置 jdbc.properties</p><pre class="line-numbers language-none"><code class="language-none">jdbc.url&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;testjdbc.username&#x3D;rootjdbc.password&#x3D;123456<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><h1 id="Spring-源码学习"><a href="#Spring-源码学习" class="headerlink" title="Spring 源码学习"></a>Spring 源码学习</h1><h2 id="BeanFactory"><a href="#BeanFactory" class="headerlink" title="BeanFactory"></a>BeanFactory</h2><blockquote><p>bean 工厂，IOC 的核心</p></blockquote><p>说到 Spring 首先就会想到控制反转（IOC）、依赖注入、AOP 等一系列的名词，控制反转即是将创建对象的方式交由容器来进行，我们用什么往你们拿就可以了，这也是工厂模式的体现，要什么告诉工厂，工厂就给我们生产什么，隐藏的创建对象的实现细节。而控制反转的实现就是通过 BeanFactory。</p><p>打开 BeanFactory 接口代码，映入眼帘的就是一大串注释，其中就包含了 Bean 的生命周期（LifeCycle），当前接口定义了一系列获取 bean 的方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;** * &lt;p&gt;Bean factory implementations should support the standard bean lifecycle interfaces * as far as possible. The full set of initialization methods and their standard order is: * BeanFactory 实现类应该尽可能实现标准的 bean 生命周期接口 * &lt;ol&gt; * &lt;li&gt;BeanNameAware&#39;s &#123;@code setBeanName&#125; * &lt;li&gt;BeanClassLoaderAware&#39;s &#123;@code setBeanClassLoader&#125; * &lt;li&gt;BeanFactoryAware&#39;s &#123;@code setBeanFactory&#125; * &lt;li&gt;EnvironmentAware&#39;s &#123;@code setEnvironment&#125; * &lt;li&gt;EmbeddedValueResolverAware&#39;s &#123;@code setEmbeddedValueResolver&#125; * &lt;li&gt;ResourceLoaderAware&#39;s &#123;@code setResourceLoader&#125; * (only applicable when running in an application context) * &lt;li&gt;ApplicationEventPublisherAware&#39;s &#123;@code setApplicationEventPublisher&#125; * (only applicable when running in an application context) * &lt;li&gt;MessageSourceAware&#39;s &#123;@code setMessageSource&#125; * (only applicable when running in an application context) * &lt;li&gt;ApplicationContextAware&#39;s &#123;@code setApplicationContext&#125; * (only applicable when running in an application context) * &lt;li&gt;ServletContextAware&#39;s &#123;@code setServletContext&#125; * (only applicable when running in a web application context) * &lt;li&gt;&#123;@code postProcessBeforeInitialization&#125; methods of BeanPostProcessors * &lt;li&gt;InitializingBean&#39;s &#123;@code afterPropertiesSet&#125; * &lt;li&gt;a custom &#123;@code init-method&#125; definition * &lt;li&gt;&#123;@code postProcessAfterInitialization&#125; methods of BeanPostProcessors * &lt;&#x2F;ol&gt; * * &lt;p&gt;On shutdown of a bean factory, the following lifecycle methods apply: * &lt;ol&gt; * &lt;li&gt;&#123;@code postProcessBeforeDestruction&#125; methods of DestructionAwareBeanPostProcessors * &lt;li&gt;DisposableBean&#39;s &#123;@code destroy&#125; * &lt;li&gt;a custom &#123;@code destroy-method&#125; definition * &lt;&#x2F;ol&gt; *&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>生命周期</strong>：如果 bean 实现对应接口则向其注入对应内容（Aware 接口） -&gt; 调用 BeanPostProcessors 的 postProcessBeforeInitialization 方法 -&gt; 调用 InitializingBean 的 afterPropertiesSet 方法 -&gt; 调用 init-method（自定义初始化方法） -&gt; 调用 BeanPostProcessors 的 postProcessAfterInitialization 方法 -&gt; …投入使用… -&gt; beanFactory 关闭，调用 DestructionAwareBeanPostProcessors 的 postProcessBeforeDestruction 方法 -&gt; 调用 DisposableBean 的 destroy 方法 -&gt; 调用 destroy-method（自定义销毁方法）</p><h2 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h2><blockquote><p>应用上下文，面向使用者，对 beanFactory 增强</p></blockquote><ul><li>ClassPathXmlApplicationContext：从 xml 文件中加载 bean 定义</li><li>AnnotationConfigApplicationContext：从 Java 配置类加载 bean 定义</li></ul><p>BeanFactory（IOC）容器的创建过程可理解为：</p><ol><li>初始化容器对象（DefaultListableBeanFactory），从配置文件或配置类读取（ResourceLoader）加载 BeanDefinition 并向容器中注册 BeanDefinition（BeanDefinitionRegistry）</li><li>调用 BeanFactoryPostProcessor 对 BeanDefinition 进行自定义修改操作（BeanDefinitionRegistryPostProcessor 可向容器中添加 BeanDefinition）</li><li>实例化 bean（策略模式 - jdk&#x2F;cglib），然后设置 bean 的属性</li><li>调用所有 BeanPostProcessor 的 postProcessBeforeInitialization</li><li>调用 init-method 方法</li><li>调用所有 BeanPostProcessor 的 postProcessAfterInitialization</li><li>投入使用</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">public void refresh() throws BeansException, IllegalStateException &#123;    synchronized (this.startupShutdownMonitor) &#123;        StartupStep contextRefresh &#x3D; this.applicationStartup.start(&quot;spring.context.refresh&quot;);        &#x2F;* Prepare this context for refreshing. * 1. 设置容器的启动时间 * 2. 设置 active 为 true * 3. 设置 close 为 false * 4. 调用子类的 （initPropertySources）可用于设置环境变量必备值，getEnvironment().setRequiredProperties(); * 5. 获取环境对象，将当前系统属性加载到其中并进行必备值的验证，getEnvironment().validateRequiredProperties() * 6. 初始化监听器和时间集合对象 *&#x2F;        prepareRefresh();        &#x2F;* Tell the subclass to refresh the internal bean factory. * 1. 创建容器对象：DefaultListableBeanFactory * 2. 为容器设置 id * 3. 调用 customizeBeanFactory 设置 设置 allowCircularReferences（是否允许 bean 循环依赖） *   和 allowBeanDefinitionOverriding（是否允许覆盖同名称不同定义的对象） 的值，默认都是 true *   子类可重写当前方法进行这两个值的自定义 * 4. 从资源文件中加载 bean 的定义信息（BeanDefinition），并设置到 beanFactory 中 *&#x2F;        ConfigurableListableBeanFactory beanFactory &#x3D; obtainFreshBeanFactory();        &#x2F;* Prepare the bean factory for use in this context. * 1. 设置 classLoader * 2. 设置 spel 表达式解析器 * 3. 设置属性编辑器（将 string 转成指定类型，为 bean 赋值） * 4. 添加 Aware 接口的处理 BeanPostProcessor，并忽略对应 Aware 接口的自动装配处理 * 5. 设置自动装配优先注入 bean * 6. Aop 加载时织入设置 * 7. 添加环境变量 bean 到 ioc 中，方便使用 *&#x2F;        prepareBeanFactory(beanFactory);        try &#123;            &#x2F;&#x2F; Allows post-processing of the bean factory in context subclasses.            &#x2F;&#x2F; 子类继承扩展即可            postProcessBeanFactory(beanFactory);            StartupStep beanPostProcess &#x3D; this.applicationStartup.start(&quot;spring.context.beans.post-process&quot;);            &#x2F;* Invoke factory processors registered as beans in the context. * 实例化并调用所有的 BeanFactoryPostProcessor beans *&#x2F;            invokeBeanFactoryPostProcessors(beanFactory);            &#x2F;&#x2F; Register bean processors that intercept bean creation.            registerBeanPostProcessors(beanFactory);            beanPostProcess.end();            &#x2F;&#x2F; Initialize message source for this context.            &#x2F;&#x2F; 国际化处理            initMessageSource();            &#x2F;&#x2F; Initialize event multicaster for this context.            &#x2F;&#x2F; 实例化事件多播器            initApplicationEventMulticaster();            &#x2F;&#x2F; Initialize other special beans in specific context subclasses.            &#x2F;&#x2F; 子类继承实现，实例化其他 bean            onRefresh();            &#x2F;&#x2F; Check for listener beans and register them.            &#x2F;&#x2F; 将监听器 bean 注册到多播器中            registerListeners();            &#x2F;&#x2F; Instantiate all remaining (non-lazy-init) singletons.            &#x2F;&#x2F; 实例化所有非懒加载单例            finishBeanFactoryInitialization(beanFactory);            &#x2F;&#x2F; Last step: publish corresponding event.            &#x2F;&#x2F; 完成刷新操作，发布 ContextRefreshedEvent 事件            finishRefresh();        &#125;        catch (BeansException ex) &#123;            if (logger.isWarnEnabled()) &#123;                logger.warn(&quot;Exception encountered during context initialization - &quot; +                            &quot;cancelling refresh attempt: &quot; + ex);            &#125;            &#x2F;&#x2F; Destroy already created singletons to avoid dangling resources.            destroyBeans();            &#x2F;&#x2F; Reset &#39;active&#39; flag.            cancelRefresh(ex);            &#x2F;&#x2F; Propagate exception to caller.            throw ex;        &#125;        finally &#123;            &#x2F;&#x2F; Reset common introspection caches in Spring&#39;s core, since we            &#x2F;&#x2F; might not ever need metadata for singleton beans anymore...            resetCommonCaches();            contextRefresh.end();        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="BeanPostProcessor"><a href="#BeanPostProcessor" class="headerlink" title="BeanPostProcessor"></a>BeanPostProcessor</h2><blockquote><p>在 bean 初始化（init-method）前后做点事情</p></blockquote><ul><li>postProcessBeforeInitialization：在调用 afterPropertiesSet 或 init-method 方法前调用，此时 bean 已经赋值完属性了</li><li>postProcessAfterInitialization：在调用 afterPropertiesSet 或 init-method 方法后调用，此时 bean 已经赋值完属性了</li></ul><p>常见实现类：</p><ul><li>AutowiredAnnotationBeanPostProcessor</li><li>CommonAnnotationBeanPostProcessor</li><li>AbstractAdvisorAutoProxyCreator -&gt; AspectJAwareAdvisorAutoProxyCreator</li><li>ApplicationContextAwareProcessor</li><li>ApplicationListenerDetector</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">protected Object initializeBean(String beanName, Object bean, @Nullable RootBeanDefinition mbd) &#123;    if (System.getSecurityManager() !&#x3D; null) &#123;        AccessController.doPrivileged((PrivilegedAction&lt;Object&gt;) () -&gt; &#123;            invokeAwareMethods(beanName, bean);            return null;        &#125;, getAccessControlContext());    &#125;    else &#123;        invokeAwareMethods(beanName, bean);    &#125;    Object wrappedBean &#x3D; bean;    if (mbd &#x3D;&#x3D; null || !mbd.isSynthetic()) &#123;        wrappedBean &#x3D; applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);    &#125;    try &#123;        invokeInitMethods(beanName, wrappedBean, mbd);    &#125;    catch (Throwable ex) &#123;        throw new BeanCreationException(            (mbd !&#x3D; null ? mbd.getResourceDescription() : null),            beanName, &quot;Invocation of init method failed&quot;, ex);    &#125;    if (mbd &#x3D;&#x3D; null || !mbd.isSynthetic()) &#123;        wrappedBean &#x3D; applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);    &#125;    return wrappedBean;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="BeanFactoryPostProcessor"><a href="#BeanFactoryPostProcessor" class="headerlink" title="BeanFactoryPostProcessor"></a>BeanFactoryPostProcessor</h2><blockquote><p>在读取完 beanDefinition 之后做点事情</p></blockquote><p>常见实现类：</p><ul><li>ConfigurationClassPostProcessor</li></ul><p>调用过程:</p><ul><li>BeanFactoryPostProcessor：beanFactory 后置处理器，能够获取 bean 的定义对其进行扩展和修改，此时 bean 还没有实例化。</li><li>在 refresh() -&gt; invokeBeanFactoryPostProcessors(beanFactory) 调用</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Componentpublic class RJBeanFactoryPostProcessor implements BeanFactoryPostProcessor &#123;    @Override    public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException &#123;        System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);        int beanDefinitionCount &#x3D; beanFactory.getBeanDefinitionCount();        System.out.println(beanDefinitionCount);        String[] beanDefinitionNames &#x3D; beanFactory.getBeanDefinitionNames();        for (String beanDefinitionName : beanDefinitionNames) &#123;            System.out.println(beanDefinitionName);        &#125;        System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>BeanDefinitionRegistryPostProcessor</strong></p><p>继承了 BeanFactoryPostProcessor， bean 定义后置处理器，能向 beanFactory 的 beanDefinition 进行增删改查</p><p>重要实现：ConfigurationClassPostProcessor（对注解进行解析）</p><p>执行顺序：</p><ol><li>先调用 BeanDefinitionRegistryPostProcessor 中的 postProcessBeanDefinitionRegistry 方法，优先级 -&gt; 顺序 -&gt; 其他</li><li>再调用 BeanFactoryPostProcessor 的 postProcessBeanFactory 方法</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Componentpublic class RJBeanDefinitionRegistryPostProcessor implements BeanDefinitionRegistryPostProcessor &#123;    @Override    public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) throws BeansException &#123;        System.out.println(registry.getBeanDefinitionCount());    &#125;    @Override    public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException &#123;        System.out.println(beanFactory.getBeanDefinitionCount());    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="AOP-面向切面"><a href="#AOP-面向切面" class="headerlink" title="AOP 面向切面"></a>AOP 面向切面</h2><p>@EnableAspectJAutoProxy：开启 AOP 自动代理</p><ul><li>将 AnnotationAwareAspectJAutoProxyCreator（实质是 InstantiationAwareBeanPostProcessor） 注入到容器中，并设置 id 为 org.springframework.aop.config.internalAutoProxyCreator</li><li>refresh() 中 registerBeanPostProcessors(beanFactory)，向容器中注册所有的 BeanPostProcessor 其中就包括了  AnnotationAwareAspectJAutoProxyCreator</li></ul><p>代理过程：</p><ol><li><p>refesh -&gt; finishBeanFactoryInitialization(beanFactory) -&gt; beanFactory.preInstantiateSingletons() -&gt; getBean(beanName) -&gt; doGetBean -&gt; createBean -&gt; doCreateBean -&gt; initializeBean</p></li><li><p>代理过程发生在初始化方法后 wrappedBean &#x3D; applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName); 调用 AbstractAutoProxyCreator 的后置处理器。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; wrapIfNecessary -&gt; createProxyprotected Object createProxy(Class&lt;?&gt; beanClass, @Nullable String beanName, @Nullable Object[] specificInterceptors, TargetSource targetSource) &#123;    &#x2F;&#x2F; ...    &#x2F;&#x2F; 获取所有的通知    Advisor[] advisors &#x3D; this.buildAdvisors(beanName, specificInterceptors);    proxyFactory.addAdvisors(advisors);    proxyFactory.setTargetSource(targetSource);    this.customizeProxyFactory(proxyFactory);    proxyFactory.setFrozen(this.freezeProxy);    if (this.advisorsPreFiltered()) &#123;        proxyFactory.setPreFiltered(true);    &#125;    ClassLoader classLoader &#x3D; this.getProxyClassLoader();    if (classLoader instanceof SmartClassLoader &amp;&amp; classLoader !&#x3D; beanClass.getClassLoader()) &#123;        classLoader &#x3D; ((SmartClassLoader)classLoader).getOriginalClassLoader();    &#125;    &#x2F;&#x2F; 返回代理对象，JDK or CGLIB    return proxyFactory.getProxy(classLoader);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>调用流程：</p><ol><li>被代理方法的调用</li><li>获取排好序的执行链：List&lt;Object&gt; chain &#x3D; this.advised.getInterceptorsAndDynamicInterceptionAdvice(method, targetClass);</li><li>将执行链包装成 MethodInvocation： MethodInvocation invocation &#x3D; new ReflectiveMethodInvocation(proxy, target, method, args, targetClass,chain);</li><li>调用 invocation.proceed()，创建方法调用栈，从后往前执行方法</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">public Object proceed() throws Throwable &#123;    &#x2F;&#x2F; We start with an index of -1 and increment early.    &#x2F;&#x2F; 如果    if (this.currentInterceptorIndex &#x3D;&#x3D; this.interceptorsAndDynamicMethodMatchers.size() - 1) &#123;        return invokeJoinpoint();    &#125;    Object interceptorOrInterceptionAdvice &#x3D;        this.interceptorsAndDynamicMethodMatchers.get(++this.currentInterceptorIndex);    if (interceptorOrInterceptionAdvice instanceof InterceptorAndDynamicMethodMatcher) &#123;        &#x2F;&#x2F; Evaluate dynamic method matcher here: static part will already have        &#x2F;&#x2F; been evaluated and found to match.        InterceptorAndDynamicMethodMatcher dm &#x3D;            (InterceptorAndDynamicMethodMatcher) interceptorOrInterceptionAdvice;        Class&lt;?&gt; targetClass &#x3D; (this.targetClass !&#x3D; null ? this.targetClass : this.method.getDeclaringClass());        if (dm.methodMatcher.matches(this.method, targetClass, this.arguments)) &#123;            return dm.interceptor.invoke(this);        &#125;        else &#123;            &#x2F;&#x2F; Dynamic matching failed.            &#x2F;&#x2F; Skip this interceptor and invoke the next in the chain.            return proceed();        &#125;    &#125;    else &#123;        &#x2F;&#x2F; It&#39;s an interceptor, so we just invoke it: The pointcut will have        &#x2F;&#x2F; been evaluated statically before this object was constructed.        return ((MethodInterceptor) interceptorOrInterceptionAdvice).invoke(this);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="声明式事务"><a href="#声明式事务" class="headerlink" title="声明式事务"></a>声明式事务</h2><p>@EnableTransactionManagement：开启事务管理器</p><ul><li><p>注册 InfrastructureAdvisorAutoProxyCreator（InstantiationAwareBeanPostProcessor） 到容器中，并设置 id 为 org.springframework.aop.config.internalAutoProxyCreator</p></li><li><p>加入配置类 ProxyTransactionManagementConfiguration</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Configuration(proxyBeanMethods &#x3D; false)@Role(BeanDefinition.ROLE_INFRASTRUCTURE)public class ProxyTransactionManagementConfiguration extends AbstractTransactionManagementConfiguration &#123;    @Bean(name &#x3D; TransactionManagementConfigUtils.TRANSACTION_ADVISOR_BEAN_NAME)    @Role(BeanDefinition.ROLE_INFRASTRUCTURE)    public BeanFactoryTransactionAttributeSourceAdvisor transactionAdvisor(        TransactionAttributeSource transactionAttributeSource, TransactionInterceptor transactionInterceptor) &#123;        BeanFactoryTransactionAttributeSourceAdvisor advisor &#x3D; new BeanFactoryTransactionAttributeSourceAdvisor();        advisor.setTransactionAttributeSource(transactionAttributeSource);        advisor.setAdvice(transactionInterceptor);        if (this.enableTx !&#x3D; null) &#123;            advisor.setOrder(this.enableTx.&lt;Integer&gt;getNumber(&quot;order&quot;));        &#125;        return advisor;    &#125;        &#x2F;&#x2F; 解析事务注解    @Bean    @Role(BeanDefinition.ROLE_INFRASTRUCTURE)    public TransactionAttributeSource transactionAttributeSource() &#123;        return new AnnotationTransactionAttributeSource();    &#125;    &#x2F;&#x2F; 事务拦截器    @Bean    @Role(BeanDefinition.ROLE_INFRASTRUCTURE)    public TransactionInterceptor transactionInterceptor(TransactionAttributeSource transactionAttributeSource) &#123;        TransactionInterceptor interceptor &#x3D; new TransactionInterceptor();        interceptor.setTransactionAttributeSource(transactionAttributeSource);        if (this.txManager !&#x3D; null) &#123;            interceptor.setTransactionManager(this.txManager);        &#125;        return interceptor;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>事务处理过程：</p><ul><li><p>方法调用</p></li><li><p>aop 代理拦截，依次执行执行链的 invoke 方法，事务则是调用 TransactionInterceptor 的 invoke 方法。</p></li><li><p>invoke -&gt; invokeWithinTransaction</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Nullableprotected Object invokeWithinTransaction(Method method, @Nullable Class&lt;?&gt; targetClass,                                         final InvocationCallback invocation) throws Throwable &#123;    &#x2F;&#x2F; If the transaction attribute is null, the method is non-transactional.    &#x2F;&#x2F; 获取解析事务注解类    TransactionAttributeSource tas &#x3D; getTransactionAttributeSource();    final TransactionAttribute txAttr &#x3D; (tas !&#x3D; null ? tas.getTransactionAttribute(method, targetClass) : null);    final TransactionManager tm &#x3D; determineTransactionManager(txAttr);    &#x2F;&#x2F; ...        &#x2F;&#x2F; 获取事务管理器    PlatformTransactionManager ptm &#x3D; asPlatformTransactionManager(tm);    final String joinpointIdentification &#x3D; methodIdentification(method, targetClass, txAttr);    if (txAttr &#x3D;&#x3D; null || !(ptm instanceof CallbackPreferringPlatformTransactionManager)) &#123;        &#x2F;&#x2F; Standard transaction demarcation with getTransaction and commit&#x2F;rollback calls.        &#x2F;&#x2F; 开启事务 start        TransactionInfo txInfo &#x3D; createTransactionIfNecessary(ptm, txAttr, joinpointIdentification);        Object retVal;        try &#123;            &#x2F;&#x2F; This is an around advice: Invoke the next interceptor in the chain.            &#x2F;&#x2F; This will normally result in a target object being invoked.            &#x2F;&#x2F; 目标方法的调用            retVal &#x3D; invocation.proceedWithInvocation();        &#125;        catch (Throwable ex) &#123;            &#x2F;&#x2F; target invocation exception            &#x2F;&#x2F; 方法抛出异常则 rollback            completeTransactionAfterThrowing(txInfo, ex);            throw ex;        &#125;        finally &#123;            &#x2F;&#x2F; 清理工作，删除当前事务对象            cleanupTransactionInfo(txInfo);        &#125;        if (retVal !&#x3D; null &amp;&amp; vavrPresent &amp;&amp; VavrDelegate.isVavrTry(retVal)) &#123;            &#x2F;&#x2F; Set rollback-only in case of Vavr failure matching our rollback rules...            TransactionStatus status &#x3D; txInfo.getTransactionStatus();            if (status !&#x3D; null &amp;&amp; txAttr !&#x3D; null) &#123;                retVal &#x3D; VavrDelegate.evaluateTryFailure(retVal, txAttr, status);            &#125;        &#125;        &#x2F;&#x2F; 如果方法执行成功则 commit，最后返回方法执行结果        commitTransactionAfterReturning(txInfo);        return retVal;    &#125;    &#x2F;&#x2F; ...&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="设计模式的体现"><a href="#设计模式的体现" class="headerlink" title="设计模式的体现"></a>设计模式的体现</h2><p>工厂模式：BeanFactory，ProxyFactory</p><p>代理模式：AOP</p><p>单例模式：默认 bean 为单例</p><p>原型模式：作用域 prototype</p><p>模板方法模式：ApplicationContext 中有子类实现方法用来增强</p><p>策略模式：实例化策略（smart\cglib）</p><p>观察者模式：监听器，事件多播器</p><p>构建者模式：BeanDefinitionBuilder</p><p>访问者模式：BeanDefinitionVisitor</p><p>装饰者模式：BeanWrapper</p><p>适配器模式：AdvisorAdapter</p><p>委托模式：BeanDefinitonParserDelegate</p><p>责任链模式：AOP 增强调用时 intercepter chain</p>]]></content>
      
      
      <categories>
          
          <category> Reading </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Note </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Servlet</title>
      <link href="/2024/10/28/javawebservlet/"/>
      <url>/2024/10/28/javawebservlet/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Servlet"><a href="#1-Servlet" class="headerlink" title="1 Servlet"></a>1 Servlet</h2><h3 id="1-1-UML-图"><a href="#1-1-UML-图" class="headerlink" title="1.1 UML 图"></a>1.1 UML 图</h3><p>Servlet 是接口，我们常使用的 HttpServlet 是一个实现类，支持 Http 协议。创建我们自己的 Servlet 类继承 HttpServlet 时，必须重写 doPost 和 doGet 两个方法中的一个。</p><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/JavaWebServlet_img/HttpServletUML.png" alt="HttpServletUML"></p><h3 id="1-2-Servlet-生命周期"><a href="#1-2-Servlet-生命周期" class="headerlink" title="1.2 Servlet 生命周期"></a>1.2 Servlet 生命周期</h3><ol><li>Web 容器加载我们创建的 Servlet 类 class 到内存中</li><li>当第一次请求时先调用构造器构造一个 servlet 实例，Web 容器中一个 Servlet 类只有一个实例</li><li>第一次构造了一个 Servlet 实例后，调用 init 方法进行初始化，只会调用一次</li><li>service 方法处理请求参数和响应，每个请求都会在单个线程中执行</li><li>Web 容器停止或实例被回收，会调用 destroy 进行资源回收操作，只会调用一次</li></ol><p>servlet 初始化参数配置中 load-on-startup 可以指定当前 Servlet 类在 Web 容器启动时而不是等到第一个请求到来时就构造 Servlet 实例并执行 init 方法。</p><h3 id="1-3-搭建-Servlet-程序"><a href="#1-3-搭建-Servlet-程序" class="headerlink" title="1.3 搭建 Servlet 程序"></a>1.3 搭建 Servlet 程序</h3><h4 id="1-3-1-目录结构"><a href="#1-3-1-目录结构" class="headerlink" title="1.3.1 目录结构"></a>1.3.1 目录结构</h4><pre class="line-numbers language-none"><code class="language-none">\apache-tomcat-9.0.54\webapps\D:.├─docs├─examples├─host-manager├─ROOT│└─servlet    │    ├─src    │  └─top    │      └─reajason    │              HelloServlet.java    └─WEB-INF        │  web.xml        │        ├─classes        │  └─top        │      └─reajason        │              HelloServlet.class        └─lib<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>在 tomacat 主目录中 webapps 下新建一个 servlet 目录，作为 web 项目</li><li>在 src 下编写 Java 代码</li><li>WEB-INF 中 web.xml 配置当前 web 项目</li><li>WEB-INF 中 classes 用来接收 Java 代码生成的 class 文件</li><li>WEB-INF 中 lib 用来放第三方库</li></ol><h4 id="1-3-2-代码编写"><a href="#1-3-2-代码编写" class="headerlink" title="1.3.2 代码编写"></a>1.3.2 代码编写</h4><p>.\src\top\reajason\HelloServlet.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package top.reajason;import java.io.*;import javax.servlet.*;import javax.servlet.http.*;public class HelloServlet extends HttpServlet &#123;        @Override    public void doGet(HttpServletRequest request, HttpServletResponse response)    throws IOException, ServletException    &#123;        response.setContentType(&quot;text&#x2F;html;charset&#x3D;UTF-8&quot;);        PrintWriter out &#x3D; response.getWriter();        out.println(&quot;&lt;h1&gt;Hello Servlet&lt;&#x2F;h1&gt;&quot;);    &#125;    @Override    public void doPost(HttpServletRequest request, HttpServletResponse response)    throws IOException, ServletException    &#123;        doGet(request, response);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>.\WEB-INF\web.xml</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">web-app</span>    <span class="token name">PUBLIC</span> <span class="token string">"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"</span>    <span class="token string">"http://java.sun.com/dtd/web-app_2_3.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>top.reajason.HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-3-3-编译运行"><a href="#1-3-3-编译运行" class="headerlink" title="1.3.3 编译运行"></a>1.3.3 编译运行</h4><p>在 servlet 目录下打开终端运行如下命令：<code>apache-tomcat-9.0.54\webapps\servlet</code></p><ul><li>-d：指定编译后的 class 文件到 .\WEB-INF\classes\ 下</li><li>-classpath：指定类路径</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">javac -encoding utf-8 -d .\WEB-INF\classes\ -classpath &quot;..\..\lib\servlet-api.jar;.;.\WEB-INF\classes\&quot; .\src\top\reajason\*.java<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进入 tomcat 主目录的 bin 下面运行 startup.bat，开启 tomcat 服务</p><p>浏览器输入：<code>http://localhost:8080/servlet/hello</code></p><h2 id="2-请求与响应"><a href="#2-请求与响应" class="headerlink" title="2 请求与响应"></a>2 请求与响应</h2><p>Servlet 绝大多数都在 service 方法中响应处理请求，HttpServlet 重写了 Servlet 接口的 service 方法以请求方式分成了 doGet、doPost、doHead……，当请求方式是哪一种就走哪一个方法。方法的参数类型也变成了 HttpServletRequest 和 HttpServletResponse。</p><h3 id="2-1-请求"><a href="#2-1-请求" class="headerlink" title="2.1 请求"></a>2.1 请求</h3><h4 id="2-1-1-UML-图"><a href="#2-1-1-UML-图" class="headerlink" title="2.1.1 UML 图"></a>2.1.1 UML 图</h4><p>HttpServletRequest 实现了 ServletRequest 接口，并定义了更多关于 Http 的方法。</p><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/JavaWebServlet_img/HttpServletRequestUML.png" alt="HttpServletRequestUML"></p><h4 id="2-1-2-常用方法"><a href="#2-1-2-常用方法" class="headerlink" title="2.1.2 常用方法"></a>2.1.2 常用方法</h4><p>获取请求参数：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 获取请求方法String getMethod();&#x2F;&#x2F; 获取指定 name 的请求的值，第二个方法返回数组，比如前端使用多选框带过来的值String getParameter(String name);String[] getParameterValues(String name);&#x2F;&#x2F; 获取请求参数名称列表Enumeration&lt;String&gt; getParameterNames();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取请求头：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 获取指定 name 的请求头值String getHeader(String name);&#x2F;&#x2F; 获取指定 name 的请求头值，返回枚举集合，例如 accept-encoding 就可能有很多值Enumeration&lt;String&gt; getHeaders(String name);&#x2F;&#x2F; 返回 int 值，例如 Content-Length 返回一个整数int getIntHeader(String name);&#x2F;&#x2F; 获取所有请求头Enumeration&lt;String&gt; getHeaderNames();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>会话相关：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 获取请求 cookieCookie[] getCookies();&#x2F;&#x2F; 获取 session 对象HttpSession getSession();HttpSession getSession(boolean b);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取请求输入流：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 获取请求字节输入流，可获取用户上传的文件ServletInputStream getInputStream();&#x2F;&#x2F; 获取请求字符缓冲流BufferedReader getReader();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取地址相关：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 获取客户端地址，Servlet 编写于服务端，因此对于服务端 remote 就是指的客户端String getRemoteAddr();String getRemoteHost();int getRemotePort();&#x2F;&#x2F; 获取服务端String getServerName();int getServerPort();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请求转发：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 获取请求转发对象RequestDispatcher getRequestDispatcher(String name);&#x2F;&#x2F; include() 请求转发之后，又回到当前 Servlet 类继续处理&#x2F;&#x2F; forward() 请求转发，直接将请求交给其他 Servlet 类处理，地址栏不发生变化，区别于重定向<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>属性相关：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 设置属性，可以将自定义类实例设为属性值setAttribute(String name, Object obj);&#x2F;&#x2F; 获取属性Object getAttribute(String name);Enumeration&lt;String&gt; getAttributeNames();&#x2F;&#x2F; 删除属性void removeAttribute(String name);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其他：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 获取单个文件Part getPart(String name);&#x2F;&#x2F; 获取多个文件Collection&lt;Part&gt; getParts();&#x2F;&#x2F; 获取 ServletContextServletContext getServletContext();&#x2F;&#x2F; ......<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-响应"><a href="#2-2-响应" class="headerlink" title="2.2 响应"></a>2.2 响应</h3><h4 id="2-2-1-UML-图"><a href="#2-2-1-UML-图" class="headerlink" title="2.2.1 UML 图"></a>2.2.1 UML 图</h4><p>HttpServletResponse 实现了 ServletResponse 接口，并定义了更多关于 Http 的方法。</p><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/JavaWebServlet_img/HttpServletResponse.png" alt="HttpServletResponse"></p><h4 id="2-2-2-常用方法"><a href="#2-2-2-常用方法" class="headerlink" title="2.2.2 常用方法"></a>2.2.2 常用方法</h4><p>设置响应头：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 设置响应头void setHeader(String head, String value);void setIntHeader(String head, int value);&#x2F;&#x2F; 设置响应状态，200，404...void setStatus(int);&#x2F;&#x2F; 设置响应类型，常见的有：text&#x2F;html、image&#x2F;jpeg、application&#x2F;pdf...void setContentType();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取输出流：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 获取字符输出流PrintWriter getWriter();&#x2F;&#x2F; 获取字节输出流ServletOutputStream getOutputStream();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>重定向：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">void sendRedirect(String url);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-ServletConfig"><a href="#3-ServletConfig" class="headerlink" title="3 ServletConfig"></a>3 ServletConfig</h2><p>每一个 Servlet 类都有一个 ServletConfig，不能共享。Web 容器启动后 Servlet 类初始化后 ServletConfig 中的值就不变了。</p><p>使用方法：</p><p>在 web.xml 中配置 ServletConfig 初始化参数，在 servlet 标签中使用 init-param 标签</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">web-app</span>    <span class="token name">PUBLIC</span> <span class="token string">"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"</span>    <span class="token string">"http://java.sun.com/dtd/web-app_2_3.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>rq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>top.reajason.HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>username<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>ReaJason<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>gender<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>male<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 Servlet 类中获取：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">getServletConfig().getInitParameter(&quot;username&quot;);getServletConfig().getInitParameter(&quot;gender&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="4-ServletContext"><a href="#4-ServletContext" class="headerlink" title="4 ServletContext"></a>4 ServletContext</h2><p>每一个 Web 应用有一个 ServletContext（每个 JVM 有一个 ServletContext，分布式应用时会有不同的），该应用类所有 Servlet 类都可以访问</p><p>初始化参数使用方法：</p><p>在 web.xml 中配置 ServletContext 初始化参数，使用 context-param 标签</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">web-app</span>    <span class="token name">PUBLIC</span> <span class="token string">"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"</span>    <span class="token string">"http://java.sun.com/dtd/web-app_2_3.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>username<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>ReaJason<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>rq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>top.reajason.HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>username<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>ReaJason<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>rq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/rq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 Servlet 类中调用获取参数</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">getServletContext().getInitParameter(&quot;username&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>ServletContext 也有属性相关的方法，设置之后可以 Web 应用全局访问，用于数据共享，可配合 ServletContextListener 监听器在创建时初始化属性。</p><h2 id="5-HttpSession"><a href="#5-HttpSession" class="headerlink" title="5 HttpSession"></a>5 HttpSession</h2><p>HttpSession 对象在与一个特定客户的整个会话期间都存在，对于会话期间客户做的所有请求，从中得到的所有信息都可以用 HttpSession 对象保存。</p><p>会话死亡的三种情况：</p><ol><li>超时</li><li>调用 invalidate() 方法</li><li>应用结束</li></ol><p>在分布式应用中 ServletContext、ServletConfig 每个 VM 都会有一个备份，但是 HttpSession 只会有一个，相同的 HttpSession 不会出现在两个 VM 中。Web 容器会操作 HttpSession 对象在多个 VM 中进行移动完成请求，这个过程中 HttpSessionAttributeListener 监听器发挥作用。</p><h3 id="5-1-获取-HttpSession-对象"><a href="#5-1-获取-HttpSession-对象" class="headerlink" title="5.1 获取 HttpSession 对象"></a>5.1 获取 HttpSession 对象</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 从请求中获取会话对象，没有则创建，有则直接拿request.getSession();&#x2F;&#x2F; 从请求中获取会话对象，没有则返回 null，有则直接拿request.getSession(false);&#x2F;&#x2F; 每次获取都是新的request.getSession(true);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-HttpSession-常用方法"><a href="#5-2-HttpSession-常用方法" class="headerlink" title="5.2 HttpSession 常用方法"></a>5.2 HttpSession 常用方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 判断当前 HttpSession 是否是新创建的boolean isNew();&#x2F;&#x2F; 获取创建时间long getCreationTime();&#x2F;&#x2F; 获取最近一次获取时间long getLastAccessedTime();&#x2F;&#x2F; 设置用户请求最大间隔时间，超过时间未请求会话撤销（秒）void setMaxInactiveInterval(int seconds);&#x2F;&#x2F; 获取用户请求最大间隔时间（秒）int getMaxInactiveInterval();&#x2F;&#x2F; 结束会话coid invalidate();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>属性相关：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 设置属性void setAttribute(String name, Object obj);&#x2F;&#x2F; 获取属性Object getAttribute(String name);Enumeration&lt;String&gt; getAttributeNames();&#x2F;&#x2F; 删除属性void removeAttribute(String name);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当客户端不支持 Cookie 时使用 URL 重写的方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; encodeURL 会将 session 里面的属性拼接在 URL 后当作请求参数response.encodeURL(&quot;&#x2F;login&quot;);response.sendRedirect(response.encodeRedirectURL(&quot;&#x2F;login&quot;));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="5-3-Cookie"><a href="#5-3-Cookie" class="headerlink" title="5.3 Cookie"></a>5.3 Cookie</h3><p>向响应中添加 Cookie 的步骤</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 1、创建一个新的 Cookie 对象Cookie cookie &#x3D; new Cookie(&quot;username&quot;, &quot;ReaJason&quot;);&#x2F;&#x2F; 2、设置 cookie 的存活时间（秒）cookie.setMaxAge(30*60);&#x2F;&#x2F; 3、添加到响应中response.addCookie(cookie);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从请求中获取特定 cookie 的步骤</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 1、获取 cookie 数组Cookie[] cookies &#x3D; request.getCookies();&#x2F;&#x2F; 2、遍历获取for(int i &#x3D; 0; i &lt; cookies.length; i++)&#123;    Cookie cookie &#x3D; cookie[i];    if(&quot;username&quot;.equals(cookie.getName()))&#123;        out.println(cookie.getValue());        break;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-监听器"><a href="#6-监听器" class="headerlink" title="6 监听器"></a>6 监听器</h2><h3 id="6-1-ServletContextListener"><a href="#6-1-ServletContextListener" class="headerlink" title="6.1 ServletContextListener"></a>6.1 ServletContextListener</h3><p>ServletContext 监听器，监听 ServletContext 初始化时和销毁时执行对应方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public interface ServletContextListener extends EventListener &#123;    default public void contextInitialized(ServletContextEvent sce) &#123;&#125;    default public void contextDestroyed(ServletContextEvent sce) &#123;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用方法：</p><ol><li><p>编写自定义类实现 ServletContextListener，并实现两个方法</p></li><li><p>在 web.xml 中注册监听器</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">></span></span>top.reajason.listener.MyServletContextListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="6-2-ServletContextAttributeListener"><a href="#6-2-ServletContextAttributeListener" class="headerlink" title="6.2 ServletContextAttributeListener"></a>6.2 ServletContextAttributeListener</h3><p>ServletContext 属性监听器，监听 ServletContext 添加、删除、修改属性时调用对应方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public interface ServletContextAttributeListener extends EventListener &#123;    default public void attributeAdded(ServletContextAttributeEvent event) &#123;&#125;    default public void attributeRemoved(ServletContextAttributeEvent event) &#123;&#125;    default public void attributeReplaced(ServletContextAttributeEvent event) &#123;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用方法同 ServletContextListener</p><h3 id="6-3-ServletRequestListener"><a href="#6-3-ServletRequestListener" class="headerlink" title="6.3 ServletRequestListener"></a>6.3 ServletRequestListener</h3><p>ServletRequest 监听器，监听请求初始化和销毁的时候调用对应方法，比如记录请求日志</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public interface ServletRequestListener extends EventListener &#123;    default public void requestDestroyed(ServletRequestEvent sre) &#123;&#125;    default public void requestInitialized(ServletRequestEvent sre) &#123;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用方法同 ServletContextListener</p><h3 id="6-4-ServletRequestAttributeListener"><a href="#6-4-ServletRequestAttributeListener" class="headerlink" title="6.4 ServletRequestAttributeListener"></a>6.4 ServletRequestAttributeListener</h3><p>ServletRequest 属性监听器，监听 ServletRequest 添加、删除、修改属性时调用对应方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public interface ServletRequestAttributeListener extends EventListener &#123;    default public void attributeAdded(ServletRequestAttributeEvent srae) &#123;&#125;    default public void attributeRemoved(ServletRequestAttributeEvent srae) &#123;&#125;    default public void attributeReplaced(ServletRequestAttributeEvent srae) &#123;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用方法同 ServletContextListener</p><h3 id="6-5-HttpSessionListener"><a href="#6-5-HttpSessionListener" class="headerlink" title="6.5 HttpSessionListener"></a>6.5 HttpSessionListener</h3><p>HttpSession 监听器，监听 HttpSession 创建和销毁时调用对应方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public interface HttpSessionListener extends EventListener &#123;    default public void sessionCreated(HttpSessionEvent se) &#123;&#125;    default public void sessionDestroyed(HttpSessionEvent se) &#123;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用方法同 ServletContextListener</p><h3 id="6-6-HttpSessionBindingListener"><a href="#6-6-HttpSessionBindingListener" class="headerlink" title="6.6 HttpSessionBindingListener"></a>6.6 HttpSessionBindingListener</h3><p>HttpSession 绑定监听器，监听一个自定类与 HttpSession 绑定状态调用对应方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public interface HttpSessionBindingListener extends EventListener &#123;    default public void valueBound(HttpSessionBindingEvent event) &#123;&#125;    default public void valueUnbound(HttpSessionBindingEvent event) &#123;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用方法，在属性类中实现 HttpSessionBindingListener 接口中对应方法，无需在 web.xml 中注册。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">import javax.servlet.http.*;public class Dog implements HttpSessionBindingListener&#123;    ...;    public void valueBound(HttpSessionBindingEvent event)&#123;        &#x2F;&#x2F; 当前类实例添加到会话时会触发当前方法    &#125;    public void valueUnbound(HttpSessionBindingEvent event)&#123;        &#x2F;&#x2F; 当前类实例从会话中移除时会触发当前方法    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-7-HttpSessionAttributeListener"><a href="#6-7-HttpSessionAttributeListener" class="headerlink" title="6.7 HttpSessionAttributeListener"></a>6.7 HttpSessionAttributeListener</h3><p>HttpSession 属性监听器，监听 HttpSession 添加、删除、修改属性时调用对应方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public interface HttpSessionAttributeListener extends EventListener &#123;    default public void attributeAdded(HttpSessionBindingEvent event) &#123;&#125;    default public void attributeRemoved(HttpSessionBindingEvent event) &#123;&#125;    default public void attributeReplaced(HttpSessionBindingEvent event) &#123;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用方法同 ServletContextListener</p><h3 id="6-8-HttpSessionActivationListener"><a href="#6-8-HttpSessionActivationListener" class="headerlink" title="6.8 HttpSessionActivationListener"></a>6.8 HttpSessionActivationListener</h3><p>HttpSession 迁移监听器，监听绑定在 HttpSession 的自定义类从一个 JVM 迁移时调用对应方法。</p><p>HttpSession 迁移时只会迁移 Serialization 属性，因此非 Serializable 属性可以通过该监听器解决。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public interface HttpSessionActivationListener extends EventListener &#123;     default public void sessionWillPassivate(HttpSessionEvent se) &#123;&#125;    default public void sessionDidActivate(HttpSessionEvent se) &#123;&#125;&#125; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用方法：</p><ol><li>在自定义类中实现当前监听器接口</li><li>在 web.xml 注册当前监听器</li></ol><h2 id="7-过滤器"><a href="#7-过滤器" class="headerlink" title="7 过滤器"></a>7 过滤器</h2><p>FileChain 过滤器链，使得在拦截一个请求时可以经过多个过滤器进行操作。</p><p>可以使用包装类进行请求和响应的定制操作：</p><ul><li>ServletRequestWrapper</li><li>HttpServletRequestWrapper</li><li>ServletRequestWrapper</li><li>HtpServletResponseWrapper</li></ul><p>定义过滤器：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package top.reajason;import java.io.*;import javax.servlet.*;import javax.servlet.http.*;public class MyFilter implements Filter&#123;    private FilterConfig fc;    public void init(FilterConfig config) throws ServletException&#123;        this.fc &#x3D; config;    &#125;    public void doFilter(ServletRequest req, ServletResponse resp, FilterChain chain)        throws ServletException, IOException&#123;            HttpServletRequest httpReq &#x3D; (HttpServletRequest)req;            fc.getServletContext().log(&quot;进入过滤器了&quot;);            chain.doFilter(req, resp);    &#125;    public void destroy()&#123;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>web.xml 配置过滤器解析：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>LRequest<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>top.reajason.MyFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>LogFileName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>UserLog.txt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>LRequest<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- &lt;url-pattern>/hello&lt;/url-pattern> --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式的艺术一书的阅读笔记</title>
      <link href="/2024/03/11/designpattern/"/>
      <url>/2024/03/11/designpattern/</url>
      
        <content type="html"><![CDATA[<h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><p><strong>类图（Class Diagram）</strong> 是出现在系统中的不同类来描述系统的静态结构，主要用来描述不同的类以及它们之间的关系。</p><p>UML 属性的表示方式：</p><pre class="line-numbers language-none"><code class="language-none">可见性（+：public、-：private、#：protected） 名称:类型[&#x3D;默认值]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>UML 方法的表示方式：</p><pre class="line-numbers language-none"><code class="language-none">可见性 名称(参数列表)[: 返回类型]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="类之间的关系"><a href="#类之间的关系" class="headerlink" title="类之间的关系"></a>类之间的关系</h3><p>关联关系（Association）：（一个对象作为另一个对象的成员变量）</p><p>双向关联、单向关联、自关联、多重关联、聚合关系（整体和部分关系，部分可独立存在）、组合关系（在类中实例化另一个对象，共存亡）</p><p>依赖关系（Dependency）：（使用另一个类作为参数、将另一个类对象作为局部变量、调用另一个类的静态方法）</p><p>泛化关系（Generalization）又称继承关系：（描述父类和子类之间的关系）</p><p>接口与实现关系</p><h2 id="面向对象设计原则"><a href="#面向对象设计原则" class="headerlink" title="面向对象设计原则"></a>面向对象设计原则</h2><h3 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h3><p>单一职责原则（Single Responsibility Principle，SRP）：一个类只负责一个功能领域中的相应职责。或者可以定义为：就一个类而言只有一个引起它变化的原因。</p><p>单一职责原则是实现高内聚、低耦合的指导方针，它是最简单又是最难运用的原则，需要设计人员发现类的不同的职责并将其分离。</p><h3 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h3><p>开闭原则（Open-Closed Principle，OCP）：一个软件实体应当对扩展开放，对修改关闭。即软件实体应尽量在不修改原有代码的情况下进行扩展。</p><p>抽象化是开闭原则的关键。面向接口编程，在新需求到来时不需要改动抽象层而是添加具体的实现类即可完成。</p><h3 id="里氏代换原则"><a href="#里氏代换原则" class="headerlink" title="里氏代换原则"></a>里氏代换原则</h3><p>里氏代换原则（Liskov Substitution Principle，LSP）：所有引用基类（父类）的地方必须能透明地使用其子类的对象。</p><p>在软件中将一个基类对象替换为它的子类对象，程序将不会产生任何错误和异常，在程序中尽量使用基类类型来对对象进行定义，而在运行时再确定其子类类型，用子类对象来替换父类对象。（多态的感觉），这样扩展功能可通过增加一个新的子类来实现。</p><h3 id="依赖倒转原则"><a href="#依赖倒转原则" class="headerlink" title="依赖倒转原则"></a>依赖倒转原则</h3><p>依赖倒转原则（Dependency Inversion Principle，DIP）：抽象不应该依赖于细节，细节应当依赖于抽象。换言之，要针对接口编程而不是实现编程。</p><h3 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h3><p>接口隔离原则（Interface Segregation Principle，ISP）：使用多个专门的接口，而不是使用单一的总接口，即客户端不应该依赖那些它不需要的接口。</p><h3 id="合成复用原则"><a href="#合成复用原则" class="headerlink" title="合成复用原则"></a>合成复用原则</h3><p>合成复用原则（Composition Resuse Principle，CRP）：尽量使用对象组合，而不是继承达到复用的目的</p><h3 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h3><p>迪米特法则（Law of Demeter，LoD）：一个软件实体应当尽可能少地与其他实体发生相互作用。</p><p>当一个模块发生修改时，尽量少得影响其他模块，扩展和重构更加容易，即限制软件实体间的通信。</p><h2 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h2><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>单例模式（Singleton Pattern）：确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例，这个类称为单例类，它提供全局访问的方法。单例模式是一种对象创建型模式。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; Java 饿汉式，类加载时即实例化，占用系统资源class EagerSingleton&#123;    private static final EagerSingleton instance &#x3D; new EagerSingleton();    private EagerSingleton()&#123;&#125;    public static EagerSingleton getInstance()&#123;        return instance;    &#125;&#125;&#x2F;&#x2F; 双重检查锁定（Double-Check Locking），使用锁机制，性能有一定影响class LazySingleton&#123;    private volatile static LazySingleton instance &#x3D; null;    private LazySingleton()&#123;&#125;    public static LazySingleton getInstance()&#123;        if(instance &#x3D;&#x3D; null)&#123;            synchronized(LazySingleton.class)&#123;                if(instance &#x3D;&#x3D; null)&#123;                    instance &#x3D; new LazySingleton();                &#125;            &#125;        &#125;        return instance;    &#125;&#125;&#x2F;&#x2F; 静态内部类机制class Singleton&#123;    private Singleton()&#123;&#125;    private static class InnerClass&#123;        private final static Singleton instance &#x3D; new Singleton();    &#125;    private static Singleton getInstance()&#123;        return InnerClass.instance;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优点：</p><ol><li>提供对唯一实例的受控访问。</li><li>系统中只存在一个对象，节约系统资源。</li><li>允许可变数目的实例（自行提供指定数目实例对象的类可称之为多例类）。</li></ol><p>缺点：</p><ol><li>单例模式没有抽象层，难以扩展。</li><li>单例类职责过重，将对象的创建和对象本身的功能耦合在一起。</li><li>对于自动垃圾回收，如果实例化共享对象长时间不被利用会被回收，下次使用又需要实例化，导致共享的单例对象状态丢失。</li></ol><p>适用场景：</p><ol><li>系统只需要一个实例对象。</li><li>客户调用类的单个实例只允许一个公共访问点。</li></ol><h3 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h3><p>简单工厂模式（Simple Factory Pattern）：定义一个工厂类，它可以根据参数的不同返回不同类的实例，被创建的实例通常都具有共同的父类。因为在简单工厂模式中用于创建实例的方法是静态方法，因此简单工厂模式又称为静态工厂模式（Static Factory Method Pattern）。</p><ul><li>Factory（工厂角色）</li><li>Product（抽象产品角色）</li><li>ConcreteProduct（具体产品角色）</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 定义产品抽象public interface Product&#123;    &#125;&#x2F;&#x2F; 定义具体的产品public class ConcreteProductA implements Product&#123;    &#125;public class ConcreteProductB implements Product&#123;    &#125;&#x2F;&#x2F; 定义工厂class Factory&#123;    public static Product getProduct(String arg)&#123;        Product product &#x3D; null;        if(&quot;A&quot;.equals(arg))&#123;            product &#x3D; new ConcreteProductA();        &#125;else if(&quot;B&quot;.equals(arg))&#123;            product &#x3D; new ConcreteProductB();        &#125;                return product;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优点：</p><ol><li>实现了对象创建和使用的分离，客户端只需要专注于使用产品</li><li>客户端无需知道所创建的具体产品的类名，而只需知道如何使用即可，减少了使用者的记忆量</li><li>引入配置文件可在不修改任何客户端代码的情况下进行更换和增加的新的具体产品类，在一定程度上提高了系统的灵活性</li></ol><p>缺点：</p><ol><li>工厂类集中了所有产品的创建逻辑，职责过重，一旦不能工作，整个系统都将受到影响</li><li>简单工厂模式会增加系统类的个数</li><li>系统扩展困难，增加新产品不得不修改工厂逻辑</li><li>简单工厂模式使用静态工厂方法，无法形成基于继承等级结构</li></ol><p>适用场景：</p><ol><li>工厂类负责创建的对象比较少，由于创建的对象较少，不会造成工厂方法中的业务逻辑太过复杂</li><li>客户端只知道传入工厂类的参数，而不关系对象如何被创建</li></ol><h3 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h3><p>工厂方法模式（Factory Method Pattern）：定义一个用于创建对象的接口，让子类决定将哪一个类实例化。工厂方法模式让一个类的实例化延迟到子类。工厂方法模式又称工厂模式（Factory Pattern）</p><ul><li>Product（抽象产品）</li><li>ConcreteProduct（具体产品）</li><li>Factory（抽象工厂）</li><li>ConcreteFactory（具体工厂）</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 抽象产品interface Logger&#123;    public void writeLog();&#125;&#x2F;&#x2F; 具体产品class DatabaseLogger implements Logger&#123;    public void writeLog()&#123;        System.out.println(&quot;数据库日志记录&quot;);    &#125;&#125;class FileLogger implements Logger &#123;    public void writeLog()&#123;        System.out.println(&quot;文件日志记录&quot;);    &#125;&#125;&#x2F;&#x2F; 抽象工厂interface LoggerFactory&#123;    public Logger createLogger();&#125;&#x2F;&#x2F; 具体工厂class DatabaseLoggerFactory implements LoggerFactory&#123;    public Logger createLogger()&#123;        Logger logger &#x3D; new DatabaseLogger();        return logger;    &#125;&#125;&#x2F;&#x2F; 具体工厂class FileLoggerFactory implements LoggerFactory&#123;    public Logger createLogger()&#123;        Logger logger &#x3D; new FileLogger();        return logger;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优点：</p><ol><li>用户只需关心所需产品对应的工厂，无需关心创建细节甚至是具体的产品类名。</li><li>基于工厂角色和产品角色的多态性设计是工厂方法模式的关键。</li><li>当添加新产品时，只需添加新的产品具体类和具体工厂即可，完全符合开闭原则。</li></ol><p>缺点：</p><ol><li>当添加新产品的时候需要编写新的具体产品类和具体工厂，一定程度上增加了系统的复杂度</li><li>抽象层增加了系统的抽象性和理解难度（？我怎么感觉抽象更好）</li></ol><p>适用场景：</p><ol><li>客户端不需要知道所需要的对象的类</li><li>抽象工厂类通过其子类来指定创建哪个对象（面向对象多态和里氏代换原则）</li></ol><h3 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h3><p>抽象工厂模式（Abstract Factory Pattern）：提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类。抽象工厂模式又称为 Kit 模式，它是一种对象创建型模式。</p><ul><li>AbstractFactory（抽象工厂）</li><li>ConcreteFactory（具体工厂）</li><li>AbstractProduct（抽象产品）</li><li>ConcreteProduct（具体产品）</li></ul><p>抽象工厂声明一组创建一族产品的方法</p><p>具体工厂实现创建一族产品的具体方法</p><p>添加产品族只需要继承或实现抽象工厂即可，符合开闭原则</p><p>添加产品等级结构需要改抽象工厂，一改动全身，不符合开闭原则</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 抽象工厂abstract class AbstractFactory &#123;    public abstract AbstractProductA createProductA();    public abstract AbstractProductB createProductB();&#125;&#x2F;&#x2F; 具体工厂class ConcreteFactory1 extends AbstractFactory &#123;    public AbstractProductA createProductA()&#123;        return new ConcreteProductA1();    &#125;        public AbstractProductB createProductB()&#123;        return new ConcreteProductB1();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优点：</p><ol><li>抽象工厂模式隔离了具体类的生成，改变具体工厂的实例就可以改变系统行为</li><li>当一个产品族被设计一起工作时，它能保证客户端始终使用用一个产品族的对象</li><li>增加新的产品族很方便，无需修改已有系统</li></ol><p>缺点：</p><ol><li>增加新的产品等级结构麻烦，需要对原有系统进行较大的修改，甚至需要修改抽象层代码，违背开闭原则</li></ol><p>适用场景：</p><ol><li>系统不依赖于产品类实例的创建的细节</li><li>系统中有多于一个的产品族，且每次只使用一个产品族</li><li>属于一个产品族的产品一起使用，这一约束必须在系统设计中体现出来</li><li>产品等级结构稳定，设计完成之后，不会再向系统中增加或删除等级结构</li></ol><h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><p>原型对象（Prototype Pattern）：使用原型实例指定创建对象的种类，并且通过克隆这些原型创建新的对象。</p><ul><li>Prototype（抽象原型类）</li><li>ConcretePrototype（具体原型类）</li></ul><p>优点：</p><ol><li>当创建一个新的对象实例较为复杂时，是原型模式通过复制一个现有的实例可以提高新实例的创建效率</li><li>扩展性好，面向抽象原型类进行编程，在增加或较少具体原型类对系统没有任何影响</li><li>原型模式提供简单的创建结构</li><li>可以使用深克隆的方式保存对象的状态</li></ol><p>缺点：</p><ol><li>每一类需要配备一个克隆方法，克隆方法位于类的内部，改造时需要修改，违背开闭原则</li><li>实现深克隆需要层层遍历，实现可能比较麻烦</li></ol><p>适用场景：</p><ol><li>创建新对象的成本比较大</li><li>系统需要保存对象的状态，而对象的状态很小，可以使用原型模式加备忘录模式</li><li>需要避免使用分层次的工厂类创建分层次的对象</li></ol><h3 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h3><p>建造者模式（Builder Pattern）：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</p><ul><li>Builder（抽象建造者）：它为创建一个产品的 Product 对象的各个部件指定抽象方法</li><li>ConcreteBuilder（具体建造者）</li><li>Product（产品角色）</li><li>Director（指挥者），指挥如何创建</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 产品class Product&#123;    private String partA;    private String partB;    private String partC;        &#x2F;&#x2F;getter&#x2F;setter&#125;&#x2F;&#x2F; 抽象建造类abstract class Builder&#123;    protected Product product &#x3D; new Product();        public abstract void buildPartA();    public abstract void buildPartB();    public abstract void buildPartC();        public Product getResult()&#123;        return product;    &#125;&#125;&#x2F;&#x2F; 指挥类class Director&#123;    private Builder builder;        public Director(Builder builder)&#123;        this.builder &#x3D; builder;    &#125;        public void setBuilder(Builder builder)&#123;        this.builder &#x3D; builder;    &#125;        public Product construct()[        builder.buildPartA();        builder.buildPartB();        builder.buildPartC();        return builder.getResult();    ]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优点：</p><ol><li>使用相同的创建过程，不同的具体建造类可以创建不同的产品对象</li><li>建造者之间相对独立，系统扩展方便，符合开闭原则</li><li>可以精细控制产品的创建过程</li></ol><p>缺点：</p><ol><li>如果产品的组成部分差异性大，不适合使用建造者模式</li><li>如果产品内部结构复杂且多变，使用建造者模式会使系统变得很庞大</li></ol><p>适用场景：</p><ol><li>需要生成的产品对象有复杂的内部结构</li><li>需要生成的产品对象属性相互依赖，需要指定其生成顺序</li><li>建造者模式通过引入指挥者类，将创建过程与建造者类和客户端分离开来</li><li>使用相同的步骤创建不同的产品</li></ol><h2 id="结构性模式"><a href="#结构性模式" class="headerlink" title="结构性模式"></a>结构性模式</h2><h3 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h3><p>适配器模式（Adapter Pattern）：将一个接口转换成客户端希望的另一个接口，使接口不兼容的那些类可以一起工作，其别名为包装类（Wrapper）。</p><ul><li>Target（目标抽象类）</li><li>Adapter（适配器类）</li><li>Adaptee（适配者类）</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 对象适配器模式，通过与待适配对象实现关联关系class Adapter extends Target &#123;    private Adaptee adaptee;        public Adapter(Adaptee adaptee)&#123;        this.adaptee &#x3D; adaptee;    &#125;    public void request()&#123;        adaptee.specificRequest();    &#125;&#125;&#x2F;&#x2F; 类适配器模式class Adapter extends Adaptee implements Target &#123;    public void request()&#123;        specificRequest();    &#125;&#125;&#x2F;&#x2F; 双向适配器模式class Adapter implements Target,Adaptee &#123;    private Target target;    private Adaptee adaptee;        public Adapter(Target target)&#123;        this.target &#x3D; target;    &#125;        public Adapter(Adaptee adaptee)&#123;        this.adaptee &#x3D; adaptee;    &#125;        public void request()&#123;        adaptee.specificRequest();    &#125;        public void specificRequest()&#123;        target.request();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>缺省适配器模式（Default Adapter Pattern）：当不需要实现一个接口所提供的所有方法时，可先设计一个抽象实现该接口，并为接口中的每个方法提供一个默认实现，那么该抽象类的子类可以选择性地覆盖父类的某些方法来实现需求，它适用于不想使用一个接口中的所有方法得到情况。</p><ul><li>ServiceInterface（适配器接口）</li><li>AbstractServiceClass（缺省适配器类）</li><li>ConcreteServiceClass（具体业务类）</li></ul><p>优点：</p><ol><li>引用适配器类重用现有的适配类，无需修改原有结构</li><li>将具体的业务封装在适配者类中，提高适配者类的复用性</li><li>对于对象适配器模式可以将多个不同的适配者适配到同一个目标</li></ol><p>缺点：</p><ol><li>不支持多继承的语言，一个类最多只能适配一个适配者类</li><li>适配者不能是最终类</li><li>类适配器模式的目标抽象类只能是接口</li><li>对象适配模式在适配一个适配者类时可以先创建一个适配者类的子类进行方法的覆盖，再对适配者子类进行适配，实现过程复杂</li></ol><p>适用场景：</p><ol><li>系统需要使用一些现有的类，而这些类的接口不符合系统的需要</li><li>创建一个重复使用的类，用于一些彼此没有太大关联的类</li></ol><h3 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h3><p>桥接模式（Bridge Pattern）：将抽象部分与其实现部分分离，使它们都可以独立地变化。它是一个对象结构型模式，又称为柄体（Handle and Body）模式或接口（Interface）模式。</p><ul><li>Abstraction（抽象类）</li><li>RefinedAbstraction（扩充抽象类）</li><li>Implementor（实现类接口）</li><li>ConcrateImplementor（具体实现类）</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 实现类接口interface Implementor&#123;    public void operationImpl();&#125;&#x2F;&#x2F; 抽象类abstract class Abstraction &#123;    protected Implementor impl;        public void setImpl(Implementor impl)&#123;        this.impl &#x3D; impl;    &#125;        public abstract void operation();&#125;&#x2F;&#x2F; 扩充抽象类class RefinedAbstraction extends Abstraction &#123;    public void operation()&#123;        impl.operationImpl();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优点：</p><ol><li>分离抽象接口及其实现部分。</li><li>桥接模式可以取代多层继承方案</li><li>桥接模式提高了系统的可扩展性，在两个维度中任意扩展一个维度，都不要修改原有的系统。</li></ol><p>缺点：</p><ol><li>桥接模式增加了系统的理解和设计难度，需要开发者对抽象层进行设计和编程（感觉这是好处，觉得它难就是它的缺点我有点不赞同，要迎难而上）</li><li>需要正确识别系统中两个独立变化的维度</li></ol><p>适用场景：</p><ol><li>如果系统需要抽象类和具体类中增加更多的灵活性，避免在层次间继承关系，可以使用桥接模式在抽象层建立关联关系</li><li>抽象部分和实现部分可以以继承的方式单独扩展而互不影响</li><li>一个类存在两个或多个独立变化的维度</li><li>对于不希望使用继承或多层继承导致系统类急剧增加的系统，桥接模式尤为适用</li></ol><h3 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h3><p>组合模式（Composite Pattern）：组合多个对象形成树形结构以表示具有整体一部分关系的层次结构。组合模式对单个对象和组合对象的使用具有一致性，组合模式又称为整体-部分（Part-Whole）模式。</p><ul><li>Component（抽象构件）</li><li>Leaf（叶子构件）</li><li>Composite（容器构件）</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 抽象构件，客户端对抽象构件进行编程abstract class Component&#123;    public abstract void add(Component c);    public abstract void remove(Component c);    public abstract Component getChild(int i);    public abstract void operation();&#125;&#x2F;&#x2F; 叶子构件class Leaf extends Component &#123;    public void add(Component c)&#123;    &#125;    public void remove(Component c)&#123;    &#125;    public Component getChild(int i)&#123;return null;    &#125;    public void operation()&#123;    &#125;&#125;&#x2F;&#x2F; 容器构件class Composite extends Component &#123;    private ArrayList&lt;Component&gt; list &#x3D; new ArrayList&lt;Compontnt&gt;();        public void add(Component c)&#123;list.add(c);    &#125;    public void remove(Component c)&#123;list.remove(c);    &#125;    public Component getChild(int i)&#123;return (Component)list.get(i);    &#125;    public void operation()&#123;for(Object obj: list)&#123;            (Component)obj.operation();        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优点：</p><ol><li>组合模式可以清楚定义分层次的复杂对象</li><li>客户端一致地使用组合结构或单个对象</li><li>扩展增加新的容器构件和叶子构件方便</li><li>通过叶子对象和容器对象的递归组合，可形成复杂的树形结构</li></ol><p>缺点：</p><ol><li>增加新构件时难以对容器中的构建类进行限制</li></ol><p>适用场景：</p><ol><li>具体整体和部分层次结构中</li><li>使用面向对象语言系统处理树形结构</li><li>分离叶子对象和容器对象</li></ol><h3 id="装饰模式"><a href="#装饰模式" class="headerlink" title="装饰模式"></a>装饰模式</h3><p>装饰模式（Decorator Pattern）：动态地给一个对象增加一些额外的职责，就增加对象的功能来说，装饰模式比子类实现更为灵活。</p><ul><li>Component（抽象构件）</li><li>Decorator（抽象装饰类）</li><li>ConcreteDecorator（具体装饰类）</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 抽象装饰类class Decorator implements Component&#123;    private Component component;        public Decorator(Component component)&#123;        this.component &#x3D; component;    &#125;        public void opeartion()&#123;        component.operation();    &#125;&#125;&#x2F;&#x2F; 具体抽象类class ConcreteDecorator extends Decorator&#123;    public ConcreteDecorator(Component component)&#123;        super(component);    &#125;        public void operation()&#123;        super.operation();        addedBehavior();    &#125;        public void addedBehavior()&#123;            &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意事项：</p><ol><li>尽可能保持装饰类的接口和被装饰类的接口相同</li><li>尽量保持具体构件类是一个轻类</li><li>如果只有一个具体构件类，那么可以抽象装饰类直接作为该具体构件类的子类</li></ol><p>优点：</p><ol><li>扩展一个对象的功能相比较继承更灵活</li><li>可以通过动态的方法进行对象功能的扩展</li><li>可以对一个对象进行多次装饰</li><li>具体构件类和具体装饰类可以独立变化</li></ol><p>缺点：</p><ol><li>装饰模式会设置非常多小对象，不利于管理</li><li>装饰模式比继承更容易出错，排错更困难</li></ol><p>适用场景：</p><ol><li>在不像其他对象的情况下，动态、透明地给单个对象添加职责</li><li>不能采用继承的方式对系统进行扩展或采用继承对系统扩展和维护不利时</li></ol><h3 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h3><p>外观模式（Facade Pattern）：外部与一个子系统的通信通过一个统一的外观角色进行，为子系统中的一组接口提供一个一致的入口，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。（子系统是一个广义的概念，它可以是一个类、一个功能模块、系统的一个组成部分或者一个完整的系统）。</p><ul><li>Facade（外观角色）</li><li>SubSystem（子系统角色）</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">class Facade&#123;    private SubSystemA obj1 &#x3D; new SubSystemA();    private SubSystemB obj2 &#x3D; new SubSystemB();    private SubSystemC obj3 &#x3D; new SubSystemC();        public void method()&#123;        obj1.method();        obj2.method();        obj3.method();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优点：</p><ol><li>客户端屏蔽了子系统组件，减少了客户端所需处理的对象数目</li><li>实现了子系统与客户端之间的松耦合关系，子系统变化不会影响到客户端</li><li>一个子系统的修改不会影响到其他子系统</li><li>只是提供了一个子系统的统一访问入口，不影响客户端直接使用子系统</li></ol><p>缺点：</p><ol><li>不能很好地限制客户端直接使用子系统</li><li>设计不当，可能导致增加新的子系统时可能需要修改外观类的源代码</li></ol><p>适用场景：</p><ol><li>当要为访问一系列复杂的子系统提供一个简单入口时</li><li>客户端程序与多个子系统存在很大的依赖性，利用外观模式解耦</li><li>在层次化结构中，使用外观模式定义系统中每一层的入口</li></ol><h3 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h3><p>享元模式（Flyweight Pattern）：运用共享技术有效地支持大量细粒度对象的复用。系统只是用少量的对象，而这些对象都很相似，状态变化很小，可以实现对象的多次复用。</p><ul><li>Flayweight（抽象享元类）</li><li>ConcreteFlyweight（具体享元类）</li><li>UnsharedConcreteFlyweight（非共享具体享元类）</li><li>FlyweightFactory（享元工厂类）</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 享元工厂类class FlyweightFactory&#123;    private HashMap flyweight &#x3D; new HashMap();        public Flyweigth getFlyweight(String key)&#123;        if(flyweight.containsKey(key))&#123;            return (Flayweight)flyweight.get(key);        &#125;else &#123;            Flyweight fw &#x3D; new ConcreteFlyweight();            flyweight.put(key, fw);            return fw;        &#125;            &#125;&#125;&#x2F;&#x2F; 抽象享元类class Flyweight &#123;    private String intrinsicState;        public Flyweight(String intrinsicState)&#123;        this.intrinscState &#x3D; intrinsicState;    &#125;        public void operation(String extrinsicState)&#123;            &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优点：</p><ol><li>可以极大减少内存中对象的数量</li><li>享元模式的外部状态相对独立，不会影响其内部状态，从而使享元对象可以在不同环境被共享</li></ol><p>缺点：</p><ol><li>分离出内部状态和外部状态，使得程序逻辑变得复杂</li><li>为了对象共享，需要将享元对象的部分状态外部化</li></ol><p>适用场景：</p><ol><li>以恶系统中有大量相同或者相似的对象，造成内存的大量耗费</li><li>对象的大部分状态可以外部化，可以将这些外部状态传入到对象中</li><li>维护一个存储享元对象的享元池，需要耗费一定的系统资源，在需要多次重复使用享元对象才值得使用</li></ol><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><p>代理模式（Proxy Pattern）：给某一个对象提供一个代理，并由代理对象控制原对象的引用。</p><ul><li>Subject（抽象主题角色）</li><li>Proxy（代理主题角色）</li><li>RealSubject（真实主题角色）</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">class Proxy implements Subject &#123;    private RealSubject realSubject &#x3D; new RealSubject();        public void preRequst()&#123;&#125;        public void request()&#123;        preRequest();        realSubject.request();        postRequest();    &#125;        public void postRequest()&#123;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用的代理模式：</p><ol><li>远程代理（Remote Proxy）：为一个不同的地址空间的对象提供一个本地的代理对象。远程代理又称为大使（Ambassador）。</li><li>虚拟代理（Virtual Proxy）：如果需要创建一个资源消耗较大的对象，先创建一个消耗较小的对象来表示，真实的对象只在需要时才会被真正创建。</li><li>保护代理（Protect Prxoy）：控制一个对象的访问，可以给不同的用户提供不同级别的使用权限。</li><li>缓冲代理（Cache Proxy）：为一个目标操作的结构提供临时的存储空间，以便多个客户端可以共享这些结构。</li><li>智能引用代理（Smart Reference Proxy）：当一个对象被引用时，提供一些额外操作。</li></ol><p>优点：</p><ol><li>代理模式协调调用者和被调用者，在一定程度降低系统的耦合度</li><li>客户端根据抽象主题角色编程，增加更换代理类无须修改源代码</li><li>远程代理位于两个不同地址空间对象的访问提供一个实现机制</li><li>虚拟代理通过一个消耗资源较少的对象来代表资源消耗较多的对象，节省系统开销</li><li>保护代理可以控制对一个对象的访问权限</li></ol><p>缺点：</p><ol><li>客户端和真实主题之间增加了代理对象，请求速度变慢。</li><li>实现代理模式需要额外的工作</li></ol><p>适用场景：</p><ol><li>当客户端需要访问远程主机对象时，使用远程代理</li><li>当需要一个消耗资源较少的对象来代表消耗资源较多的对象时，使用虚拟代理</li><li>当控制一个对象的访问，使用保护代理</li><li>当需要某一个频繁访问的操作结果提供临时存储空间使用缓冲代理</li><li>当需要为一个对象的访问提供一些额外操作时，使用智能引用代理</li></ol><h2 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h2><h3 id="职责链模式"><a href="#职责链模式" class="headerlink" title="职责链模式"></a>职责链模式</h3><p>职责链模式（Chain of Responsibility Pattern）：避免将请求发送者与接收者耦合在一起，让多个对象都有机会接收请求，将这些对象连接成一条链，并且沿着这条链传递请求，直到有对象处理它为止。</p><ul><li>Handler（抽象处理者）</li><li>ConcreteHandler（具体处理者）</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 抽象处理类abstract class Handler &#123;    protected Handler successor;        public void setSuccessor(Handler successor)&#123;        this.successor &#x3D; successor;    &#125;    public abstract void handleRequest(String request);&#125;&#x2F;&#x2F; 具体处理类class ConcreteHandler extends Handler &#123;    public void handleRequest(String reqeust)&#123;        if(请求满足条件)&#123;            &#x2F;&#x2F; 处理请求        &#125;else &#123;            this.successor.handleRequest(request); &#x2F;&#x2F; 转发请求        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优点：</p><ol><li>一个对象无需知道哪一个对象会处理此请求，客户端负责链的创建，降低了系统的耦合度</li><li>请求处理对象仅需维持一个其后继者的引用，而不需要维持所有的，简化对象连接</li><li>在系统中增加新的具体处理者无需修改原有系统的代码，只需客户端重新建链即可</li></ol><p>缺点：</p><ol><li>请求可能一直到末端也没有处理</li><li>对于长的职责链，代码调试不太方便</li><li>建链不当可能造成循环调用，导致系统陷入死循环</li></ol><p>适合场景：</p><ol><li>有多个对象可以处理同一个请求，具体哪个对象处理运行时确定，客户端无需知道是哪个具体对象处理</li><li>在不明确指定接收者的情况下，向多个对象中的提交一个请求</li><li>可动态指定一组对象处理请求，客户端可以改变链中处理者之间的先后次序</li></ol><h3 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h3><p>命令模式（Command Pattern）：将一个请求封装为一个对象，从而可用不同的请求对客户进行参数化；对请求排队或者记录请求日志，以及支持可撤销的操作。别名为动作（Action）模式或事务（Transaction）模式。</p><ul><li>Command（抽象命令类）</li><li>ConcreteCommand（具体命令类）</li><li>Invoker（调用者）</li><li>Receiver（接收者）</li></ul><p>命令模式的本质就是对请求进行封装，一个请求对应于一个命令，将发出的命令的职责和执行命令的责任分隔开。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 抽象命令类abstract class Command &#123;    public abstract void execute();&#125;&#x2F;&#x2F; 调用者class Invoker &#123;    private Command command;        public Invoker(Command command)&#123;        this.command &#x3D; command;    &#125;        public void setCommand(Command command)&#123;        this.command &#x3D; command;    &#125;        public void call()&#123;        command.execute();    &#125;&#125;&#x2F;&#x2F; 具体命令类class ConcreteCommand extends Command &#123;    private Receiver receiver;        public void execute()&#123;        receiver.action();    &#125;&#125;&#x2F;&#x2F; 接收者class Reciver &#123;    public void action()&#123;        &#x2F;&#x2F; 具体操作    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优点：</p><ol><li>降低系统耦合度，请求者和接收者之间不存在直接引用</li><li>新的命令可以很容易加到系统中</li><li>比较容易设计一个命令队列或宏命令（组合模式）</li><li>为请求的撤销和恢复操作设计一种设计和实现方案</li></ol><p>缺点：</p><ol><li>可能会导致系统有过多的具体命令类</li></ol><p>适合场景：</p><ol><li>系统需要调用者和接收者解耦</li><li>系统需要在不同的时间指定请求，将请求排队和执行请求。</li><li>系统需要支持命令的撤销和恢复操作</li><li>系统需要一组操作组合形成宏命令</li></ol><h3 id="解释器模式"><a href="#解释器模式" class="headerlink" title="解释器模式"></a>解释器模式</h3><p>解释器模式（Interpreter Pattern）：定义一个语言的文法，并且建立一个解释器来接收该语言中的句子，这里的语言是指使用规定格式和语法的代码。</p><ul><li>AbstractExpression（抽象表达式）</li><li>TerminalExpression（终结符表达式）</li><li>NonterminalExpression（非终结符表达式）</li><li>Context（环境类）</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 抽象表达式abstract class AbstractExpression &#123;    public abstract void interpret(Context ctx);&#125;&#x2F;&#x2F; 终结符表达式class TerminalExpression extends AbstractExpression &#123;    public void interpret(Context ctx)&#123;        &#x2F;&#x2F; 终结符表达式的解释操作    &#125;&#125;&#x2F;&#x2F; 非终结符表达式class NonterminalExpression extends AbstractExpression &#123;    private AbstractExpression left;    private AbstractExpression right;        public NonterminalExpression(AbstractExpression left, AbstractExpression right)&#123;        this.left &#x3D; left;        this.right &#x3D; right;    &#125;        public void interpret(Context ctx)&#123;        &#x2F;&#x2F; 递归调用每一个组成部分的 interpret 方法        &#x2F;&#x2F; 在递归调用时指定组成部分的连接方式，即非终结符的功能    &#125;&#125;&#x2F;&#x2F; 环境类class Context &#123;    private HashMap map &#x3D; new HashMap();        public void assign(String key, String value)&#123;        &#x2F;&#x2F; 往环境类中设值    &#125;        public String lookup(String key)&#123;        &#x2F;&#x2F; 获取存储在环境类中的值    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优点：</p><ol><li>易于改变和扩展文法</li><li>每一条文法规则都可以表示一个类</li><li>实现文法较为容易</li><li>增加新的解释表达式较为方便，只需增加终结符表达式或非终结符表达式</li></ol><p>缺点：</p><ol><li>复杂文法难以维护，每一个规则都至少需要定义一个类</li><li>执行效率低，大量递归和循环</li></ol><p>适用场景：</p><ol><li>可以将一个需要解释执行的语言中的句子表示为一个抽象语法树</li><li>一些重复出现的问题可以用一种简单的语言来表达</li><li>一个语言的文法较为简单</li><li>执行效率不是关键问题</li></ol><h3 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h3><p>迭代器模式（Interator Pattern）：提供一个方法来访问聚合对象，而不是暴露这个对象的内部表示，其别名为游标。</p><ul><li>Iterator（抽象迭代器）</li><li>ConcreteIterator（具体迭代器）</li><li>Aggregate（抽象聚合类）</li><li>ConcreteAggregate（具体聚合类）</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 抽象迭代器interface Iterator &#123;    public void first();    public void next();    public boolean hasNext();    public Object currentItem();&#125;&#x2F;&#x2F; 具体迭代器类class ConcreteIterator implements Iterator &#123;    private ConcreteAggregate objects;    private int cursor;    public ConcreteIterator(ConcreteAggregate objects)&#123;        this.objects &#x3D; objects;    &#125;        public void first() &#123;&#125;;    public void next() &#123;&#125;;    public boolean hasNext() &#123;&#125;;    public Object currentItem() &#123;&#125;;&#125;&#x2F;&#x2F; 抽象聚合类interface Aggregate &#123;    Iterator createIterator();&#125;&#x2F;&#x2F; 具体聚合类class ConcreteAggregate implements Aggregate &#123;    public Iterator createIterator()&#123;        return new ConcreteIterator(this);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优点：</p><ol><li>支持不同的方式遍历一个聚合对象。</li><li>迭代器简化了聚合类，通过迭代器来实现聚合类的遍历等方法</li><li>迭代器引入抽象层，在增加新的聚合类和迭代器类都很方便</li></ol><p>缺点：</p><ol><li>迭代器模式将存储数据和遍历数据的职责分开，因此增加聚合类时相应要增加迭代器类，增加了系统的复杂性</li><li>抽象迭代器的设计难度较大，应充分考虑到系统未来的扩展</li></ol><p>适用场景：</p><ol><li>访问一个聚合对象的内容而无须暴露它的内部表示</li><li>需要为一个聚合对象提供多种遍历方式</li><li>为遍历不同的聚合结构提供一个统一的接口，在该接口的实现类中为不用的聚合类提供不同的遍历方式</li></ol><h3 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h3><p>中介者模式（Mediator Pattern）：用一个中介对象（中介者）来封装一系列的对象交互，中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变他们之间的交互。</p><ul><li>Mediator（抽象中介者）</li><li>ConcreteMediator（具体中介者）</li><li>Colleague（抽象同事类）</li><li>ConcreteColleague（具体同事类）</li></ul><p>中介类的两个作用：</p><ol><li>中转作用。通过中介者提供的中转作用，各个同事对象就不再显式引用其他同事，当需要其他同事通过中介者间接调用</li><li>协调作用。中介者可对同事的请求进一步处理，将同事成员之间的关系行为进行分离和封装</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 抽象中介者abstract class Mediator &#123;    protected ArrayList&lt;Colleague&gt; colleagues;        public void register(Colleagure colleague)&#123;        colleagues.add(colleague);    &#125;        public abstract void operation();&#125;&#x2F;&#x2F; 具体中介者class ConcreteMediator extends Mediator &#123;    public void operation()&#123;        ((Colleague)(colleagues.get(0))).method1();    &#125;&#125;&#x2F;&#x2F; 抽象同事类abstract class Colleague &#123;    protected Mediator mediator;        public Colleague(Mediator mediator)&#123;        this.meditor &#x3D; mediator;    &#125;        public abstract void method1();        public void method2()&#123;        mediator.operation();    &#125;    &#125;&#x2F;&#x2F; 具体同事类class ConcreteColleague extends Colleague &#123;    public ConcreteColleague(Mediator mediator)&#123;        super(mediator);    &#125;        public void method1()&#123;            &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优点：</p><ol><li>简化对象之间的交互</li><li>将各同事对象解耦</li><li>减少大量同事子类生成</li></ol><p>缺点：</p><ol><li>在具体中介类中包含了大量同事之间的交互细节，可能导致中介类过于复杂难以维护</li></ol><p>适用场景：</p><ol><li>系统中对象之间存在复杂的引用关系，系统结构混乱难以理解</li><li>一个对象由于引用了其他很多对象通信，导致难以复用该对象</li><li>想通过一个中间类来封装多个类中的行为，而又不想生成太多的子类</li></ol><h3 id="备忘录模式"><a href="#备忘录模式" class="headerlink" title="备忘录模式"></a>备忘录模式</h3><p>备忘录模式（Memento Pattern）：在不破坏封装的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，这样可以在以后对象恢复到原先保存的状态。</p><ul><li>Originator（原发器）</li><li>Memento（备忘录）</li><li>Caretaker（负责人）</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 原发器public class Originator &#123;    private String state;    public Originator()&#123;&#125;        public Memento createMemento()&#123;        return new Memento(this);    &#125;        public void restoreMemento(Memento m)&#123;        state &#x3D; m.state;    &#125;        &#x2F;&#x2F; getter&#x2F;setter&#125;&#x2F;&#x2F; 备忘录class Memento &#123;    private String state;        public Memento(Originator o)&#123;        state &#x3D; o.getState();    &#125;        &#x2F;&#x2F; getter&#x2F;setter&#125;&#x2F;&#x2F; 负责人public class Caretaker &#123;    private Memento memento;        public Memento getMemento()&#123;        return memento;    &#125;        &#x2F;&#x2F; getter&#x2F;setter&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优点：</p><ol><li>提供一种状态恢复的实现机制</li><li>实现了对信息的封装，一个备忘录对象是一种原发器对象状态的表示</li></ol><p>缺点：</p><ol><li>资源消耗过大，每保存一次对象的状态都需要消耗一定的系统资源</li></ol><p>适用场景：</p><ol><li>保存一个对象在某一时刻的全部状态或部分状态</li><li>防止外界对象破坏一个对象历史状态的封装性，避免对象历史状态实现细节暴露给外界对象</li></ol><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><p>观察者模式（Observer Pattern）：定义对象之间的一种一对多的依赖关系，使得每当一个对象状态发生改变时，其相关依赖对象皆得到通知并被自动更新。也可称为发布-订阅（Publish&#x2F;Subscribe）模式、模型-视图（Modal&#x2F;View）模式、源-监听器（Source&#x2F;Listener）模式或从属者（Dependents）模式。</p><ul><li>Subject（目标）</li><li>ConcreteSubject（具体目标）</li><li>Observer（观察者）</li><li>ConcreteObserver（具体观察者）</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 目标abstract class Subject &#123;    protected ArrayList&lt;Observer&gt; observers &#x3D; new ArrayList&lt;&gt;();        public void attach(Observer observer)&#123;        observers.add(observer);    &#125;        public void detach(Observer observer)&#123;        observers.remove(oberver);    &#125;        public abstract void notify();&#125;&#x2F;&#x2F; 具体目标类class ConcreteSubject extends Subject &#123;    public void notify()&#123;        for(Observer ob: observers)&#123;            ob.update();        &#125;    &#125;&#125;&#x2F;&#x2F; 抽象观察类interface Observer&#123;    void update();&#125;&#x2F;&#x2F; 具体观察者class ConcreteObserver implements Observer &#123;    public void update()&#123;        &#x2F;&#x2F; 具体响应代码    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优点：</p><ol><li>实现了表示层和数据逻辑层的分离，定义了稳定的消息更新传递机制</li><li>在观察目标和观察者之间建立一个抽象的耦合</li><li>支持广播通信，简化一对多系统的设计</li><li>增加新的具体观察者无需修改原有系统代码，具体观察者和观察目标不存在关联关系时增加新的观察目标也很方便</li></ol><p>缺点：</p><ol><li>如果一个观察目标对象有很多直接和间接观察者，将所有的观察者通知很花时间</li><li>观察者和观察者目标之间存在循环依赖，观察目标触发循环调用可能导致系统崩溃</li><li>没有相应的机制让观察者知道所有观察的目标如何变化而仅仅知道观察目标发生了变化</li></ol><p>适用场景：</p><ol><li>一个抽象模型有两个方面，其中一个方面依赖于另一个方面</li><li>一个对象的改变导致一个或多个其他对象也发生改变</li><li>需要在系统中创建一个触发链</li></ol><h3 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h3><p>状态模式（State Pattern）：允许一个对象在其内部状态改变时改变它的行为，对象看起来似乎修改了它的类。</p><ul><li>Context（环境类）</li><li>State（抽象状态类）</li><li>ConcreteState（具体状态类）</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 抽象状态类abstract class State &#123;    public abstract void handle();&#125;&#x2F;&#x2F; 具体状态类class ConcreteState extends State &#123;    public void handle()&#123;        &#x2F;&#x2F; 方法具体实现代码    &#125;&#125;&#x2F;&#x2F; 环境类class Context &#123;    private State state;    private int value;        public void setState(State state)&#123;        this.state &#x3D; state;    &#125;        public void request()&#123;        state.handle();    &#125;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>状态改变的两种方式：</p><ol><li>统一由环境类来负责状态之间的转换</li><li>由具体状态类负责状态之间的转换</li></ol><p>优点：</p><ol><li>封装状态的转换规则，对状态转换代码进行统一管理</li><li>将所有与某个状态有关的行为放到一个类中，只需要注入一个不同的状态对象</li><li>允许状态转换逻辑与状态对象合成一体，而不是一个提供巨大的条件语句块</li><li>可以让多个环境对象共享一个状态对象</li></ol><p>缺点：</p><ol><li>状态模式的使用增加系统中类和对象的个数</li><li>程序结构与实现较为复杂</li><li>开闭原则支持不好</li></ol><p>适合场景：</p><ol><li>对象的行为依赖它的状态，状态的改变将导致行为的变化</li><li>在代码中包含大量与对象状态有关的条件语句</li></ol><h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><p>策略模式（Strategy Pattern）：定义一系列算法类，将每一个算法封装起来，并让它们可以相互替换。策略模式让算法独立于使用它的客户而变化，也成为政策模式（Policy）。</p><ul><li>Context（环境类）</li><li>Strategy（抽象策略类）</li><li>ConcreteStrategy（具体策略类）</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 抽象策略类abstract class AbstractStrategy&#123;    public abstract void algorithm();&#125;&#x2F;&#x2F; 具体策略类class ConcreteStrategy extends AbstractStrategy &#123;    public void algorithm()&#123;        &#x2F;&#x2F; 算法A    &#125;&#125;&#x2F;&#x2F; 环境类class Context &#123;    private AbstractStrategy strategy;        public void setStrategy(AbstractStrategy strategy)&#123;        this.strategy &#x3D; strategy;    &#125;        public void algorithm()&#123;        strategy.algorithm();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优点：</p><ol><li>完美支持开闭原则，用户可以在不修改原有系统代码的基础上增加新的算法或行为</li><li>提供类管理相关算法族的办法，恰当使用继承可以将公共的代码抽取到抽象策略类中</li><li>提供了替换继承关系的办法。</li><li>避免了多重条件选择语句</li><li>提供了算法复用机制，可以在不同环境类中使用这些策略</li></ol><p>缺点：</p><ol><li>客户端必须知道所有的策略类，然后决定使用哪一个</li><li>策略模式导致系统出现很多具体策略类</li><li>无法同时在客户端使用多个策略类</li></ol><p>适用场景：</p><ol><li>一个系统需要动态地在几种算法中选择一种</li><li>一个对象有很多的行为，这些行为转移到相应的具体策略类中可以避免使用难以维护的多重条件选择语句</li><li>不希望客户端知道复杂的、与算法相关的数据结构，在具体策略类中封装算法与相关的数据结构，提高算法的保密性与安全性</li></ol><h3 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h3><p>模板方法模式（Template Method Pattern）：定义一个操作中算法的框架，而将一些步骤延迟到子类中，模板方法使得子类可以不改变一个算法结构即可重定义该算法某些特定的步骤。</p><ul><li>AbstractClass（抽象类）</li><li>ConcreteClass（具体类）</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 抽象类abstract class AbstractClass &#123;        &#x2F;&#x2F; 模板方法    public void templateMethod()&#123;        primitiveOperation1();        primitiveOperation2();        primitiveOperation3();    &#125;        &#x2F;&#x2F; 具体方法    public void primitiveOperation()&#123;        &#x2F;&#x2F; 实现代码    &#125;        &#x2F;&#x2F; 抽象方法public abstract void primitiveOperation2();        &#x2F;&#x2F; 钩子方法    public void primitiveOperation3()&#123;&#125;&#125;&#x2F;&#x2F; 具体类class ConcreteClass extends AbstractClass &#123;    public void primitiveOperation2()&#123;        &#x2F;&#x2F; 实现代码    &#125;    public void primitiveOperation3()&#123;        &#x2F;&#x2F; 实现代码    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优点：</p><ol><li>在子类实现详细的处理算法时并不会改变算法中的步骤的执行次序</li><li>将公共方法放入父类中，通过子类实现不同的行为，它鼓励使用继承来实现代码复用</li><li>实现反向控制结构，通过子类覆盖父类的钩子方法来决定某一特定步骤是否执行</li><li>不同子类提供的方法的不同实现，更换和增加子类很方便，符合单一职责原则和开闭原则</li></ol><p>缺点：</p><ol><li>需要为每一个基本方法的不同实现提供一个子类，如果父类可变方法太多，将导致类的个数增加，可结合桥接模式来设计</li></ol><p>适用场景：</p><ol><li>对一个复杂算法进行分割</li><li>各自类公共的行为应该提取并集中到一个公共父类中</li><li>通过子类来决定父类算法中某一个步骤需要执行，实现子类对父类的反向控制</li></ol><h3 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h3><p>访问者模式（Visitor Pattern）：提供一个作用于某对象结构中的各元素的操作表示，它使得可以在不改变各元素的类的前提下定义作用于这些元素的新操作。</p><ul><li>Visitor（抽象访问者）</li><li>ConcreteVisitor（具体访问者）</li><li>Element（抽象元素）</li><li>ConcreteElement（具体元素）</li><li>ObjectStructure（对象结构）</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 抽象访问者abstract class Visitor &#123;    public abstract void visit(ConcreteElementA elementA);    public abstract void visit(ConcreteElementB elementB);        public void visit(ConcreteElementC elemtentC)&#123;        &#x2F;&#x2F; 元素 ConcreteELementC 操作代码    &#125;&#125;&#x2F;&#x2F; 具体访问者class ConcreteVisitor extends Visitor &#123;    public void visit(ConcreteELementA elementA)&#123;        &#x2F;&#x2F; 元素 ConcreteElementA 操作代码    &#125;        public void visit(ConcreteElementB elementB)&#123;        &#x2F;&#x2F; 元素 ConcreteElementB 操作代码    &#125;&#125;&#x2F;&#x2F; 抽象元素类interface Element &#123;    public void accept(Visitor visitor);&#125;&#x2F;&#x2F; 具体元素类class ConcreteElement implements Element &#123;    public void accept(Visitor visitor)&#123;        visitor.visit(this);    &#125;        public void operationA()&#123;        &#x2F;&#x2F; 业务方法    &#125;&#125;&#x2F;&#x2F; 对象结构class ObjectStructure &#123;    private ArrayList&lt;Element&gt; list &#x3D; new ArrayList&lt;&gt;();        public void accept(Visitor visitor)&#123;        for(Element e: list)&#123;            e.accept(visitor);        &#125;    &#125;        public void addElement(Element element)&#123;        list.add(element);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优点：</p><ol><li>增加新的访问操作很方便</li><li>将有关元素对象的访问集合到一个访问者对象中</li><li>让用户能够在不修改原有元素层次结构的情况下，定义作用于该层次结构的操作</li></ol><p>缺点：</p><ol><li>增加新的元素类很困难</li><li>破坏封装，访问者模式要求访问者对象访问并调用每一个元素对象的操作</li></ol><p>适用场景：</p><ol><li>一个对象结构包含多个类型的对象，希望对这些对象实施一些依赖具体类型的操作</li><li>需要对一个对象结构中的对象进行很多不同的并且不相关的操作</li><li>对象结构中对象对应的类很少变化，但经常需要在此对象结构上定义新的操作</li></ol>]]></content>
      
      
      <categories>
          
          <category> Reading </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Notes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CoreJava Volume Ⅰ</title>
      <link href="/2024/02/08/corejava/"/>
      <url>/2024/02/08/corejava/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Java-程序设计概述"><a href="#1-Java-程序设计概述" class="headerlink" title="1 Java 程序设计概述"></a>1 Java 程序设计概述</h2><p>Java 的 11 个关键字：</p><ol><li>简单性</li><li>面向对象</li><li>分布式</li><li>健壮性</li><li>安全性</li><li>体系结构中立</li><li>可移植性</li><li>解释性</li><li>高性能</li><li>多线程</li><li>动态性</li></ol><h2 id="2-Java-环境安装"><a href="#2-Java-环境安装" class="headerlink" title="2 Java 环境安装"></a>2 Java 环境安装</h2><p>术语：</p><ul><li>Java Develepment Kit（JDK）：编写 Java 程序的程序员使用的软件</li><li>Java Runtime Environment（JRE）：运行 Java 程序的用户使用的软件</li><li>Standard Edition（SE）：用于桌面或简单服务器应用的 Java 平台</li><li>Enterprise Edition（EE）：用于复杂服务器应用的 Java 平台</li><li>Micro Edition（ME）：用于手机和其他小型设备的 Java 平台</li><li>OpenJDK：Java SE 的开源实现</li></ul><blockquote><p><a href="https://www.oracle.com/java/technologies/downloads/#java8">Java Downloads | Oracle</a></p></blockquote><h3 id="2-1-Windows"><a href="#2-1-Windows" class="headerlink" title="2.1 Windows"></a>2.1 Windows</h3><ol><li>安装包下载并安装（需要账号），<a href="https://www.oracle.com/java/technologies/downloads/#java8-windows">jdk-8u301-windows-x64.exe</a></li><li>配置 JAVA_HOME 系统变量，变量值为 <code>C:\env\jdk1.8</code>(JDK安装目录)</li><li>配置 PATH 系统变量，添加 <code>%JAVA_HOME%\bin</code>、<code>%JAVA_HOME%\jre\bin</code></li><li>测试是否配置完成，<code>java -version</code>、<code>javac -version</code></li></ol><h3 id="2-2-Linux"><a href="#2-2-Linux" class="headerlink" title="2.2 Linux"></a>2.2 Linux</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># (CentOS7)# 1、下载安装包并上传到 Linux，jdk-8u301-linux-x64.tar.gz# 2、解压在 opt 目录下sudo tar zxf jdk-8u301-linux-x64.tar.gz -C &#x2F;opt# 3、配置全局变量vim &#x2F;etc&#x2F;profile# 3.1 最后添加三项export JAVA_HOME&#x3D;&#x2F;opt&#x2F;jdk1.8.0_301export PATH&#x3D;$JAVA_HOME&#x2F;bin:$PATHexport PATH&#x3D;$JAVA_HOME&#x2F;jre&#x2F;bin:$PATH# 4、激活配置source &#x2F;etc&#x2F;profile# 5、测试java -versionjavac -version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-HelloWorld"><a href="#2-3-HelloWorld" class="headerlink" title="2.3 HelloWorld"></a>2.3 HelloWorld</h3><p>1、创建文件 HelloWorld.java 文件（严格区分大小写）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class HelloWorld&#123;    public static void main(String[] args)&#123;        System.out.println(&quot;Hello World, Java 8!&quot;);    &#125;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、使用 javac 编译 Java 文件，<code>javac HelloWorld.java</code></p><p>3、执行（没有任何后缀，直接就是 HelloWorld），<code>java HelloWorld</code></p><h2 id="3-Java-基础程序设计"><a href="#3-Java-基础程序设计" class="headerlink" title="3 Java 基础程序设计"></a>3 Java 基础程序设计</h2><h3 id="3-1-注释"><a href="#3-1-注释" class="headerlink" title="3.1 注释"></a>3.1 注释</h3><ol><li>单行注释：<code>// 开始到本行结尾</code></li><li>多行注释：<code>/* 开始，以 */ 结束</code></li><li>文档注释：<code>/** 开始，以 */ 结束</code></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;** * 这是一个文档注释 * @filename CommentsTest.java * @version 1.01 2021-10-18 * @author ReaJason *&#x2F;public class CommentsTest&#123;    &#x2F;* 每个 Java 程序都必须有一个 main 方法，声明如下*&#x2F;    public static void main(String[] args)&#123;        &#x2F;&#x2F; 这是一个单行注释，下面是打印一句话        System.out.println(&quot;We will not use &#39;Hello, World!&#39;&quot;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-数据类型"><a href="#3-2-数据类型" class="headerlink" title="3.2 数据类型"></a>3.2 数据类型</h3><h4 id="3-2-1-整型"><a href="#3-2-1-整型" class="headerlink" title="3.2.1 整型"></a>3.2.1 整型</h4><table><thead><tr><th>类型</th><th>存储需求</th><th>取值范围</th></tr></thead><tbody><tr><td>int</td><td>4 字节</td><td>-2^31 ~ 2^31-1</td></tr><tr><td>short</td><td>2 字节</td><td>-2^7 ~ 2^7-1</td></tr><tr><td>long</td><td>8 字节</td><td>-2^63 ~ 2^63-1</td></tr><tr><td>byte</td><td>1 字节</td><td>-128 ~ 127</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 长整型有 l 或 L 后缀long a &#x3D; 4000000000L;&#x2F;&#x2F; 十六进制有 0x 或 0X 前缀int b &#x3D; 0xa1f;&#x2F;&#x2F; 八进制有 0 前缀，不建议使用int c &#x3D; 0173;&#x2F;&#x2F; 二进制有 0b 或 0B 前缀，java7 开始int d &#x3D; 0b1001;&#x2F;&#x2F; Java7 开始数字字面量可以加_，使之易读，编译器会去除这些下划线int e &#x3D; 0b1111_0100_0010_0100_0000;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-2-浮点型"><a href="#3-2-2-浮点型" class="headerlink" title="3.2.2 浮点型"></a>3.2.2 浮点型</h4><table><thead><tr><th>类型</th><th>存储需求</th><th>取值范围</th></tr></thead><tbody><tr><td>float</td><td>4 字节</td><td></td></tr><tr><td>double</td><td>8 字节</td><td></td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; float 类型必须添加 f 或 F 后缀float a &#x3D; 1010.101010f;&#x2F;&#x2F; double 类型可添加 d 或 D 后缀，小数默认为 double 类型double b &#x3D; 10.101010231;&#x2F;&#x2F; 使用十六进制表示浮点数，指数采用十进制，尾数采用十六进制，指数的基数为 2&#x2F;&#x2F; 0.125 &#x3D; 0x1.0p-3double c &#x3D; 0x1.0p-3;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>正无穷大，Double.POSITIVE_INFINITY</li><li>负无穷大，Double.NEGATIVE_INFINITY</li><li>NaN，Double.NaN</li></ul><blockquote><p> 浮点数不适合用于无法接受舍入误差的金融计算，应该使用 BigDecimal 类</p></blockquote><h4 id="3-2-3-char-类型"><a href="#3-2-3-char-类型" class="headerlink" title="3.2.3 char 类型"></a>3.2.3 char 类型</h4><p>char 类型的字面量值需要用单引号括起来。char 类型的值也可以表示为十六进制值。</p><table><thead><tr><th>转义序列</th><th>名称</th><th>Unicode 值</th></tr></thead><tbody><tr><td>\b</td><td>退格</td><td>\u0008</td></tr><tr><td>\t</td><td>制表</td><td>\u0009</td></tr><tr><td>\n</td><td>换行</td><td>\u00a</td></tr><tr><td>\r</td><td>回车</td><td>\u00d</td></tr><tr><td>\“</td><td>双引号</td><td>\u0022</td></tr><tr><td>\‘</td><td>单引号</td><td>\u0027</td></tr><tr><td>\\</td><td>反斜杠</td><td>\u005c</td></tr></tbody></table><p>Unicode 转义序列会在解析代码之前处理，例如 <code>// \u00A0 is a newline</code>，由于 <code>\u00A0</code> 会替换成一个换行符，因此会产生语法错误</p><p>char 类型描述了 UTF-16 编码中的一个代码单元，占 2 个字节</p><p>不建议使用 char 类型，除非需要处理 UTF-16 代码单元</p><h4 id="3-2-4-boolean-类型"><a href="#3-2-4-boolean-类型" class="headerlink" title="3.2.4 boolean 类型"></a>3.2.4 boolean 类型</h4><p>boolean 类型有两个值：false 和 true。整型值和布尔值不能相互转换</p><h3 id="3-3-变量"><a href="#3-3-变量" class="headerlink" title="3.3 变量"></a>3.3 变量</h3><p>声明变量为，变量类型+变量名，例如 <code>int a;</code>。变量名不能以数字开头的，由数字、字母、_、$组成。大小写敏感，长度没有限制。</p><ul><li>尽管 $ 是合法的命名字符，但不要个人使用，它只用在 Java 编译器或其它工具生成的名字中</li><li>不能使用 Java 保留字作为变量名</li></ul><h4 id="3-3-1-变量初始化"><a href="#3-3-1-变量初始化" class="headerlink" title="3.3.1 变量初始化"></a>3.3.1 变量初始化</h4><p>声明变量后，必须使用赋值语句进行显式初始化，例如 <code>int a = 10;</code>，千万不要使用未初始化的变量。变量的声明尽可能靠近变量第一次使用的地方。</p><p>Java 10 开始如果变量能推断出类型可以使用 var 来声明变量。</p><h4 id="3-3-2-常量"><a href="#3-3-2-常量" class="headerlink" title="3.3.2 常量"></a>3.3.2 常量</h4><p>使用 final 指定常量，常量只能被赋值一次，无法修改，static final 指定类常量。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Constants&#123;    &#x2F;&#x2F; 这是一个类常量，可以通过 Constants.COUNT 访问    public static final double COUNT &#x3D; 10;    public static void main(String[] args)&#123;        final double PI &#x3D; 3.14;System.out.println(PI + Constants.COUNT);System.out.println(PI + COUNT);        &#x2F;&#x2F; 两个都输出 13.14    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4-运算符"><a href="#3-4-运算符" class="headerlink" title="3.4 运算符"></a>3.4 运算符</h3><p>算术运算符 +、-、*、&#x2F;、% 表示加、减、乘、除、求余（取模）运算</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 当两个整数参与 &#x2F; 运算为整数除法int a &#x3D; 10 &#x2F; 3;&#x2F;&#x2F; 有小数才为浮点除法int b &#x3D; 10 &#x2F; 3.0;&#x2F;&#x2F; 整数除 0 产生异常，浮点数除 0 会的都无穷大或 NaN 结果<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-4-1-数学函数"><a href="#3-4-1-数学函数" class="headerlink" title="3.4.1 数学函数"></a>3.4.1 数学函数</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class MathTest&#123;    public static void main(String[] args)&#123;        &#x2F;&#x2F; 平方根        double a  &#x3D; Math.sqrt(4);&#x2F;&#x2F; 幂运算        double b &#x3D; Math.pow(2, 2);&#x2F;&#x2F; 整数取余，返回 0 ~ 11 内的数        int c &#x3D; Math.floorMod(13, 12);&#x2F;&#x2F; 近似常量值        System.out.println(Math.PI);                System.out.println(a);        System.out.println(b);        System.out.println(c);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-4-2-数值类型转换"><a href="#3-4-2-数值类型转换" class="headerlink" title="3.4.2 数值类型转换"></a>3.4.2 数值类型转换</h4><p>int，long 转为 float 以及 long 转 double 会有精度损失。</p><p>二元运算中，两个操作数有一个 double，另一个也转 double；否则，有一个 float，另一个转 float；否则，有一个 long，另一个转 long；否则两个都转为 int。</p><h4 id="3-4-3-强制类型转换"><a href="#3-4-3-强制类型转换" class="headerlink" title="3.4.3 强制类型转换"></a>3.4.3 强制类型转换</h4><p>强制类型转换的语法格式是在圆括号中给出想要转换的目标类型，后面紧跟待转换的变量名。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; double 转 int，会有精度损失double a &#x3D; 9.997;int b &#x3D; (int)a;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="3-4-4-赋值运算符"><a href="#3-4-4-赋值运算符" class="headerlink" title="3.4.4 赋值运算符"></a>3.4.4 赋值运算符</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 算术运算符与赋值运算符结合使用,+&#x3D;、-&#x3D;、&#x2F;&#x3D;、*&#x3D;、%&#x3D;int x +&#x3D; 4;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="3-4-5-自增自减运算符"><a href="#3-4-5-自增自减运算符" class="headerlink" title="3.4.5 自增自减运算符"></a>3.4.5 自增自减运算符</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 自增,++n、n++int m &#x3D; 7;int n &#x3D; 7;int a &#x3D; 2 * ++m; &#x2F;&#x2F; 16int b &#x3D; 2 * n++; &#x2F;&#x2F; 14&#x2F;&#x2F; 自减,--n、n--<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-4-6-关系运算符"><a href="#3-4-6-关系运算符" class="headerlink" title="3.4.6 关系运算符"></a>3.4.6 关系运算符</h4><p>&#x3D;&#x3D;、!&#x3D;、&lt;、&lt;&#x3D;、&gt;&#x3D;、&amp;&amp;（短路与）、||（短路或）</p><ul><li><code>expression1 &amp;&amp; expression2</code>，如果第一个表达式会 false，就不会再管第二个表达式</li><li><code>expression1 || expression2</code>，如果第一个表达式会 true，就不会再管第二个表达式</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class OperatorTest&#123;   public static void main(String[] args)&#123;       int a &#x3D; 10;       int b &#x3D; 11;       if(a &gt; 10 &amp;&amp; (b+&#x3D;1) &gt; 12)&#123;       &#125;       System.out.println(a); &#x2F;&#x2F; 10       System.out.println(b); &#x2F;&#x2F; 11       if((a+&#x3D;1) &gt; 11 || (b+&#x3D;1) &gt; 11)&#123;       &#125;       System.out.println(a); &#x2F;&#x2F; 11       System.out.println(b); &#x2F;&#x2F; 12   &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-4-7-位运算"><a href="#3-4-7-位运算" class="headerlink" title="3.4.7 位运算"></a>3.4.7 位运算</h4><p>&amp;（and）、|（or）、^（xor）、~（not），这些运算符按位模式处理。&amp; 和 | 也能返回布尔值，不采用短路方式求值。</p><p>&gt;&gt;（逻辑右移，除 2），&lt;&lt;（逻辑左移，乘 2），&gt;&gt;&gt;（算术右移，符号位填充高位），不存在 &lt;&lt;&lt; 运算符。</p><h4 id="3-4-8-运算符级别"><a href="#3-4-8-运算符级别" class="headerlink" title="3.4.8 运算符级别"></a>3.4.8 运算符级别</h4><table><thead><tr><th>运算符</th><th>结合性</th></tr></thead><tbody><tr><td>[]、()</td><td>左 -&gt; 右</td></tr><tr><td>!、~、++、–、+（一元运算）、-（一元运算）、()（强制类型转换）、new</td><td>右 -&gt; 左</td></tr><tr><td>*、&#x2F;、%</td><td>左 -&gt; 右</td></tr><tr><td>+、-</td><td>左 -&gt; 右</td></tr><tr><td>&lt;&lt;、&gt;&gt;、&gt;&gt;&gt;</td><td>左 -&gt; 右</td></tr><tr><td>&lt;、&lt;&#x3D;、&gt;、&gt;&#x3D;、instanceof</td><td>左 -&gt; 右</td></tr><tr><td>&#x3D;&#x3D;、!&#x3D;</td><td>左 -&gt; 右</td></tr><tr><td>&amp;</td><td>左 -&gt; 右</td></tr><tr><td>^</td><td>左 -&gt; 右</td></tr><tr><td>|</td><td>左 -&gt; 右</td></tr><tr><td>&amp;&amp;</td><td>左 -&gt; 右</td></tr><tr><td>||</td><td>左 -&gt; 右</td></tr><tr><td>?:</td><td>右 -&gt; 左</td></tr><tr><td>&#x3D;、+&#x3D;、-&#x3D;、*&#x3D;、&#x2F;&#x3D;、%&#x3D;、&amp;&#x3D;、|&#x3D;、^&#x3D;、&lt;&lt;&#x3D;、&gt;&gt;&#x3D;、&gt;&gt;&gt;&#x3D;</td><td>右 -&gt; 左</td></tr></tbody></table><h4 id="3-4-9-枚举类型"><a href="#3-4-9-枚举类型" class="headerlink" title="3.4.9 枚举类型"></a>3.4.9 枚举类型</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">enum Size&#123; SMALL, MEDIUM, LARGE&#125;;Size s &#x3D; Size.SMALL;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-5-字符串"><a href="#3-5-字符串" class="headerlink" title="3.5 字符串"></a>3.5 字符串</h3><p>字符串从概念上来说即是 Unicode 字符序列，使用双引号括起来，字符串都是 String 类的一个实例。字符串不可变，无法修改。</p><p>不可修改的优点就是编译器可以让字符串共享，存在一个字符串池，如果字符串相同则直接引用。</p><p>实际上只有字符串字面量是共享的，而 + 或 substring 等操作产生的字符串不共享。</p><h4 id="3-5-1-子串"><a href="#3-5-1-子串" class="headerlink" title="3.5.1 子串"></a>3.5.1 子串</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; String substring(int beginIndex) 截取 [beginIndex, arr.length - 1]&#x2F;&#x2F; String substring(int beginIndex, int endIndex) 截取 [beginIndex, endIndex)String s &#x3D; &quot;Hello&quot;;String sub &#x3D; s.substring(1, 3); &#x2F;&#x2F; &quot;el&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-5-2-拼接"><a href="#3-5-2-拼接" class="headerlink" title="3.5.2 拼接"></a>3.5.2 拼接</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; +String s1 &#x3D; &quot;Hello&quot; + &quot;,World!&quot;;String s2 &#x3D; &quot;Hello&quot; + &quot;123&quot;;&#x2F;&#x2F; String join()String all &#x3D; String.join(&quot;&#x2F;&quot;, &quot;S&quot;, &quot;L&quot;,&quot;M&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-5-3-检测相等"><a href="#3-5-3-检测相等" class="headerlink" title="3.5.3 检测相等"></a>3.5.3 检测相等</h4><blockquote><p>千万不要使用 &#x3D;&#x3D; 运算符比较字符串是否相等，这个运算符是比较两个字符串的地址是否相等</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; equals()&#x2F;&#x2F; equalsIgnoreCase() 忽略大小写&#x2F;&#x2F; 只有字符串常量是共享的，+ 或 substring 等操作产生的结果都不是共享的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-5-4-空串与-Null"><a href="#3-5-4-空串与-Null" class="headerlink" title="3.5.4 空串与 Null"></a>3.5.4 空串与 Null</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 空串即长度为 0 的字符串&#x2F;&#x2F; String 是类对象，引用类型，可以赋值为 null，表示没有和任何对象关联&#x2F;&#x2F; 判断字符串不为空且不为空串，需要先判断 nullif(str !&#x3D; null &amp;&amp; str.length() !&#x3D; 0)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-5-5-码点与代码单元"><a href="#3-5-5-码点与代码单元" class="headerlink" title="3.5.5 码点与代码单元"></a>3.5.5 码点与代码单元</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; length() 获取的是字符串的代码单元长度&#x2F;&#x2F; charAt(int index) 获取 index 位置的代码单元&#x2F;&#x2F; 码点即 Unicode 码点，有些 Unicode 码点需要两个代码单元表示&#x2F;&#x2F; codePointAt(int index) 获取 index 位置的码点&#x2F;&#x2F; 遍历字符串打印码点int[] codePoints &#x3D; str.codePoints.toArray();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-5-6-String-API"><a href="#3-5-6-String-API" class="headerlink" title="3.5.6 String API"></a>3.5.6 String API</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; String 位于 java.lang.String&#x2F;*1、返回给定位置的代码单元char charAt() 2、返回从给定位置开始的码点int codePointAt(int index)3、返回从 startIndex 代码点开始，位移 cpCount 后的码点索引int offsetByCodePoints(int startIndex, int cpCount) 4、按照字段顺序，比较，字符串位于 other 之前返回负数，相等返回 0，之后返回正数int compareTo(String other)5、将字符串的码点作为一个流返回，toArray 放入数组中IntStream codePoints()6、用数组中从 offset 开始的 count 个码点构造新字符串new String(int[] codePoints, int offset, int count)7、字符串相等返回 trueboolean equals(Object other)8、忽略大小写比较，相等返回 trueboolean euqlasIgnoreCase(String other)9、以 prefix 为前缀返回 trueboolean startsWith(String prefix)10、以 suffix 为后缀返回 trueboolean endsWith(String suffix)11、返回字符串 str 或 代码点 cp 匹配的第一个字串开始，这个位置从 0 或 fromIndex 计算，如果原字符串不存在 str 返回 -1int indexOf(String str)int indexOf(String str, int fromIndex)int indexOf(int cp)int indexOf(int cp, int fromIndex)12、返回字符串长度int length()13、返回 [startIndex, endIndex) 的代码点数量int codePointCount(int startIndex, int endIndex)14、返回新字符串，newString 代替原字符串中的所有 oldStringString replace(CharSquence oldString, CharSequence newString)15、返回新字符串，范围为 [beginIndex, endIndex)String substring(int beginIndex)String substring(int beginIndex, int endIndex)16、返回新字符串，全转小写String toLowerCase()17、返回新字符串，全转大写String toUpperCase()18、返回新字符串，删除原字符串前后的空格String trim()19、返回新字符串，使用 delimiter 连接所有元素String join(CharSequence delimiter, CharSequence... elements)*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-5-7-构建字符串"><a href="#3-5-7-构建字符串" class="headerlink" title="3.5.7 构建字符串"></a>3.5.7 构建字符串</h4><p>每次连接字符串都是构建一个新的 String 对象，可以使用 StringBuilder 高效创建字符串。StringBuffer 有线程同步机制，但效率低，StringBuilder 线程不安全，效率高。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class StringBuilderTest&#123;    public static void main(String[] args)&#123;        StringBuilder builder &#x3D; new StringBuilder();        builder.append(&quot;welcome&quot;);        builder.append(&quot; new&quot;);        builder.append(&quot; world&quot;);        builder.append(&quot;, CoreJava&quot;);        builder.delete(8, 11);        builder.insert(7, &quot; to the&quot;);        System.out.println(builder.length());        String completedString &#x3D; builder.toString();        System.out.println(completedString);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-6-输入输出"><a href="#3-6-输入输出" class="headerlink" title="3.6 输入输出"></a>3.6 输入输出</h3><h4 id="3-6-1-读取输入"><a href="#3-6-1-读取输入" class="headerlink" title="3.6.1 读取输入"></a>3.6.1 读取输入</h4><p>使用 Scanner 类完成键盘读取输入。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;*1、用给定的输入流创建一个 Scanner 对象Scanner(InputStream in)2、读取输入的下一行内容String nextLine()3、读取输入的下一个单词（空格为分隔符）String next()4、读取并转换下一个表示整数或浮点数的字符序列double nextDouble()5、检测输入中是否还有其他单词boolean hasNext()6、检测是否还有表示整数或浮点数的下一个字符序列boolean hasNextDouble()*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">import java.util.*;public class InputTest&#123;public static void main(String[] args)&#123;        Scanner in &#x3D; new Scanner(System.in);System.out.print(&quot;What&#39;s your name?&quot;);String name &#x3D; in.nextLine();System.out.print(&quot;How old are you?&quot;);int age &#x3D; in.nextInt();System.out.print(&quot;How much are your salary every month?&quot;);double salary &#x3D; in.nextDouble();System.out.println(&quot;Hello，&quot; + name + &quot;.Next year, you&#39;ll be &quot; + (age+1) + &quot;.And if you don&#39;t take any money, you&#39;ll save &quot;+ (salary * 12));    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-6-2-格式化输出"><a href="#3-6-2-格式化输出" class="headerlink" title="3.6.2 格式化输出"></a>3.6.2 格式化输出</h4><p>使用 printf 进行格式化输出，也可以使用 String.format()。转换符表如下：</p><table><thead><tr><th>转换符</th><th>类型</th><th>举例</th></tr></thead><tbody><tr><td>d</td><td>十进制整数</td><td>159</td></tr><tr><td>x</td><td>十六进制整数</td><td>9f</td></tr><tr><td>o</td><td>八进制整数</td><td>237</td></tr><tr><td>e</td><td>定点浮点数</td><td>15.9</td></tr><tr><td>g</td><td>通用浮点数</td><td>–</td></tr><tr><td>a</td><td>十六进制浮点数</td><td>0x1.fccdp3</td></tr><tr><td>s</td><td>字符串</td><td>Hello</td></tr><tr><td>c</td><td>字符</td><td>H</td></tr><tr><td>b</td><td>布尔</td><td>True</td></tr><tr><td>h</td><td>散列码</td><td>42628b2</td></tr><tr><td>tx、Tx</td><td>日期时间（T 强制大写）</td><td>已经过时的</td></tr><tr><td>%</td><td>百分号</td><td>%</td></tr><tr><td>n</td><td>与平台有关的行分隔符</td><td>–</td></tr></tbody></table><h3 id="3-7-控制流程"><a href="#3-7-控制流程" class="headerlink" title="3.7 控制流程"></a>3.7 控制流程</h3><p>Java 没有 goto 语句，但是 break 语句可以带标签，达到从内存循环跳出的目的。</p><h4 id="3-7-1-块作用域"><a href="#3-7-1-块作用域" class="headerlink" title="3.7.1 块作用域"></a>3.7.1 块作用域</h4><p>一个块中可以嵌套另一个块，但是不能在嵌套的两个块中声明同名的变量。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class BlockTest&#123;    public static void main(String[] args)&#123;        int n &#x3D; 1;        &#123;            int k &#x3D; 1;            int n &#x3D; 2; &#x2F;&#x2F; 错误: 已在方法 main(String[])中定义了变量 n        &#125;System.out.println(n);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-7-2-条件语句"><a href="#3-7-2-条件语句" class="headerlink" title="3.7.2 条件语句"></a>3.7.2 条件语句</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 条件语句格式if(condition) statement;&#x2F;&#x2F; 执行多条使用块语句if(condition)&#123;    statement1;    statement2;    ...&#125;&#x2F;&#x2F; if-else，else 和 离他最近的 if 结合在一起if(condition) statement1 else statement2;&#x2F;&#x2F; if-else 执行多条语句if(condition)&#123;    statemen1;    statemen2;&#125;else&#123;    statement3;    statement4;&#125;&#x2F;&#x2F; if-else if-elseif(condition1)&#123;    statement1;&#125;else if(condition2)&#123;    statement2;&#125;else&#123;    statement3;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">import java.util.*;public class IfTest&#123;    public static void main(String[] args)&#123;        Scanner in &#x3D; new Scanner(System.in);        System.out.println(&quot;How much are your salary?&quot;);        double salary &#x3D; in.nextDouble();        double target &#x3D; 4000;        String performance &#x3D; &quot;&quot;;        if(salary &gt;&#x3D; 2 * target)&#123;            performance &#x3D; &quot;Excellent&quot;;        &#125;else if(salary &gt;&#x3D; 1.5 * target)&#123;            performance &#x3D; &quot;Fine&quot;;        &#125;else if(salary &gt;&#x3D; target)&#123;            performance &#x3D; &quot;Satisfactory&quot;;        &#125;        else&#123;            System.out.println(&quot;You&#39;re fired&quot;);        &#125;        System.out.println(performance + &quot;~&quot;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-7-3-循环语句"><a href="#3-7-3-循环语句" class="headerlink" title="3.7.3 循环语句"></a>3.7.3 循环语句</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; while 循环一般格式while(condition) statement;&#x2F;&#x2F; do&#x2F;while 循环do statement while(condition);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-7-4-for-循环"><a href="#3-7-4-for-循环" class="headerlink" title="3.7.4 for 循环"></a>3.7.4 for 循环</h4><ul><li>for 语句第一部分是计数器初始化，第二部分是循环条件，第三部分是如何更新计数器</li><li>for 语句内部定义的变量外部无法使用，每个独立的 for 语句可以定义同名变量</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class ForTest&#123;    public static void main(String[] args)&#123;        for(int i &#x3D; 1; i &lt;&#x3D; 10; i++)&#123;            System.out.print(i + &quot; &quot;);        &#125;        System.out.println();        for(int i &#x3D; 0; i &lt; 10; i++)&#123;            System.out.print(i + &quot; &quot;);        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-7-5-switch-语句"><a href="#3-7-5-switch-语句" class="headerlink" title="3.7.5 switch 语句"></a>3.7.5 switch 语句</h4><p>switch 语句从选择项匹配的 case 标签处开始执行直到遇到 break 语句或执行到 switch 语句结尾处。如果没有匹配的而有 default 语句，就执行 default 子句。如果某个 case 分支没有 break 语句，就有可能继续执行下一个 case 分支。</p><p>case 标签可以是：</p><ul><li>类型为 char、byte、short、int 的常量表达式</li><li>枚举常量</li><li>字符串字面量（Java SE 7 开始）</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class SwitchTest&#123;    public static void main(String[] args)&#123;        Scanner in &#x3D; new Scanner(System.in);        System.out.println(&quot;请输入你想使用的功能：（1,2）&quot;);        String choice &#x3D; in.next();        switch(choice)&#123;            case &quot;1&quot;:                System.out.println(&quot;你选择了 1 功能，什么也没发生&quot;);                break;            case &quot;2&quot;:                System.out.println(&quot;你选择了 2 功能，什么也没发生&quot;);                break;            default:                System.out.println(&quot;没有该功能...&quot;);        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-7-6-中断控制语句"><a href="#3-7-6-中断控制语句" class="headerlink" title="3.7.6 中断控制语句"></a>3.7.6 中断控制语句</h4><ul><li>break：跳出当前循环</li><li>break tag：跳出循环，从内到外，跳出语句块，到 tag 位置</li><li>continue：跳出当前循环，继续下一次循环</li></ul><h3 id="3-8-大数值"><a href="#3-8-大数值" class="headerlink" title="3.8 大数值"></a>3.8 大数值</h3><p>java.math 包中有 BigInteger 和 BigDecimal。这两个类可以处理包含任意长度数字序列的数值。BigInteger 实现任意精度的整数运算，BigDecimal 实现任意精度的浮点运算。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">import java.math.*;public class BigTest&#123;    public static void main(String[] args)&#123;        BigInteger a &#x3D; BigInteger.valueOf(100);        BigInteger b &#x3D; BigInteger.valueOf(200);&#x2F;&#x2F; 加        System.out.println(a.add(b));        &#x2F;&#x2F; 减        System.out.println(a.subtract(b));        &#x2F;&#x2F; 乘        System.out.println(a.multiply(b));        &#x2F;&#x2F; 除        System.out.println(a.divide(b));        &#x2F;&#x2F; 取余        System.out.println(a.mod(b));        &#x2F;&#x2F; 比较        System.out.println(a.compareTo(b));    &#125;&#125;&#x2F;&#x2F; BigDecimal 中 divide 需要指定舍入方式，RoundingMode.HALF_UP 即四舍五入<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-9-数组"><a href="#3-9-数组" class="headerlink" title="3.9 数组"></a>3.9 数组</h3><p>数组是一种数据结构，用来存储同一类型值的集合。通过整型下标可以访问数组的每一个值。声明数组时，需要指出数组类型和数组变量的名字，<code>int[] a 或 int a[]</code>，初始化使用 new 运算符，<code>int[] a = new int[10]</code>，其中 10 表示数组长度，不要求是常量，数组一但初始化长度就不能再修改大小。</p><ul><li>创建数字数组时，所有元素都初始化 0</li><li>创建 boolean 数组时，元素都初始化为 false</li><li>创建对象数组，元素都初始化为 null，表示还未存放对象</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;*创建一个长度为 10 的数组，可访问的范围为 0 ~ 9，索引 0 开始arr.length 可以获取数组的元素个数*&#x2F;public class IntArrayTest&#123;    public static void main(String[] args)&#123;        int[] arr &#x3D; new int[10];        &#x2F;&#x2F; 也可以创建并赋予初始值        &#x2F;&#x2F; int[] arr &#x3D; new int[] &#123;1, 4, 9, 16&#125;        &#x2F;&#x2F; int[] arr &#x3D; &#123;1, 4, 9, 16&#125;                &#x2F;&#x2F; 初始化数组        for(int i &#x3D; 0; i &lt; arr.length; i++)&#123;            arr[i] &#x3D; i * i;        &#125;                &#x2F;&#x2F; arr[i] 通过索引取值，并打印出来        for(int i &#x3D; 0; i &lt; arr.length; i++)&#123;            System.out.print(arr[i] + &quot; &quot;);        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-9-1-数组遍历"><a href="#3-9-1-数组遍历" class="headerlink" title="3.9.1 数组遍历"></a>3.9.1 数组遍历</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">import java.util.*;public class IntArrayTest&#123;    public static void main(String[] args)&#123;        int[] arr &#x3D; &#123;1, 2, 3, 4, 5, 6, 7&#125;;        &#x2F;&#x2F; 常规 for 循环        for(int i &#x3D; 0; i &lt; arr.length; i++)&#123;            System.out.print(arr[i] + &quot; &quot;);        &#125;        &#x2F;&#x2F; 增强 for 循环        for(int a: arr)&#123;            System.out.print(a + &quot; &quot;);        &#125;        &#x2F;&#x2F; Arrays.toString()        System.out.println(Arrays.toString(arr));    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-9-2-数组拷贝"><a href="#3-9-2-数组拷贝" class="headerlink" title="3.9.2 数组拷贝"></a>3.9.2 数组拷贝</h4><ul><li><code>int[] a = new int[10]; int[] b = a;</code> b 和 a 引用的是一个同一个数组</li><li>如果需要所有值拷贝到新数组则需要使用 Arrays.copyOf() 方法</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">import java.util.*;public class IntArrayTest&#123;    public static void main(String[] args)&#123;        int[] arr &#x3D; &#123;1, 2, 3, 4, 5, 6, 7&#125;;        int[] arr1 &#x3D; arr;        &#x2F;&#x2F; 两个打印为一个地址，即指向同一个数组引用，浅拷贝        System.out.println(arr);        System.out.println(arr1);        arr1[0] &#x3D; 100;        &#x2F;&#x2F; 修改 arr1 即修改 arr        System.out.println(Arrays.toString(arr));        System.out.println(Arrays.toString(arr1));        &#x2F;&#x2F; 第二个参数为新数组的长度，大于原数组就默认初始化，小于就裁剪原数组        int[] arr2 &#x3D; Arrays.copyOf(arr, 2 * arr.length);        int[] arr3 &#x3D; Arrays.copyOf(arr, 3);        System.out.println(Arrays.toString(arr2));        System.out.println(Arrays.toString(arr3));        System.out.println(arr2);        System.out.println(arr);        arr2[0] &#x3D; 100;        &#x2F;&#x2F; 两个数组没有指向一个数组，因此单个修改不印象原数组，深拷贝        System.out.println(Arrays.toString(arr));        System.out.println(Arrays.toString(arr2));    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-9-3-命令行参数"><a href="#3-9-3-命令行参数" class="headerlink" title="3.9.3 命令行参数"></a>3.9.3 命令行参数</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class ArgsTest&#123;    public static void main(String[] args)&#123;        for(int i &#x3D; 0; i &lt; args.length; i++)&#123;            System.out.println(&quot;args[&quot; + i + &quot;]: &quot; + args[i]);        &#125;    &#125;&#125;&#x2F;*$ java ArgsTest -h hello -a -bargs[0]: -hargs[1]: helloargs[2]: -aargs[3]: -b*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-9-4-数组排序"><a href="#3-9-4-数组排序" class="headerlink" title="3.9.4 数组排序"></a>3.9.4 数组排序</h4><p>可以使用 Arrays.sort()，对数组进行排序</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;* Arrays 中的常用方法1、返回数组字符串static String toString(type[] a)2、拷贝数组，length 大于 a.length 则初始化，小于则只截取 length 长度。[start, end)static type copeOf(type[] a, int length)static type copeOfRange(type[] a, int start, int end).3、使用优化的快速排序对数组进行排序static void sort(type[] a)4、二分查找，原数组必须有序,查找成功返回对应下标，查找失败返回负数 r,-r-1 则是查找元素可插入的位置static int binarySearch(type[] a, type v)static int binarySearch(type[] a, int start, int end, type v)5、填充数组static void fill(type[] a, type v)6、如果两个数组大小相同，下标相同的元素也相等，就返回 truestatic boolean equals(type[] a, type[] b)*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-9-6-多维数组"><a href="#3-9-6-多维数组" class="headerlink" title="3.9.6 多维数组"></a>3.9.6 多维数组</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 声明二维数组double[][] a;&#x2F;&#x2F; 初始化double[][] a &#x3D; nwe double[10][10];double[][] a &#x3D; &#123;    &#123;1, 2, 3&#125;,    &#123;4, 5, 6&#125;,    &#123;7, 8, 9&#125;&#125;&#x2F;&#x2F; 遍历二维数组import java.util.*;public class MultiArrayTest&#123;    public static void main(String[] args)&#123;        int[][] a &#x3D; &#123;            &#123;1, 2, 3&#125;,            &#123;4, 5, 6&#125;,            &#123;7, 8, 9&#125;        &#125;;        for(int i &#x3D; 0; i &lt; a.length; i++)&#123;            for(int j &#x3D; 0; j &lt; a[i].length; j++)&#123;                System.out.print(a[i][j] + &quot; &quot;);            &#125;            System.out.println();        &#125;        for(int[] nums: a)&#123;            for(int num: nums)&#123;                System.out.print(num + &quot; &quot;);            &#125;            System.out.println();        &#125;        System.out.println(Arrays.deepToString(a));    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-9-7-不规则数组"><a href="#3-9-7-不规则数组" class="headerlink" title="3.9.7 不规则数组"></a>3.9.7 不规则数组</h4><p>Java 实际上没有多维数组，只有一维数组。多维数组其实是“数组的数组”，a[i] 处存放的数组的引用，因此可以方便的构造“不规则”数组，即数组的每一行有不同的长度。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">import java.util.*;public class IrregularArrayTest&#123;    public static void main(String[] args)&#123;        int[][] arr &#x3D; new int[5][];        for(int i &#x3D; 0; i &lt; arr.length; i++)&#123;            arr[i] &#x3D; new int[i + 1];        &#125;        for(int[] nums: arr)&#123;            for(int num: nums)&#123;                System.out.print(num + &quot; &quot;);            &#125;            System.out.println();        &#125;    &#125;&#125;&#x2F;*0 0 0 0 0 0 0 0 0 0 0 0 0 0 0*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-对象与类"><a href="#4-对象与类" class="headerlink" title="4 对象与类"></a>4 对象与类</h2><h3 id="4-1-OOP-概述"><a href="#4-1-OOP-概述" class="headerlink" title="4.1 OOP 概述"></a>4.1 OOP 概述</h3><h4 id="4-1-1-类"><a href="#4-1-1-类" class="headerlink" title="4.1.1 类"></a>4.1.1 类</h4><p>类是构造对象的模板或蓝图，由类构造对象的过程成为创建类的实例。</p><p>封装是将数据和行为组合在一个包中，并对对象的使用者隐藏了数据的实现方式。对象中的数据称为实例域，操纵数据的过程称为方法。封装的关键在于绝不能让类中的方法直接访问其他类的实例域。</p><p>继承是扩展一个已有的类，并且新类具有所扩展类的全部属性和方法，并且新类可以提供新类的新方法和数据域。Java 中所有类都继承 Object。</p><h4 id="4-1-2-对象"><a href="#4-1-2-对象" class="headerlink" title="4.1.2 对象"></a>4.1.2 对象</h4><ul><li>对象的行为 —— 可以对对象应用哪些方法？</li><li>对象的状态 —— 当调用方法时，对象如何响应？</li><li>对象标识 —— 如何区分具有相同行为与状态的不同对象</li></ul><p>每个对象都保存着描述当前特征的信息。对象的状态必须通过调用方法实现（如果不是通过方法调用能改变对象的状态，封装则被破坏了）。作为类的实例，每个类的标识永远不同。</p><h4 id="4-1-3-识别类"><a href="#4-1-3-识别类" class="headerlink" title="4.1.3 识别类"></a>4.1.3 识别类</h4><p>识别类的简单规则时分析问题的过程中寻找名词，而方法对应着动词。在创建类的时候，哪些是名词和动词是重要的完全取决于个人的开发经验。</p><h4 id="4-1-4-类之间的关系"><a href="#4-1-4-类之间的关系" class="headerlink" title="4.1.4 类之间的关系"></a>4.1.4 类之间的关系</h4><ul><li>依赖（uses-a）：一个类的方法操纵另一个类的对象。应该尽可能将相互依赖的类减至最小</li><li>聚合（has-a）：类 A 的对象包含类 B 的对象，比如 Order 对象包含 Item 类</li><li>继承（is-a）：类 A 扩展 类 B，则类 A 不但包含从类 B 继承的方法，还会拥有一些额外的功能</li></ul><p>通常使用 UML（Unified Modeling Language）统一建模语言绘制类图，描述类之间的关系。</p><h3 id="4-2-预定义类"><a href="#4-2-预定义类" class="headerlink" title="4.2 预定义类"></a>4.2 预定义类</h3><h4 id="4-2-1-对象与对象变量"><a href="#4-2-1-对象与对象变量" class="headerlink" title="4.2.1 对象与对象变量"></a>4.2.1 对象与对象变量</h4><p>使用对象之前，必须构造对象并指定其初始状态。通过构造器构造实例，构造器是一个特殊方法，用来构造并初始化对象。</p><p>构造器的名字应该与类名相同，构造对象需要在构造器前加上 new 操作符。构造的对象可以赋给变量对此使用，声明一个类变量时如果没有初始化对象则无法调用方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; new 出来一个 Date 对象new Date();&#x2F;&#x2F; 调用方法new Date().toString();&#x2F;&#x2F; 赋给一个变量多次使用Date date &#x3D; new Date();&#x2F;&#x2F; 声明 Date 对象变量Date date;date.toString(); &#x2F;&#x2F; error date 变量没有引用对象，无法调用方法&#x2F;&#x2F; 对象变量仅仅是引用一个对象，对象变量可以设为 null，表示没有引用任何对象date &#x3D; null;&#x2F;&#x2F; 局部变量不会自动初始化为 null，必须调用 new 或手动设置为 null 进行初始化<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-2-LocalDate-类"><a href="#4-2-2-LocalDate-类" class="headerlink" title="4.2.2 LocalDate 类"></a>4.2.2 LocalDate 类</h4><p>LocalDate 类采用熟悉的日历表示法。</p><ul><li>更改器方法，调用该方法对象状态会发生改变</li><li>访问器方法，只访问对象而不修改对象的方法</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;* LocalDate 1、构造一个表示当前日期的对象static LocalTime now()2、构造一个给定日期的对象static LocalTime of(int year, int month, int day)3、获取日期的年月日int getYear()int getMonthValue()int getDayOfMonth()4、获取当前星期几，使用 getValue 的到 1 ~ 7 的数字DayOfWeek getDayOfWeek()5、日期加减LocalDate plusDays(int n)LocalDate minusDays(int n)*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">import java.time.*;public class CalendarTest&#123;    public static void main(String[] args)&#123;        LocalDate date &#x3D; LocalDate.now();        int month &#x3D; date.getMonthValue();        int day &#x3D; date.getDayOfMonth();        date &#x3D; date.minusDays(day - 1);        DayOfWeek weekday &#x3D; date.getDayOfWeek();        int value &#x3D; weekday.getValue();        System.out.println(&quot;Mon Tue Wed Thu Fri Sat Sun&quot;);        for(int i &#x3D; 1; i &lt; value; i++)&#123;            System.out.print(&quot;    &quot;);        &#125;        while(date.getMonthValue() &#x3D;&#x3D; month)&#123;            System.out.printf(&quot;%3d&quot;, date.getDayOfMonth());            if(date.getDayOfMonth() &#x3D;&#x3D; day)&#123;                System.out.print(&quot;*&quot;);            &#125;else&#123;                System.out.print(&quot; &quot;);            &#125;            date &#x3D; date.plusDays(1);            if(date.getDayOfWeek().getValue() &#x3D;&#x3D; 1)&#123;                System.out.println();            &#125;        &#125;        if(date.getDayOfWeek().getValue() !&#x3D; 1)&#123;            System.out.println();        &#125;    &#125;&#125;&#x2F;*$ java CalendarTest      Mon Tue Wed Thu Fri Sat Sun                  1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19* 20  21  22  23  24  25  26  27  28  29  30  31 *&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-自定义类"><a href="#4-3-自定义类" class="headerlink" title="4.3 自定义类"></a>4.3 自定义类</h3><h4 id="4-3-1-Employee-类"><a href="#4-3-1-Employee-类" class="headerlink" title="4.3.1 Employee 类"></a>4.3.1 Employee 类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">import java.time.*;public class Employee&#123;    private String name;    private double salary;    private LocalDate hireDay;    public Employee()&#123;    &#125;    public Employee(String n, double s, int year, int month, int day)&#123;        name &#x3D; n;        salary &#x3D; s;        hireDay &#x3D; LocalDate.of(year, month, day);    &#125;    public String getName()&#123;        return name;    &#125;    public double getSalary()&#123;        return salary;    &#125;    public LocalDate getHireDay()&#123;        return hireDay;    &#125;    public void raiseSalary(double byPercent)&#123;        double raise &#x3D; salary * byPercent &#x2F; 100;        salary +&#x3D; raise;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类的所有方法都标记为 public，意味着任何类的任何方法都能调用这个方法。</p><p>三个实例域都用 private 修饰，意味着只有 Employee 自身能访问这些实例域，其他类方法不能。强烈建议实例域标记为 private。</p><h4 id="4-3-2-构造器"><a href="#4-3-2-构造器" class="headerlink" title="4.3.2 构造器"></a>4.3.2 构造器</h4><p>构造器总是伴随着 new 操作符被调用，而不能对一个已经存在的对象调用构造器到达重新设置实例域的目的。</p><ul><li>构造器与类同名</li><li>每个类可以有一个以上的构造器</li><li>构造器可以有 0 个、1 个或多个参数</li><li>构造器没有返回值</li><li>构造器总是伴随着 new 操作符一起调用</li><li>类默认会有一个无参数构造器方法，当定义了有参数的构造器方法，默认的无参构造器就无了，需要显式定义</li></ul><h4 id="4-3-3-隐式参数和显式参数"><a href="#4-3-3-隐式参数和显式参数" class="headerlink" title="4.3.3 隐式参数和显式参数"></a>4.3.3 隐式参数和显式参数</h4><p>在每一个方法中，关键字 this 代表隐式参数，代表当前对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public void raiseSalary(double byPercent)&#123;    double raise &#x3D; this.salary * byPercent &#x2F; 100;    this.salary +&#x3D; raise;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-3-4-封装的优点"><a href="#4-3-4-封装的优点" class="headerlink" title="4.3.4 封装的优点"></a>4.3.4 封装的优点</h4><p>实例域进行私有化，提供域访问器和域更改器方法有两个优点，一除了类的方法之外，不会影响其他代码。二更改器方法能执行错误检查。不要返回引用可变的对象的访问器方法，如果需要可变对象引用应该克隆。</p><p>不要编写返回可变对象引用的访问器方法。若需要返回一个可变对象的引用，应将其克隆返回。</p><h4 id="4-3-5-私有方法"><a href="#4-3-5-私有方法" class="headerlink" title="4.3.5 私有方法"></a>4.3.5 私有方法</h4><p>将方法的修饰为 private，外部则无法调用，类的辅助方法通常不需要在外部调用声明为私有方法</p><h4 id="4-3-6-final-实例域"><a href="#4-3-6-final-实例域" class="headerlink" title="4.3.6 final 实例域"></a>4.3.6 final 实例域</h4><p>将实例域定义为 final，构建对象时必须初始化这样的域，且后面的操作无法修改该域。</p><h3 id="4-4-静态域和静态方法"><a href="#4-4-静态域和静态方法" class="headerlink" title="4.4 静态域和静态方法"></a>4.4 静态域和静态方法</h3><h4 id="4-4-1-静态域"><a href="#4-4-1-静态域" class="headerlink" title="4.4.1 静态域"></a>4.4.1 静态域</h4><p>如果实例域定义为 static，那么每个类只有一个这样的域，每个对象的所有实例域都有自己的一份拷贝。它属于类，不属于任何对象。</p><h4 id="4-4-2-静态常量"><a href="#4-4-2-静态常量" class="headerlink" title="4.4.2 静态常量"></a>4.4.2 静态常量</h4><p>static final 修饰，例如 Math.PI，System.out。</p><h4 id="4-4-3-静态方法"><a href="#4-4-3-静态方法" class="headerlink" title="4.4.3 静态方法"></a>4.4.3 静态方法</h4><p>静态方法是一种不能向对象实施操作的方法。建议使用类名调用静态方法不造成混淆。以下两种情况使用静态方法。</p><ul><li>一个方法不需要访问对象状态，其所需参数都是以通过显式参数提供</li><li>一个方法只需要访问类的静态域</li></ul><h4 id="4-4-4-工厂方法"><a href="#4-4-4-工厂方法" class="headerlink" title="4.4.4 工厂方法"></a>4.4.4 工厂方法</h4><p>静态工厂方法，用于构造不同的对象。</p><h4 id="4-4-5-main-方法"><a href="#4-4-5-main-方法" class="headerlink" title="4.4.5 main 方法"></a>4.4.5 main 方法</h4><p>main 方法不对任何对象进行操作，静态 main 方法将执行并创建程序所需要的对象。main 可用来做单元测试。</p><h3 id="4-5-方法参数"><a href="#4-5-方法参数" class="headerlink" title="4.5 方法参数"></a>4.5 方法参数</h3><p>Java 中，总是采用按值调用。方法得到的是所有参数的拷贝。</p><ul><li>一个方法不能修改一个基本数据类型的参数</li><li>一个方法可以改变一个对象参数的状态</li><li>一个方法不能让对象参数引用一个新的对象</li></ul><h3 id="4-6-对象构造"><a href="#4-6-对象构造" class="headerlink" title="4.6 对象构造"></a>4.6 对象构造</h3><h4 id="4-6-1-重载"><a href="#4-6-1-重载" class="headerlink" title="4.6.1 重载"></a>4.6.1 重载</h4><p>多个方法，相同的名字、不同的参数，便产生了重载。要完整的描述一个方法，需要指定方法名和参数类型，返回类型不是其中的一部分，因此不能有两个名字相同、参数类型相同但返回类型不同的方法。</p><h4 id="4-6-2-默认域初始化"><a href="#4-6-2-默认域初始化" class="headerlink" title="4.6.2 默认域初始化"></a>4.6.2 默认域初始化</h4><p>如果构造器中没有给实例域初始化，则自动初始化：数值为 0、布尔为 false、对象引用为 null。</p><h4 id="4-6-3-显式域初始化"><a href="#4-6-3-显式域初始化" class="headerlink" title="4.6.3 显式域初始化"></a>4.6.3 显式域初始化</h4><p>在实例域定义时就给其赋一个值</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">class Employee&#123;    private String name &#x3D; &quot;&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="4-6-4-this-使用"><a href="#4-6-4-this-使用" class="headerlink" title="4.6.4 this 使用"></a>4.6.4 this 使用</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 参数名与实例域相同public Employee(String name, double salary)&#123;    this.name &#x3D; name;    this.salary &#x3D; salary;&#125;&#x2F;&#x2F; 调用另一个构造器public Employee(double salary)&#123;    this(&quot;Employee #&quot; + nextId, salary);    nextId++;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-6-5-初始化块"><a href="#4-6-5-初始化块" class="headerlink" title="4.6.5 初始化块"></a>4.6.5 初始化块</h4><p>首先执行初始化块，然后再运行构造器。</p><p>静态初始化块，在类第一次加载的时候，会进行静态域的初始化。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">class Employee&#123;    private static int nextId;    private int id;    private String name &#x3D; &quot;&quot;;    private double salary;    static&#123;        System.out.println(&quot;静态初始化代码块&quot;);        nextId &#x3D; new Random().nextInt(10000);    &#125;    &#123;        System.out.println(&quot;初始化代码块&quot;);        id &#x3D; nextId;        nextId++;    &#125;    public Employee(String name, double salary)&#123;        System.out.println(name + &quot;两个参数的构造方法&quot;);        this.name &#x3D; name;        this.salary &#x3D; salary;    &#125;    public Employee(double salary)&#123;        this(&quot;Employee #&quot; + nextId, salary);    &#125;    public Employee()&#123;&#125;    public String getName()&#123;        return name;    &#125;    public double getSalary()&#123;        return salary;    &#125;    public int getId()&#123;        return id;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-7-包"><a href="#4-7-包" class="headerlink" title="4.7 包"></a>4.7 包</h3><h4 id="4-7-1-类的导入"><a href="#4-7-1-类的导入" class="headerlink" title="4.7.1 类的导入"></a>4.7.1 类的导入</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; importimport java.util.*;&#x2F;&#x2F; 只能使用 * 导入 一个包，不能 *.*&#x2F;&#x2F; 命名冲突的问题，可以导入实际使用的确定包import java.util.*;import java.sql.*;import java.util.Date;&#x2F;&#x2F; 也可以使用完全包名new java.util.Date();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-7-2-静态导入"><a href="#4-7-2-静态导入" class="headerlink" title="4.7.2 静态导入"></a>4.7.2 静态导入</h4><p>导入静态方法和静态字段</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">import static java.lang.Math.*;public class StaticImportTest&#123;    public static void main(String[] args)&#123;        int a &#x3D; 10;        System.out.println(pow(a, 2));    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-7-3-组织类"><a href="#4-7-3-组织类" class="headerlink" title="4.7.3 组织类"></a>4.7.3 组织类</h4><p> 类文件开头，写上 <code>package 包名;</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">javac top&#x2F;reajason&#x2F;PayrollApp.javajava top.reajason.PayrollApp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-8-类路径"><a href="#4-8-类路径" class="headerlink" title="4.8 类路径"></a>4.8 类路径</h3><p>unix：<code>/home/user/classdir:.:/home/user/archives/archive.jar</code></p><p>windows：<code>c:\classdir;.;c:\archives\archive.jar</code></p><p>类路径所列出的目录和归档文件是搜寻类的起始点，默认类路径包含 . (当前目录)。</p><p>Java 6 开始可在 JAR 文件目录指定通配符，例如（archives 中所有 JAR 文件都包含到类路径中）：</p><p>windows：<code>c:\classdir;.;c:\archives\*</code></p><p>java.lang 包被默认导入。</p><h4 id="4-8-1-设置类路径"><a href="#4-8-1-设置类路径" class="headerlink" title="4.8.1 设置类路径"></a>4.8.1 设置类路径</h4><p><code>java -classpath /home/user/classdir:.:/home/user/archives/archive.jar MyApp</code></p><p>不要将 CLASSPATH 设置成全局变量。</p><h3 id="4-9-文档注释"><a href="#4-9-文档注释" class="headerlink" title="4.9 文档注释"></a>4.9 文档注释</h3><p>javadoc 能将源文件生成一个 HTML 文档。</p><p>javadoc 将在以下中抽取信息：</p><ul><li>包</li><li>公有类与接口</li><li>公有的和受保护的构造器及方法</li><li>共有的和受保护的域</li></ul><h4 id="4-9-1-类注释"><a href="#4-9-1-类注释" class="headerlink" title="4.9.1 类注释"></a>4.9.1 类注释</h4><p>类注释必须放在 import 语句之后，类定义之前。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;** * 类注释 *&#x2F;public class Card&#123;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-9-2-方法注释"><a href="#4-9-2-方法注释" class="headerlink" title="4.9.2 方法注释"></a>4.9.2 方法注释</h4><p>每一个方法注释必须放在所描述的方法之前。</p><ul><li>@param 变量描述，可占据多行，一个方法的所有 @param 标记必须放在一起</li><li>@return 描述，可占据多行</li><li>@throws 类描述，表示方法可能抛出的异常</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;** * 增加雇工的工资 * @param byPercent 为 10 则是增长 10% * @return 返回增加后的工资 *&#x2F;public double raiseSalary(double byPercent)&#123;    double raise &#x3D; salary * byPercent &#x2F; 100;    salary +&#x3D; raise;    return raise;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-9-3-域注释"><a href="#4-9-3-域注释" class="headerlink" title="4.9.3 域注释"></a>4.9.3 域注释</h4><p>只建立文档需要对公共域（通常指静态常量）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;** * 利率 *&#x2F;public static final int RATES &#x3D; 5;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-9-4-通用注释"><a href="#4-9-4-通用注释" class="headerlink" title="4.9.4 通用注释"></a>4.9.4 通用注释</h4><ul><li>@author 姓名：可以使用多个</li><li>@version 文本：版本描述</li><li>@since 文本：引入特性的描述</li><li>@deprecated 文本：不再使用的注释，并给出建议</li><li>@see 引用：可以添加多个，但必须放在一起</li></ul><h4 id="4-9-6-包与概述注释"><a href="#4-9-6-包与概述注释" class="headerlink" title="4.9.6 包与概述注释"></a>4.9.6 包与概述注释</h4><p>包注释的两种方式（在包目录添加一个单独的文件）：</p><ol><li>提供一个 package.html。在标记 &lt;body&gt;&lt;&#x2F;body&gt; 之间的所有文本都会抽取出来。</li><li>提供一个 package-info.java 文件。文件开头即写文档注释后面是 package 语句。</li></ol><p>概述：</p><p>创建一个名为 overview.html 文件，这个文件位于所有源文件的父目录中。标记 &lt;body&gt;&lt;&#x2F;body&gt; 之间的所有文本都会抽取出来。</p><h4 id="4-9-7-注释抽取"><a href="#4-9-7-注释抽取" class="headerlink" title="4.9.7 注释抽取"></a>4.9.7 注释抽取</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">javadoc -d docDirectory nameOfPackagejavadoc -d docDirectory nameOfPackage1 nameOfPackage2javadoc -d docDirectory *.java<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-10-类设计技巧"><a href="#4-10-类设计技巧" class="headerlink" title="4.10 类设计技巧"></a>4.10 类设计技巧</h3><ol><li>一定要保证数据私有</li><li>一定要对数据初始化，手动初始化</li><li>不要在类中使用过多的基本类型</li><li>不是所有的域都需要独立的域访问器和域更改器</li><li>将职责过多的类进行分解</li><li>类名和方法名能够体现它们的职责</li><li>优先使用不可变的类</li></ol><h2 id="5-继承"><a href="#5-继承" class="headerlink" title="5 继承"></a>5 继承</h2><h3 id="5-1-类、超类和子类"><a href="#5-1-类、超类和子类" class="headerlink" title="5.1 类、超类和子类"></a>5.1 类、超类和子类</h3><h4 id="5-1-1-定义子类"><a href="#5-1-1-定义子类" class="headerlink" title="5.1.1 定义子类"></a>5.1.1 定义子类</h4><p>关键字 extends 表示继承，超类和子类是 Java 程序员最常用的两个术语。子类比超类拥有更多的功能。将通用方法放在超类中，而将特殊扩展方法放在子类中。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Manager extends Employee&#123;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="5-1-2-覆盖方法"><a href="#5-1-2-覆盖方法" class="headerlink" title="5.1.2 覆盖方法"></a>5.1.2 覆盖方法</h4><p>子类可覆盖超类的方法（同名，同参数），子类不能直接访问超类的私有域，可通过 super 关键字调用父类的方法。super 不是一个对象的引用，只是指示编译器调用超类方法的特殊关键字。</p><h4 id="5-1-3-子类构造器"><a href="#5-1-3-子类构造器" class="headerlink" title="5.1.3 子类构造器"></a>5.1.3 子类构造器</h4><p>使用 super 调用超类构造器的语句必须放在子类构造器的第一条语句，如果超类没有不带参数的构造器，子类又没有显示调用超类的其他构造器，编译器则会报错。</p><p>一个对象变量可以指示多个实际类型的现象被称为多态，在运行时能够自动地选择调用哪个方法的现象称为动态绑定。</p><h4 id="5-1-4-继承层次"><a href="#5-1-4-继承层次" class="headerlink" title="5.1.4 继承层次"></a>5.1.4 继承层次</h4><p>由一个公共超类派生出来的所有类的集合称为继承层次，在继承层次中，某个特定类到其祖先的路径称为该类的继承链。Java 不支持多继承。</p><h4 id="5-1-5-多态"><a href="#5-1-5-多态" class="headerlink" title="5.1.5 多态"></a>5.1.5 多态</h4><p>继承关系 is-a 的另一表述是置换法则，程序中出现超类对象的任何地方都可以用子类对象置换。Java 中，对象变量是多态的。子类数组的引用可以转换成超类数组的引用，而无需强制类型转换。</p><p>如果方法或构造器由 private 或 static 或 final 修饰，那么编译器能准确知道调用哪个方法，这种调用方式称为静态绑定。由于动态绑定的机制，运行时，调用方法先查询当前类对象的方法，然后查询所继承超类的方法。</p><h4 id="5-1-6-final-类和方法"><a href="#5-1-6-final-类和方法" class="headerlink" title="5.1.6 final 类和方法"></a>5.1.6 final 类和方法</h4><p>用 final 修饰的类无法被继承，用 final 修饰的方法，子类无法覆盖。声明为 final 的主要目的是确保它们在子类中不会改变语义。</p><h4 id="5-1-7-强制类型转换"><a href="#5-1-7-强制类型转换" class="headerlink" title="5.1.7 强制类型转换"></a>5.1.7 强制类型转换</h4><ul><li>只能在继承层次内进行类型转换</li><li>在将超类转换成子类之前，应该使用 instanceof 进行检查</li></ul><p>一般情况下应该尽量少用类型转换和 instanceof 运算符</p><h4 id="5-1-8-抽象类"><a href="#5-1-8-抽象类" class="headerlink" title="5.1.8 抽象类"></a>5.1.8 抽象类</h4><p>使用关键字 abstract 声明一个抽象类和抽象方法。为了程序的清晰度，包含一个或多个抽象方法的类本身必须被声明为抽象的。除了抽象方法外，抽象类还可以包含字段和具体方法。</p><ul><li>类即使不含抽象方法，也能声明为抽象类</li><li>抽象类不能实例化</li><li>可定义抽象类的对象变量指向非抽象子类的对象</li></ul><p>扩展抽象类的两种选择：</p><ul><li>子类中任由部分抽象方法，即子类仍为抽象类</li><li>子类定义全部的抽象方法，子类不再是抽象类</li></ul><h4 id="5-1-9-受保护访问"><a href="#5-1-9-受保护访问" class="headerlink" title="5.1.9 受保护访问"></a>5.1.9 受保护访问</h4><p>超类中的某些方法允许被子类访问，或允许子类的方法访问超类的某个域，可以将方法或域声明为 protected。</p><ul><li>private —— 仅对本类可见</li><li>public —— 对所有类可见</li><li>protected —— 对本包和所有子类可见</li><li>默认 —— 对本包可见</li></ul><h3 id="5-2-Object"><a href="#5-2-Object" class="headerlink" title="5.2 Object"></a>5.2 Object</h3><p>Object 是 Java 中所有类的超类。</p><h4 id="5-2-1-equals-方法"><a href="#5-2-1-equals-方法" class="headerlink" title="5.2.1 equals 方法"></a>5.2.1 equals 方法</h4><p>equals 方法是用于检测一个对象是否等于另一个对象。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; Objects.equals(a, b), a，b 都为 null 返回 true，某一个为 null 返回 falsepublic class Employee&#123;    ...    public boolean equals(Object otherObject)&#123;        if(this &#x3D;&#x3D; otherObject)&#123;            return true;        &#125;                if(otherObject &#x3D;&#x3D; null)&#123;            return false;        &#125;                if(getClass() !&#x3D; otherObject.getClass())&#123;            return false;        &#125;                Employee other &#x3D; (Employee)otherObject;        return Objects.euqals(name, other.name).            &amp;&amp; salary &#x3D;&#x3D; other.salary            &amp;&amp; Objects.equals(hireDay, other.hireDay);    &#125;    &#125;public class Manager extends Employee&#123;    ...    public boolean equals(Object otherObject)&#123;        &#x2F;&#x2F; 子类先调用超类的 equals 方法检测        if(!super.equals(otherObject))&#123;            return false;        &#125;        Manager other &#x3D; (Manager)otherObject;        return bonus &#x3D;&#x3D; other.bonus;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Java 语言规范要求 equals 方法具有以下的特性：</p><ol><li>自反性：对于任意非空引用 x，x.equals(x) 返回 true</li><li>对称性：对于任何引用 x、y，y.equals(x) 返回 true，x.equals(y) 也要返回 true</li><li>传递性：对于任何引用 x、y、z，x.equals(y) 返回 true，y.equals(z) 返回 true，那么 x.equals(z) 也要返回 true</li><li>一致性：</li><li>对于任意非空引用 x, x.equals(null) 返回 false</li></ol><p>编写一个完美的 equals 方法的建议：</p><ol><li><p>显式参数命名为 otherObject</p></li><li><p>检测 this 与 otherObject 是否引用同一个对象</p><p><code>if(this == otherObject) return true;</code></p></li><li><p>检测 otherObject 是否为 null</p><p><code>if(otherObject == null) return false;</code></p></li><li><p>比较 this 与 otherObject 是否是同一个类</p><ul><li><p>如果 equals 的语义在每个子类都有改变，使用 getClass 检测</p><p><code>if(getClass() != otherObject.getClass() return false;</code></p></li><li><p>如果所有子类都使用统一的语义，就是用 instanceof 检测</p><p><code>if(!(otherObject instanceof ClassName)) return false;</code></p></li></ul></li><li><p>将 otherObject 转换为相应的类类型变量</p><p><code>ClassName other = (ClassName)otherObject;</code></p></li><li><p>将所需要比较的域进行比较，基础类型使用 &#x3D;&#x3D;，对象引用使用 Objects.equals()</p><p><code>return field1 == other.field1 &amp;&amp; Objects.equals(field2, other.field2) &amp;&amp; ...;</code></p></li></ol><p>子类如果重新定义 equals 方法，就要先调用 super.equals(OtherObject) 检测</p><h4 id="5-2-2-hashCode-方法"><a href="#5-2-2-hashCode-方法" class="headerlink" title="5.2.2 hashCode 方法"></a>5.2.2 hashCode 方法</h4><p>散列码是由对象导出的一个整型值。如果重新定义了 equals 方法，就必须重新定义 hashCode 方法，以便将对象插入到散列表中。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; Objects.hash(Object... objects) 返回由提供对象的散列码组合而得到的散列码&#x2F;&#x2F; Objects.hashCode(Object a) 如果 a 为 null 返回 0，否则返回 a.hashCode()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="5-2-3-toString-方法"><a href="#5-2-3-toString-方法" class="headerlink" title="5.2.3 toString 方法"></a>5.2.3 toString 方法</h4><p>它用于返回对象值的字符串。只要对象与一个字符串通过操作符 + 连接起来，Java 编译器就自动调用 toString 方法。Object 类定义的 toString 方法，用来打印对象所属的类名和散列码。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package equals;import java.time.*;import java.util.Objects;public class Employee&#123;    private String name;    private double salary;    private LocalDate hireDay;    public Employee(String name, double salary, int year, int month, int day)&#123;        this.name &#x3D; name;        this.salary &#x3D; salary;        hireDay &#x3D; LocalDate.of(year, month, day);    &#125;    public String getName()&#123;        return name;    &#125;    public double getSalary()&#123;        return salary;    &#125;    public LocalDate getHireDya()&#123;        return hireDay;    &#125;    public void raiseSalary(double byPercent)&#123;        double raise &#x3D; salary * byPercent &#x2F; 100;        salary +&#x3D; raise;    &#125;    public boolean equals(Object otherObject)&#123;        if(this &#x3D;&#x3D; otherObject)&#123;            return true;        &#125;        if(otherObject &#x3D;&#x3D; null)&#123;            return false;        &#125;        if(getClass() !&#x3D; otherObject.getClass())&#123;            return false;        &#125;        Employee other &#x3D; (Employee)otherObject;        return Objects.equals(name, other.name) &amp;&amp; salary &#x3D;&#x3D; other.salary            &amp;&amp; Objects.equals(hireDay, other.hireDay);    &#125;    public int hashCode()&#123;        return Objects.hash(name, salary, hireDay);    &#125;    public String toString()&#123;        return getClass().getName() + &quot;[name&#x3D;&quot; + name + &quot;,salary&#x3D;&quot; + salary            + &quot;,hireDay&#x3D;&quot; + hireDay + &quot;]&quot;;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">package equals;public class Manager extends Employee&#123;    private double bonus;    public Manager(String name, double salary, int year, int month, int day)&#123;        super(name, salary, year, month, day);        bonus &#x3D; 0;    &#125;    public double getSalary()&#123;        double baseSalary &#x3D; super.getSalary();        return baseSalary + bonus;    &#125;    public void setBonus(double bonus)&#123;        this.bonus &#x3D; bonus;    &#125;    public boolean equals(Object otherObject)&#123;        if(!(super.equals(otherObject)))&#123;            return false;        &#125;        Manager other &#x3D; (Manager)otherObject;        return bonus &#x3D;&#x3D; other.bonus;    &#125;    public int hashCode()&#123;        return super.hashCode() + 17 * Double.hashCode(bonus);    &#125;    public String toString()&#123;        return super.toString() + &quot;[bonus&#x3D;&quot; + bonus + &quot;]&quot;;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-3-泛型数组列表"><a href="#5-3-泛型数组列表" class="headerlink" title="5.3 泛型数组列表"></a>5.3 泛型数组列表</h3><p>ArrayList 是一个采用类型参数的泛型类，为了指定数组列表中保存的类型需要使用一对尖括号将类名括起来加在后面，例如 <code>ArrayList&lt;Employee&gt;</code>。ArrayList 是一个动态扩容数组。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;*1、构造一个空数组列表ArrayList&lt;E&gt;()2、用指定容量构造一个空数组列表ArrayList&lt;E&gt;(int initialCapacity)3、在数组列表尾端添加一个元素，永远返回 trueboolean add(E obj)4、返回存储在数组列表中当前元素数量int size()5、将数组列表的存储容量削减到当前尺寸void trimToSize()6、设置指定位置的元素值void set(int index, E obj)7、获取指定位置的元素值E get(int index)8、指定位置插入元素，后面的元素向后移void add(int index, E obj)9、删除指定位置元素并返回，后面的元素向前移E remove(int index)*&#x2F;import java.util.*;public class ArrayListTest&#123;    public static void main(String[] args)&#123;        ArrayList&lt;Employee&gt; staff &#x3D; new ArrayList&lt;&gt;();        staff.add(new Employee(&quot;Carl&quot;, 75000, 1987, 12, 15));        staff.add(new Employee(&quot;Harry&quot;, 50000, 1987, 12, 15));        staff.add(new Employee(&quot;Tony&quot;, 40000, 1990, 3, 15));        for(Employee e : staff)&#123;            System.out.println(e);        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-4-对象包装器"><a href="#5-4-对象包装器" class="headerlink" title="5.4 对象包装器"></a>5.4 对象包装器</h3><p>对象包装器是不可变的，一旦创建就无法改变其中的值，而且对象包装类是 final，不允许有子类。Integer 类对应的基本类型是 int，尖括号中的类型参数不允许是基本类型。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">ArrayList&lt;Integer&gt; list &#x3D; new ArrayList&lt;&gt;();&#x2F;&#x2F; 编译器会自动翻译为 list.add(Integer.valueOf(3))，称为自动装箱list.add(3);&#x2F;&#x2F; 编译器会自动翻译为 list.get(i).intValue()，称为自动拆箱int n &#x3D; list.get(i)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自动装箱规范要求 boolean、byte、char &lt;&#x3D; 127，介于 -128 ~ 127 之间的 short 和 int 被包装到固定的对象中（常量池？）。</p><p>装箱和拆箱是编译器要做的事情，而不是虚拟机。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;* Integer 常用 API，其他包装类也实现了相应的方法1、以 int 类型返回 Integer 对象的值int intValue()2、返回数值类型的字符串，默认十进制，也可指定进制static String toString(int i)static String toString(int i, int radix)3、返回字符串 s 的整型数值static int parseInt(String s)static int parseInt(String s, int radix)4、将 s 表示的整型数值进行初始化乘一个新的 Integer 对象static Integer valueOf(String s)static Integer valueOf(String s, int radix)*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-5-可变数量参数"><a href="#5-5-可变数量参数" class="headerlink" title="5.5 可变数量参数"></a>5.5 可变数量参数</h3><p><code>Object... 与 Object[] 完全一样 </code>，因此 main 方法可以改写为<code>public static void main(String... args)</code></p><h3 id="5-6-枚举类"><a href="#5-6-枚举类" class="headerlink" title="5.6 枚举类"></a>5.6 枚举类</h3><p>在比较枚举类型的值时，永远不需要调用 equals，直接使用 &#x3D;&#x3D; 即可。枚举类型中可以添加构造器、方法和域。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;*1、返回指定名字、给定类的枚举常量static Enum valueOf(Class enumClass, String name)2、返回枚举常量名String toString()3、返回枚举常量在 enum 声明中的位置，从 0 开始int ordinal()4、如果枚举常量在 other 之前，返回负值，相等返回 0，之后返回正值int caompareTo(E other)*&#x2F;public class EnumTest&#123;    public static void main(String... args)&#123;        Size size &#x3D; Enum.valueOf(Size.class, &quot;SMALL&quot;);        System.out.println(size);        System.out.println(size.getAbbreviation());        System.out.println(size &#x3D;&#x3D; Size.SMALL);    &#125;&#125;enum Size&#123;    SMALL(&quot;S&quot;), MEDIUM(&quot;M&quot;), LARGE(&quot;L&quot;);    private Size(String abbreviation)&#123;        this.abbreviation &#x3D; abbreviation;    &#125;    public String getAbbreviation()&#123;        return abbreviation;    &#125;    private String abbreviation;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-7-反射"><a href="#5-7-反射" class="headerlink" title="5.7 反射"></a>5.7 反射</h3><p>能够分析类能力的程序称为反射，反射机制可以用来：</p><ul><li>在运行时分析类的能力</li><li>在运行时查看对象</li><li>实现通用数组操作代码</li><li>利用 Method 对象</li></ul><h4 id="5-7-1-Class-类"><a href="#5-7-1-Class-类" class="headerlink" title="5.7.1 Class 类"></a>5.7.1 Class 类</h4><p>在运行期间，Java 运行时系统始终为所有对象维护一个称为运行时的类型标识，保存这个这些信息的类被称为 CLass。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">import java.util.*;public class ClassTest&#123;    public static void main(String[] args) throws Exception&#123;                Integer i &#x3D; 10;        &#x2F;&#x2F; getClass()        Class cl1 &#x3D; i.getClass();        String className &#x3D; &quot;java.lang.Integer&quot;;        &#x2F;&#x2F; Class.forName()        Class cl2 &#x3D; Class.forName(className);        &#x2F;&#x2F; 类.class        Class cl3 &#x3D; Integer.class;        System.out.println(cl1);        System.out.println(cl2);        System.out.println(cl3);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-7-2-分析类的能力"><a href="#5-7-2-分析类的能力" class="headerlink" title="5.7.2 分析类的能力"></a>5.7.2 分析类的能力</h4><p>java.lang.relect 包中有三个类 Field、Method 和 Constructor 分别用于描述类的字段、方法和构造器。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;* Class1、获取类的 Field 对象数组Field[] getFields() &#x2F;&#x2F; 获取这个类或其超类的公共字段Field getField(String name)Field[] getDeclareFields() &#x2F;&#x2F; 获取这个类的全部字段Field getDeclareField(String name)2、获取类的 Method 对象数组Method[] getMethods()Method[] getDeclareMethods()3、获取类包名String getPackageName()4、获取数组类型Class getComponentType()*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;* Field\Method\Constructor1、返回当前对象所在的 Class 对象Class getDelcaringClass()2、返回修饰符int getModifiers()String getModifiers().toString()3、返回名字String getName()4、获取方法参数Class[] getParameterTypes()5、获取 Method 对象返回值类型Class getReturnType()*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问私有字段、方法、构造器时，需要设置 setAccessible 为 true。</p><h4 id="5-7-3-反射使用"><a href="#5-7-3-反射使用" class="headerlink" title="5.7.3 反射使用"></a>5.7.3 反射使用</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 1、通过 forName 获取 Class 对象Class clazz &#x3D; Class.forName(&quot;top.reajason.test.Student&quot;);&#x2F;&#x2F; 获取公共无参构造 getDeclaredConstructor() 能获取到私有的Constructor constructor1 &#x3D; clazz.getConstructor();System.out.println(constructor1);&#x2F;&#x2F; 获取公共有参构造 getDeclaredConstructors() 能获取到私有的Constructor constructor2 &#x3D; clazz.getConstructor(String.class, int.class);System.out.println(constructor2);&#x2F;&#x2F; 获取所有公共构造方法的数组(无法获取私有的) getDeclaredConstructors() 能获取到私有的Constructor[] constructors &#x3D; clazz.getConstructors();for (Constructor constructor : constructors) &#123;    System.out.println(constructor);&#125;&#x2F;&#x2F; 创建 Student 实例Student s1 &#x3D; (Student) constructor1.newInstance();Student s2 &#x3D; (Student) constructor2.newInstance(&quot;你好&quot;, 13);System.out.println(s2); &#x2F;&#x2F; Student&#123;name&#x3D;&#39;你好&#39;, age&#x3D;13&#125;&#x2F;&#x2F; 使用私有化需要取消访问检查（暴力反射）constructor.setAccessible(true);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;*Field[] getFields()  获取所有公共成员变量对象的数组Field[] getDeclaredFields(); 获取所有成员变量对象的数组Field getField(String name); 获取单个公共的成员变量对象Field getDeclaredField(String name); 获取单个成员变量对象int getModifuers(); 获取修饰符值getType(); 属性的类型*&#x2F;&#x2F;&#x2F; void set(Object obj, Object value) 给指定对象的成员变量赋值&#x2F;&#x2F; Object get(Object obj) 获取指定对象的 Field 的值Class clazz &#x3D; Class.forName(&quot;top.reajason.test.Student&quot;);Constructor constructor &#x3D; clazz.getConstructor(String.class, int.class);Student s1 &#x3D; (Student) constructor.newInstance(&quot;xiaobai&quot;, 23);Field name &#x3D; clazz.getDeclaredField(&quot;name&quot;);name.setAccessible(true);System.out.println(name.get(s1)); &#x2F;&#x2F; xiaobainame.set(s1, &quot;nitama&quot;);System.out.println(name.get(s1)); &#x2F;&#x2F; nitama<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;*Method[] getMethods() 获取所有公共成员方法对象的数组，包括继承的Method[] hetDeclaredMethods() 获取所有成员方法对象的数组，不包含继承的Method getMethod(String name, Class&lt;?&gt;...parameterTypes)  获取单个公共成员方法对象Method hetDeclaredMethod(String name, Class&lt;?&gt;...parameterTypes) 获取单个成员方法对象getName(); 获取方法名称getModifiers(); 获取修饰符值getReturnType(); 获取返回类型getParameterTypes(); 获取参数类型数组*&#x2F;&#x2F;&#x2F; Object invoke(Object obj, Object...args) 调用方法Class clazz &#x3D; Class.forName(&quot;top.reajason.test.Student&quot;);Student s1 &#x3D; (Student) clazz.getConstructor(String.class, int.class).newInstance(&quot;xioabai&quot;, 13);Method method &#x3D; clazz.getMethod(&quot;getAge&quot;);Object result &#x3D; method.invoke(s1);System.out.println(result); &#x2F;&#x2F; 13<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-8-继承技巧"><a href="#5-8-继承技巧" class="headerlink" title="5.8 继承技巧"></a>5.8 继承技巧</h3><ol><li>将公共操作和域放在超类</li><li>不要使用受保护的域</li><li>使用继承实现 is-a 关系</li><li>除非所有继承的方法都有意义，否则不要使用继承</li><li>在覆盖方法时，不要改变预期的行为</li><li>使用多态而非类型信息</li><li>不要过多的使用反射</li></ol><h2 id="6-接口、lambda-表达式、内部类"><a href="#6-接口、lambda-表达式、内部类" class="headerlink" title="6 接口、lambda 表达式、内部类"></a>6 接口、lambda 表达式、内部类</h2><h3 id="6-1-接口"><a href="#6-1-接口" class="headerlink" title="6.1 接口"></a>6.1 接口</h3><h4 id="6-1-1-接口概念"><a href="#6-1-1-接口概念" class="headerlink" title="6.1.1 接口概念"></a>6.1.1 接口概念</h4><p>接口不是类，而是对类的一组需求的描述。接口的所有方法默认是 public 而无需指定。接口中不能有实例域，Java SE8 之前不能在接口中实现方法。</p><p>类实现一个接口的两个步骤：</p><ul><li>让类声明为实现给定的接口，使用 implements</li><li>对接口中的所有方法进行定义，实现接口时必须声明为 public</li></ul><h4 id="6-1-2-接口的特性"><a href="#6-1-2-接口的特性" class="headerlink" title="6.1.2 接口的特性"></a>6.1.2 接口的特性</h4><p>接口不是类，不能使用 new 实例化一个接口，但是可以声明接口变量，指向实现了接口的类对象，也可以使用 instanceof 检测一个对象是否实现了某个接口，接口可以扩展接口，接口中不能包含实例域或静态方法，但是可以包含常量 public static final，一个类只能拥有一个超类，但是可以实现多个接口。</p><p>Java SE 8 中，允许接口中增加静态方法，通常放在伴随类中</p><p>可以使用 default 声明默认方法，提供默认实现，主要用来接口演化升级，默认方法冲突的两种情况：</p><ol><li>一个类实现了多个接口，并且多个接口有共同方法，此时需要类自己实现这个方法，解决冲突</li><li>一个类继承的超类和实现的接口中有重名方法，类优先原则，会自动忽略接口的方法。</li></ol><h3 id="6-2-接口示例"><a href="#6-2-接口示例" class="headerlink" title="6.2 接口示例"></a>6.2 接口示例</h3><h4 id="6-2-1-Comparator-接口"><a href="#6-2-1-Comparator-接口" class="headerlink" title="6.2.1 Comparator 接口"></a>6.2.1 Comparator 接口</h4><p>对一个对象数组进行排序的前提是这个对象必须是 Comparable 接口的类的实例。Arrays.sort 方法有两个版本一个是传入单个数组，一个是数组加一个比较器，比较器就是实现了 Comparator 接口的类的实例。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">import java.util.*;public class CompareStringTest&#123;    public static void main(String[] args)&#123;        String[] friends &#x3D; &#123;&quot;Peter&quot;, &quot;Paul&quot;, &quot;Mary&quot;, &quot;ReaJason&quot;, &quot;Silly&quot;&#125;;        &#x2F;&#x2F; 使用 String 类实现了 Comparable 接口的 compareTo 方法进行比较（按照字典顺序）        Arrays.sort(friends);        &#x2F;&#x2F; ASCII 先后顺序        System.out.println(Arrays.toString(friends));        &#x2F;&#x2F; 自定义比较器，进行排序        Arrays.sort(friends, new LengthComparator());        &#x2F;&#x2F; 根据字符串的长度        System.out.println(Arrays.toString(friends));    &#125;&#125;class LengthComparator implements Comparator&lt;String&gt;&#123;    public int compare(String first, String second)&#123;        return first.length() - second.length();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-2-2-Cloneable-接口"><a href="#6-2-2-Cloneable-接口" class="headerlink" title="6.2.2 Cloneable 接口"></a>6.2.2 Cloneable 接口</h4><p>Cloneable 接口是 Java 提供的一组标记接口之一，Object 的 clone 方法是 protected，因此支只支持子类调用 clone 方法克隆它自己的对象，必须重新定义为 clone 为 public 才能允许所有方法克隆对象。</p><ul><li>实现 Clonable 接口</li><li>重新定义 clone 方法，并指定 public 访问修饰符</li></ul><p>深拷贝需要拷贝可变实例域</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Employee implements Cloneable&#123;    private String name;    private double salary;    private Date hireDay;    ...    public Employee clone() throws CloneNotSupportedException&#123;        Employee cloned &#x3D; (Employee)super.clone();        cloned.hireDay &#x3D; (Date)hireDay.clone();        return cloned;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-3-lambda-表达式"><a href="#6-3-lambda-表达式" class="headerlink" title="6.3 lambda 表达式"></a>6.3 lambda 表达式</h3><p>lambda 表达式是一个可传递的代码块，之后可以执行一次或多次。</p><h4 id="6-3-1-lambda-表达式语法"><a href="#6-3-1-lambda-表达式语法" class="headerlink" title="6.3.1 lambda 表达式语法"></a>6.3.1 lambda 表达式语法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 声明参数类型，返回一行代码的执行结果(String first, String second) -&gt;     first.length() - second.length()&#x2F;&#x2F; 声明参数类型，代码块，返回结果，每一个分支都必须返回结果(String first, String second) -&gt; &#123;    if(first.length() &lt; second.length())&#123;        return -1;    &#125;else if(first.length() &gt; second.length())&#123;        return 1;    &#125;else&#123;        return 0;    &#125;&#125;&#x2F;&#x2F; 无参数() -&gt; &#123;    for(int i &#x3D; 0; i &lt; 10; i++)&#123;        System.out.println(i);    &#125;&#125;;&#x2F;&#x2F; 如果参数类型可推导则省略，如果只有单个参数且类型可推导，可省略括号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-3-2-函数式接口"><a href="#6-3-2-函数式接口" class="headerlink" title="6.3.2 函数式接口"></a>6.3.2 函数式接口</h4><p>对于只有一个抽象方法的接口，需要这种接口的对象时，就可以提供一个 lambda 表达式，这种接口称为函数式接口。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; Comparator 就是一个函数式接口Arrays.sort(words, (first, second) -&gt; &#123;    first.length() - second.length()&#125;);&#x2F;&#x2F; java.util.function 中有许多函数式接口list.removeIf(e -&gt; e&#x3D;&#x3D;null);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-3-3-方法引用"><a href="#6-3-3-方法引用" class="headerlink" title="6.3.3 方法引用"></a>6.3.3 方法引用</h4><ul><li>object::instanceMethod</li><li>Class::staticMethod</li><li>Class::instanceMethod</li></ul><p><code>System.out::println</code> 等价于 <code>x -&gt; System.out.println(x)</code></p><p><code>String::compareToIgnoreCase</code> 等价于 <code>(x, y) -&gt; x.compareToIgnoreCase(y)</code></p><p>this\super：this::equals、super::greet</p><p>构造器引用：Person::new、Person[]::new</p><h4 id="6-3-6-变量作用域"><a href="#6-3-6-变量作用域" class="headerlink" title="6.3.6 变量作用域"></a>6.3.6 变量作用域</h4><p>lambda 表达式看可以捕获外围作用域中的变量，且是最终变量（final，初始化之后不会再赋给新值），不过只能引用而不能修改。</p><h4 id="6-3-7-Comparator"><a href="#6-3-7-Comparator" class="headerlink" title="6.3.7 Comparator"></a>6.3.7 Comparator</h4><p>Comparator 接口中包含了静态方法创建比较器，camparing 方法即是一个键提取器函数。p242</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 比较名字Arrays.sort(people, Comparator.comparing(Person::getName));&#x2F;&#x2F; 比较姓再比较名Arrays.sort(people, Comparator.comparing(Person::getLastName).thenComparing(Person::getFirstName());&#x2F;&#x2F; 比较名字长度Arrays.sort(people, Comparator.compringInt(p -&gt; p.getName().length()));&#x2F;&#x2F; null 默认比较器Arrays.sort(people, compring(Person::getMiddleName(), nullFirst(naturalOrder()));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-4-内部类"><a href="#6-4-内部类" class="headerlink" title="6.4 内部类"></a>6.4 内部类</h3><p>内部类是定义在另一个类中的类</p><ul><li>内部类方法可以访问该类定义所在的作用域中的数据</li><li>内部类可以对同一个包中的其他类隐藏起来</li><li>当想要定义一个回调函数且不想编写大量代码就可以使用匿名内部类</li></ul><p>内部类中声明的所有静态域必须是 final，内部类不能有 static 方法（可以有但是不要写）</p><h4 id="6-4-1-内部类的特殊语法"><a href="#6-4-1-内部类的特殊语法" class="headerlink" title="6.4.1 内部类的特殊语法"></a>6.4.1 内部类的特殊语法</h4><p>OuterClass.this 表示外围类的引用</p><p>OuterClass.InnerClass 在外围类作用于之外，引用内部类</p><h4 id="6-4-2-局部内部类"><a href="#6-4-2-局部内部类" class="headerlink" title="6.4.2 局部内部类"></a>6.4.2 局部内部类</h4><p>在方法中定义局部内部类，局部内部类不能用 public 或 private 修饰，它的作用域被限定在这个局部内部类所在的块中。局部内部类访问局部变量必须是 final。</p><h4 id="6-4-3-匿名内部类"><a href="#6-4-3-匿名内部类" class="headerlink" title="6.4.3 匿名内部类"></a>6.4.3 匿名内部类</h4><p>没有名字的内部类，如果构造参数的小括号跟一个大括号，正在定义的就是匿名内部类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 通用语法格式new SuperType(construction parameters)&#123;inner class methods and data&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-4-4-静态内部类"><a href="#6-4-4-静态内部类" class="headerlink" title="6.4.4 静态内部类"></a>6.4.4 静态内部类</h4><p>静态内部类不能访问外围类对象数据，静态内部类可以有静态域和方法，内部类不需要访问外围类对象的时候应该使用静态内部类。</p><h3 id="6-5-代理"><a href="#6-5-代理" class="headerlink" title="6.5 代理"></a>6.5 代理</h3><p>利用代理可以在运行时创建一个实现了一组给定接口的新类。</p><h2 id="7-异常、断言、日志"><a href="#7-异常、断言、日志" class="headerlink" title="7 异常、断言、日志"></a>7 异常、断言、日志</h2><h3 id="7-1-处理错误"><a href="#7-1-处理错误" class="headerlink" title="7.1 处理错误"></a>7.1 处理错误</h3><h4 id="7-1-1-异常分类"><a href="#7-1-1-异常分类" class="headerlink" title="7.1.1 异常分类"></a>7.1.1 异常分类</h4><p>所有异常都是由 Throwable 继承而来，又分为 Error 和 Exception。Error 描述了 Java 运行时系统的内部错误和资源耗尽错误。Exception 中分为 RuntimeException 和 其他异常 两个分支。Java 语言规范将派生于 Error 类或 RuntimeException 类的所有异常称为非受查异常，所有其他的异常称为受查异常。编译器将核查是否为所有的受查异常提供了异常处理器。</p><h4 id="7-1-2-声明受查异常"><a href="#7-1-2-声明受查异常" class="headerlink" title="7.1.2 声明受查异常"></a>7.1.2 声明受查异常</h4><p>下面四个情况应该抛出异常：</p><ol><li>调用一个抛出受查异常的方法</li><li>程序运行过程中发现错误，使用 throw 抛出</li><li>程序出现错误</li><li>Java 虚拟机和运行库出现的内部错误</li></ol><p>一个方法有可能抛出多个受查异常类型，就需要在方法的首部使用 throws 列出所有的异常类，不应该声明从 RuntimeException 继承的非受查异常。</p><p>子类方法中应该比超类方法抛出更特定的异常，或者根本不抛出异常。如果超类没有抛出受查异常，子类也不能抛出受查异常。</p><h4 id="7-1-3-创建异常类"><a href="#7-1-3-创建异常类" class="headerlink" title="7.1.3 创建异常类"></a>7.1.3 创建异常类</h4><ul><li>继承一个异常类</li><li>编写一个构造器方法和一个带有详细描述信息的构造器</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">class FileFormatException extends IOException&#123;    public FileFormatException()&#123;&#125;    public FileFormatException(String msg)&#123;        super(msg);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-2-捕获异常"><a href="#7-2-捕获异常" class="headerlink" title="7.2 捕获异常"></a>7.2 捕获异常</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; try&#x2F;catch 语句try&#123;    code&#125;catch(ExceptionType e)&#123;    handler for this type&#125;&#x2F;&#x2F; 捕获多个异常try&#123;    code&#125;catch(ExceptionType1 e)&#123;    handler for this type&#125;catch(ExceptionType2 e)&#123;    handler for this type&#125;try&#123;    code&#125;catch(ExceptionType1 | ExceptionType2 e)&#123;    handler for this type&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-2-1-再次抛出异常"><a href="#7-2-1-再次抛出异常" class="headerlink" title="7.2.1 再次抛出异常"></a>7.2.1 再次抛出异常</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">catch(SQLException e)&#123;Throwable se &#x3D; new ServletException(&quot;database error&quot;);    se.iniiCase(e);    throw se;&#125;&#x2F;&#x2F; 获取原始的 e 错误Throwable e &#x3D; se.getCause()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-2-2-finally"><a href="#7-2-2-finally" class="headerlink" title="7.2.2 finally"></a>7.2.2 finally</h4><p>try 语句可以只有 finall 子句而没有 catch 语句， finnal 语句无论是否遇到异常都会执行，通常用于资源关闭。当 try 和 finally 中有 return 语句时，会走 finally 子句。</p><p>强烈建议使用 try&#x2F;catch 和 try&#x2F;finally 语句块</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">try&#123;    try&#123;    &#125;finally&#123;    &#125;&#125;catch()&#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-2-3-try-with-resource"><a href="#7-2-3-try-with-resource" class="headerlink" title="7.2.3 try-with-resource"></a>7.2.3 try-with-resource</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 最简形式try(Resource res &#x3D; ...)&#123;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-2-4-Throwable"><a href="#7-2-4-Throwable" class="headerlink" title="7.2.4 Throwable"></a>7.2.4 Throwable</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;*1、将这个对象设置为原因Throwable initCause(Throwable cause)2、获取产生这个异常的原因的异常对象Throwable getCause()3、获取构造这个对象时待用堆栈的跟踪StackTraceElement[] getStackTrace()4、为一个增加抑制异常void addSuppressed(Throwable t)5、获取异常的所有抑制异常Throwable[] getSuppressed()*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-3-使用异常机制技巧"><a href="#7-3-使用异常机制技巧" class="headerlink" title="7.3 使用异常机制技巧"></a>7.3 使用异常机制技巧</h3><ol><li>异常处理不能代替简单的测试</li><li>不要过分细化异常</li><li>利用异常层次结构</li><li>不要压制异常</li><li>检查错误时，苛刻要比放任更好</li><li>不要羞于传递异常</li></ol><h3 id="7-4-断言"><a href="#7-4-断言" class="headerlink" title="7.4 断言"></a>7.4 断言</h3><p>确信某个属性符合要求，并且代码的执行依赖这个属性，语法为 <code>assert 条件</code>和 <code>assert 条件 : 表达式</code>，表达式的目的时产生一个消息字符串。默认情况下，断言是被禁用的。</p><ul><li>开启断言，-enableassertions 或 -ea</li><li>关闭断言，-disablesssertions 或 -da</li></ul><p>断言只用于开发和测试阶段。</p><h3 id="7-5-日志"><a href="#7-5-日志" class="headerlink" title="7.5 日志"></a>7.5 日志</h3><h4 id="7-5-1-日志对象"><a href="#7-5-1-日志对象" class="headerlink" title="7.5.1 日志对象"></a>7.5.1 日志对象</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 全局日志记录器Logger.getGlobal().info(&quot;&quot;);&#x2F;&#x2F; getLogger 创建或获取记录器，声明为静态变量是防止被垃圾回收private static final Logger myLogger &#x3D; Logger.getLogger(&quot;top.reajason.corejava&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>与包名类似，日志记录器名也具有层次结构，子记录器会继承父记录器的级别。7 个日志记录器级别如下：</p><ul><li>SEVERE</li><li>WARNING</li><li>INFO</li><li>CONFIG</li><li>FINE</li><li>FINER</li><li>FINEST</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 设置日志级别,Level.ALL 开启所有级别，Level.OFF 关闭所有级别logger.setLevel(Level.FINE);&#x2F;&#x2F; 记录日志logger.waring(message);logger.info(message);logger.log(Level.FINE, message);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-5-2-日志管理器配置"><a href="#7-5-2-日志管理器配置" class="headerlink" title="7.5.2 日志管理器配置"></a>7.5.2 日志管理器配置</h4><p>默认情况下，配置位于：<code>jre/lib/logging.prperties</code></p><h4 id="7-5-3-处理器"><a href="#7-5-3-处理器" class="headerlink" title="7.5.3 处理器"></a>7.5.3 处理器</h4><p>默认是 ConsoleHandler 控制台处理器</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 添加文件的处理器，还有其他处理器例如 StreamHandlerFileHandler handler &#x3D; new FileHnadler();logger.addHandler(handler);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>自定义处理器需要扩展 Handler 类，并实现 publish、flush 和 close 方法。</p><h4 id="7-5-4-过滤器"><a href="#7-5-4-过滤器" class="headerlink" title="7.5.4 过滤器"></a>7.5.4 过滤器</h4><p>同一时刻只能有一个过滤器，通过实现 Fileter 接口并定义 isLoggable 方法自定义过滤器，使用 setFilter 方法添加过滤器。</p><h4 id="7-5-5-格式化器"><a href="#7-5-5-格式化器" class="headerlink" title="7.5.5 格式化器"></a>7.5.5 格式化器</h4><p>扩展 Formatter 类并实现 format 方法，进行格式化，使用 setFormatter 方法加入到处理器中。</p><h3 id="7-6-调试技巧"><a href="#7-6-调试技巧" class="headerlink" title="7.6 调试技巧"></a>7.6 调试技巧</h3><ol><li>打印或记录任意变量值</li><li>类中加入 main 方法进行单元测试</li><li>使用 JUnit 进行测试</li><li>日志代理</li><li>利用 Throwable 类提供的 printStackTrace 方法，打印堆栈情况，并重新抛出异常。</li><li>堆栈轨迹显示在 System.err 上，将错误信息保存在文件中</li><li>查看类的加载过程，使用 -verbose 启动虚拟机</li><li>-Xlint 告诉编译器对普遍容易出现的代码问题进行检查</li><li>jconsole processID 可以监控和管理程序</li><li>jmap 可以获得堆的转储</li><li>-Xprof 标志运行虚拟机，就会将进场被调用的方法的剖析信息发送到 System.out 中</li></ol><h2 id="8-泛型程序设计"><a href="#8-泛型程序设计" class="headerlink" title="8 泛型程序设计"></a>8 泛型程序设计</h2><p>泛型程序设计意味着编写的代码可以被很多类型的对象所重用。泛型提供了类型参数，使程序具有更好的可读性和安全性。</p><h3 id="8-1-定义简单泛型类"><a href="#8-1-定义简单泛型类" class="headerlink" title="8.1 定义简单泛型类"></a>8.1 定义简单泛型类</h3><p>泛型类就是具有一个或多个类型变量的类。</p><p>Java 中，E 表示集合的元素类型；K 和 V 分别表示表的关键字和值的类型；T（U 或 S）表示 “任意类型”。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Pair&lt;T&gt;&#123;    private T first;    private T second;    public Pair()&#123;        first &#x3D; null;        second &#x3D; null;    &#125;    public Pair(T first, T second)&#123;        this.first &#x3D; first;        this.second &#x3D; second;    &#125;    public T getFirst()&#123;        return first;    &#125;    public T getSecond()&#123;        return second;    &#125;    public void setFirst(T value)&#123;        first &#x3D; value;    &#125;    public void setSecond(T value)&#123;        second &#x3D; value;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类定义中的类型变量指定方法的返回类型以及域和局部变量的类型，可用具体的类型替换类型变量就可以实例化泛型类型。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">Pair&lt;String&gt;;&#x2F;* 将 String 替换类型变量 T 得到 Piar 类Pair&lt;String&gt;()pair&lt;String&gt;(String, String)String getFirst()String getSecond()void setFirst(String)void setSecond(String)*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-2-泛型方法"><a href="#8-2-泛型方法" class="headerlink" title="8.2 泛型方法"></a>8.2 泛型方法</h3><p>类型变量放在修饰符之后，返回值类型前，泛型方法可定义在普通类也可定义在泛型类中。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">class ArrayAlg&#123;    public static &lt;T&gt; T getMiddle(T... a)&#123;        return a[a.length &#x2F; 2];    &#125;&#125;&#x2F;&#x2F; 调用时方法名前的尖括号放入具体类型ArrayAlg.&lt;String&gt;getMiddle(&quot;John&quot;, &quot;Q&quot;, &quot;Public&quot;);&#x2F;&#x2F; 也可省略，后面的参数 String 足以推出 T 是 StringArrayAlg.getMiddle(&quot;John&quot;, &quot;Q&quot;, &quot;Public&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-3-类型变量的限定"><a href="#8-3-类型变量的限定" class="headerlink" title="8.3 类型变量的限定"></a>8.3 类型变量的限定</h3><p><code>&lt;T extends BoundingType&gt;</code> 表示 T 应该是绑定类型的子类型，T 和绑定类型可以是类也可以是接口。一个类型变量或通配符可有多个限定，使用 &amp; 分隔，限定中至多一个类，且类要放在第一个。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">class ArrayAlg&#123;    public static &lt;T extends Comparable&gt; Pair&lt;T&gt; minmax(T[] a)&#123;        ...        return new Pair&lt;&gt;(a[0], a[a.length - 1]);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-4-泛型代码与虚拟机"><a href="#8-4-泛型代码与虚拟机" class="headerlink" title="8.4 泛型代码与虚拟机"></a>8.4 泛型代码与虚拟机</h3><p>虚拟机没有泛型类型对象，所有对象都是普通类。</p><h4 id="8-4-1-类型擦除"><a href="#8-4-1-类型擦除" class="headerlink" title="8.4.1 类型擦除"></a>8.4.1 类型擦除</h4><p>泛型类型都会自动提供一个相应的原始类型。原始类型的名字就是删去类型参数后的泛型类型名。擦除类型变量，并替换为限定类型（无限定类型，替换为 Object）。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; Pair&lt;T&gt; 会变成以下情况public class Pair&#123;    private Object first;    private Object second;    public Pair()&#123;        first &#x3D; null;        second &#x3D; null;    &#125;    public Pair(Object first, Object second)&#123;        this.first &#x3D; first;        this.second &#x3D; second;    &#125;    public Object getFirst()&#123;        return first;    &#125;    public Object getSecond()&#123;        return second;    &#125;    public void setFirst(Object value)&#123;        first &#x3D; value;    &#125;    public void setSecond(Object value)&#123;        second &#x3D; value;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-4-2-翻译泛型表达式"><a href="#8-4-2-翻译泛型表达式" class="headerlink" title="8.4.2 翻译泛型表达式"></a>8.4.2 翻译泛型表达式</h4><p>调用泛型方法或者存取泛型域时，编译器会自动插入强制类型转换。</p><h4 id="8-4-3-翻译泛型方法"><a href="#8-4-3-翻译泛型方法" class="headerlink" title="8.4.3 翻译泛型方法"></a>8.4.3 翻译泛型方法</h4><p>子类继承泛型类并且子类重写泛型类中的泛型方法制定了确定类型，为了防止类型擦除与多态发生冲突，编译器会在子类生成一个桥方法，虚拟机运行时会调用子类桥方法。</p><ul><li>虚拟机没有泛型，只有普通的类和方法</li><li>所有参数类型都用它们的限定类型替换</li><li>桥方法被合成用来保持多态</li><li>为保持类型安全，必要时插入强制类型转换</li></ul><h4 id="8-4-4-调用遗留代码"><a href="#8-4-4-调用遗留代码" class="headerlink" title="8.4.4 调用遗留代码"></a>8.4.4 调用遗留代码</h4><p>设计泛型类型时，主要目标是运行泛型代码和遗留代码互操作。</p><p><code>@SuppressWarning(&quot;unchecked&quot;)</code> 可以抑制警告</p><h3 id="8-5-约束和局限性"><a href="#8-5-约束和局限性" class="headerlink" title="8.5 约束和局限性"></a>8.5 约束和局限性</h3><h4 id="8-5-1-不能用基本类型实例化类型参数"><a href="#8-5-1-不能用基本类型实例化类型参数" class="headerlink" title="8.5.1 不能用基本类型实例化类型参数"></a>8.5.1 不能用基本类型实例化类型参数</h4><p>原因是类型擦除</p><h4 id="8-5-2-运行时类型查询只适用于原始类型"><a href="#8-5-2-运行时类型查询只适用于原始类型" class="headerlink" title="8.5.2 运行时类型查询只适用于原始类型"></a>8.5.2 运行时类型查询只适用于原始类型</h4><p>虚拟机中的对象总是一个特定的非泛型方法，所以类型查询只产生原始类型。</p><h4 id="8-5-3-不能创建参数化类型数组"><a href="#8-5-3-不能创建参数化类型数组" class="headerlink" title="8.5.3 不能创建参数化类型数组"></a>8.5.3 不能创建参数化类型数组</h4><p>类型擦除，会使 <code>Pair&lt;String&gt;[] table</code> 变成 <code>Pair[] table</code>，可以声明但是使用会有问题，会得到一个警告，可以使用注解抑制警告 <code>@SuppressWarning(&quot;unchecked&quot;)</code> 或 <code>@SafeVarargs</code></p><h4 id="8-5-4-不能实例化类型变量"><a href="#8-5-4-不能实例化类型变量" class="headerlink" title="8.5.4 不能实例化类型变量"></a>8.5.4 不能实例化类型变量</h4><p>new T() 不能使用，因为类型擦除，T 变成 Object 了，可以使用构造器表达式解决。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 使用 Supplier&lt;T&gt; 表示一个无参数且返回值时 T 的函数public static &lt;T&gt; Pair&lt;T&gt; makePair(Supplier&lt;T&gt; constr)&#123;    return new Pair&lt;&gt;(constr.get, constr.get());&#125;&#x2F;&#x2F; 调用Pair&lt;String&gt; p &#x3D; Pair.makePair(String::new);&#x2F;&#x2F; 使用反射public static &lt;T&gt; Pair&lt;T&gt; makePair(Class&lt;T&gt; cl)&#123;    try&#123;        return new Pair&lt;&gt;(cl.newInstance(), cl.newInstance());    &#125;catch(Exception e)&#123;        return null;    &#125;&#125;&#x2F;&#x2F; 调用Pair&lt;String&gt; p &#x3D; Pair.makePair(String.class);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-5-5-不能构造泛型数组"><a href="#8-5-5-不能构造泛型数组" class="headerlink" title="8.5.5 不能构造泛型数组"></a>8.5.5 不能构造泛型数组</h4><h4 id="8-5-6-泛型类的静态上下文中类型变量无效"><a href="#8-5-6-泛型类的静态上下文中类型变量无效" class="headerlink" title="8.5.6 泛型类的静态上下文中类型变量无效"></a>8.5.6 泛型类的静态上下文中类型变量无效</h4><h4 id="8-5-7-不能抛出或捕获泛型类的实例"><a href="#8-5-7-不能抛出或捕获泛型类的实例" class="headerlink" title="8.5.7 不能抛出或捕获泛型类的实例"></a>8.5.7 不能抛出或捕获泛型类的实例</h4><h4 id="8-5-8-可以消除对受查异常的检查"><a href="#8-5-8-可以消除对受查异常的检查" class="headerlink" title="8.5.8 可以消除对受查异常的检查"></a>8.5.8 可以消除对受查异常的检查</h4><h4 id="8-5-9-注意擦除后的冲突"><a href="#8-5-9-注意擦除后的冲突" class="headerlink" title="8.5.9 注意擦除后的冲突"></a>8.5.9 注意擦除后的冲突</h4><h3 id="8-6-泛型类型的继承规则"><a href="#8-6-泛型类型的继承规则" class="headerlink" title="8.6 泛型类型的继承规则"></a>8.6 泛型类型的继承规则</h3><p><code>Pair&lt;Manager&gt;</code> 和 <code>Pair&lt;Employee&gt;</code> 没有任何关系。可以将参数化类型转换为原始类型，泛型类可以扩展或实现其他的泛型类。</p><h3 id="8-7-通配符类型"><a href="#8-7-通配符类型" class="headerlink" title="8.7 通配符类型"></a>8.7 通配符类型</h3><p>通配符类型，允许类型参数变化。<code>Pair&lt;? extends Employee&gt;</code> 表示类型参数是 Employee 的子类。<code>Pair&lt;? super Manager&gt;</code> 表示类型参数是 Manager 的超类。</p><p><code>?</code> 表示无限定通配符。</p><h2 id="9-集合"><a href="#9-集合" class="headerlink" title="9 集合"></a>9 集合</h2><h3 id="9-1-集合框架"><a href="#9-1-集合框架" class="headerlink" title="9.1 集合框架"></a>9.1 集合框架</h3><p>集合接口与实现分离，集合有两个基本接口 Collection 和 Map。</p><h4 id="9-1-1-Collection-接口"><a href="#9-1-1-Collection-接口" class="headerlink" title="9.1.1 Collection 接口"></a>9.1.1 Collection 接口</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;*Iterator&lt;E&gt; iterator()int Size()boolean isEmpty()boolean contains(Object obj)boolean containsAll(Collection&lt;?&gt; other)boolean add(Object element)boolean addAll(Collection&lt;? extends E&gt; other)boolean remove(Object obj)boolean removeAll(Collection&lt;?&gt; other)default boolean removeIf(Predicate&lt;? super E&gt; filter)void clear()boolean retainAll(Collection&lt;?&gt; other)Object[] toArray()&lt;T&gt; T[] toArray(T[] arrayToFill)*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-1-2-Iterator"><a href="#9-1-2-Iterator" class="headerlink" title="9.1.2 Iterator"></a>9.1.2 Iterator</h4><p>迭代器认为是位于两个元素之间，remove 只能删除上次访问的元素，不能连续调用两次</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;*boolean hasNext()E next()void remove()*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-2-具体的集合"><a href="#9-2-具体的集合" class="headerlink" title="9.2 具体的集合"></a>9.2 具体的集合</h3><table><thead><tr><th>集合类型</th><th>描述</th></tr></thead><tbody><tr><td>ArrayList</td><td>一种可以动态增长和缩减的索引序列</td></tr><tr><td>LinkedList</td><td>一种可以在任何位置进行搞笑地插入和删除操作的有序序列</td></tr><tr><td>ArrayDeque</td><td>一种用循环数组实现的双端队列</td></tr><tr><td>HashSet</td><td>一种没有重复元素的无序集合</td></tr><tr><td>TreeSet</td><td>一种有序集</td></tr><tr><td>EnumSet</td><td>一种包含枚举类型的值</td></tr><tr><td>LinkedHashSet</td><td>一种可以记住元素插入次序的集</td></tr><tr><td>PriorityQueue</td><td>一种允许高效删除最小元素的集合</td></tr><tr><td>HashMap</td><td>一种存储键值关联的数据结构</td></tr><tr><td>TreeMap</td><td>一种键值有序排列的映射表</td></tr><tr><td>EnumMap</td><td>一种键值属于枚举类型的映射表</td></tr><tr><td>LinkedHashMap</td><td>一种可以记住键值项添加次序的映射表</td></tr><tr><td>WeakHashMap</td><td>一种其值无用武之地后可以被垃圾回收回收的映射表</td></tr><tr><td>IdentityHashMap</td><td>一种用 &#x3D;&#x3D; 而不是用 equals 比较键值的映射表</td></tr></tbody></table><h4 id="9-2-1-链表"><a href="#9-2-1-链表" class="headerlink" title="9.2.1 链表"></a>9.2.1 链表</h4><p>插入和删除操作高效，ListIterator 继承于 Iterator 支持添加、修改值和反向遍历。Java 设计上不合理，不要使用 get 获取链表上的元素，每次都需要从头遍历，应该使用迭代器。LinkedList 继承于 List</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;* ListListIterator&lt;E&gt; listIterator()ListIterator&lt;E&gt; listIterator(int index)void add(int i, E element)void addAll(int i, Collection&lt;? extends E&gt; elements)E remove(int i)E get(int i)E set(int i, E element)int indexOf(Object emelent)int lastIndexOf(Object element)*&#x2F;&#x2F;* ListIteratorvoid add(E newElement)void set(E newElement)boolean hasPrevious()E previous()int nextiIndex()int previousIndex()*&#x2F;&#x2F;*LinkedList()LinkedList(Collection&lt;? extends E&gt; elements)void addFirst(E element)void addLast(E element)E getFirst()E getLast()E removeFirst()E removeLast()*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-2-2-数组链表"><a href="#9-2-2-数组链表" class="headerlink" title="9.2.2 数组链表"></a>9.2.2 数组链表</h4><p>ArrayList 继承于 List，可以随机遍历数组</p><h4 id="9-2-3-散列集"><a href="#9-2-3-散列集" class="headerlink" title="9.2.3 散列集"></a>9.2.3 散列集</h4><p>HashSet 继承于 Set，没有重复元素的集合</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;*HashSet()HashSet(Collection&lt;? extends E&gt; element)HashSet(int initialCapacity)HashSet(int initialCapacity, float loadFactor)*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-2-4-树集"><a href="#9-2-4-树集" class="headerlink" title="9.2.4 树集"></a>9.2.4 树集</h4><p>TreeSet 有序集合，排序使用的红黑树结构，要使用树集，元素必须实现 Comparable 接口，或构造集时提供 Comparator</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;* TreeSetTreeSet()TreeSet(Comparator&lt;? super E&gt; comparator)TreeSet(Collection&lt;? extends E&gt; elements)TreeSet(SortedSet&lt;E&gt; s)*&#x2F;&#x2F;* SortedSetComparator&lt;? super E&gt; comparator()E first()E last()*&#x2F;&#x2F;* NavigableSetE higher(E value)E lower(E value)E ceiling(E value)E floor(E value)E pollFirst()E pollLast()Iterator&lt;E&gt; descendingIterator()*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-2-5-队列"><a href="#9-2-5-队列" class="headerlink" title="9.2.5 队列"></a>9.2.5 队列</h4><p>双端队列，高效地在头部和尾部同时进行添加或删除元素，不支持在队列中间添加元素，ArrayDeque 和 LinkedList 有实现。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;* Queue 队列boolean add(E element)boolean offer(E element)E remove()E poll()E element()E peek()*&#x2F;&#x2F;* Deque 双端队列void addFirst(E element)void addLast(E element)boolean offerFirst(E element)boolean offerLast(E element)E removeFirst()E removeLast()E pollFirst()E pollLast()E getFirst()E getLast()E peekFirst()E peekLast()*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-2-6-优先级队列"><a href="#9-2-6-优先级队列" class="headerlink" title="9.2.6 优先级队列"></a>9.2.6 优先级队列</h4><p>堆结构，小根堆，大根堆</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;*PriorityQueue()PriorityQueue(int initialCapcity)PriorityQueue(int initialCapcity, Comparator&lt;? super E&gt; c)*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-3-映射"><a href="#9-3-映射" class="headerlink" title="9.3 映射"></a>9.3 映射</h3><p>HashMap 和 TreeMap 都实现了 Map 接口。键必须是唯一的</p><h4 id="9-3-1-基本映射操作"><a href="#9-3-1-基本映射操作" class="headerlink" title="9.3.1 基本映射操作"></a>9.3.1 基本映射操作</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;* MapV get(Object key)default V getOrDefault(Object key, V defaultValue)V put(K key, V value)void putAll(Map&lt;? extends K, ? extends V&gt; entries)boolean containsKey(Object key)boolean containsValue(Object value)default void forEach(BiConsumer&lt;? super K, ? super V&gt; action)*&#x2F;&#x2F;* HashMapHashMap()HashMap(int initialCapacity)HashMap(int initialCapacity, float loadFactor)*&#x2F;&#x2F;* TreeMapTreeMap()TreeMap(Comparator&lt;? super K&gt; c)TreeMap(Map&lt;? extends K, ? extends V&gt; entries)TreeMap(SortedMap&lt;? extends K, ? extends V&gt; entries)*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-3-2-更新映射项"><a href="#9-3-2-更新映射项" class="headerlink" title="9.3.2 更新映射项"></a>9.3.2 更新映射项</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;* Mapdefault V merge(K key, V value, BitFunction&lt;? super V, ? super V,? extends V&gt; remappingFunction)default V compute(K key, BitFunction&lt;? super K, ? super V, ? extends V&gt; remappingFunction)*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-3-3-映射视图"><a href="#9-3-3-映射视图" class="headerlink" title="9.3.3 映射视图"></a>9.3.3 映射视图</h4><p>映射的视图（实现了 Collection 接口或某个子接口的对象）有三种：键集、值集合以及键值对集。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">Set&lt;K&gt; keySet();Collection&lt;V&gt; values();Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="9-3-4-弱散列映射"><a href="#9-3-4-弱散列映射" class="headerlink" title="9.3.4 弱散列映射"></a>9.3.4 弱散列映射</h4><p>WeakHashMap，当对键的唯一引用来自散列条目时，这一数据结构将与垃圾回收器协同删除键值对。使用弱引用保存键。</p><h4 id="9-3-5-链接散列集与映射"><a href="#9-3-5-链接散列集与映射" class="headerlink" title="9.3.5 链接散列集与映射"></a>9.3.5 链接散列集与映射</h4><p>LinkedHashSet 和 LinkedHashMap 能记住插入元素的顺序。</p><h4 id="9-3-6-枚举集与映射"><a href="#9-3-6-枚举集与映射" class="headerlink" title="9.3.6 枚举集与映射"></a>9.3.6 枚举集与映射</h4><p>EnumSet内部用位序列实现。EnumMap 是一个键类型为枚举类型的映射</p><h4 id="9-3-7-标识散列映射"><a href="#9-3-7-标识散列映射" class="headerlink" title="9.3.7 标识散列映射"></a>9.3.7 标识散列映射</h4><p>IdentityHashMap 使用 &#x3D;&#x3D; 而不是 equals 比较两个对象</p><h3 id="9-4-视图与包装类"><a href="#9-4-视图与包装类" class="headerlink" title="9.4 视图与包装类"></a>9.4 视图与包装类</h3><p>keySet 方法返回一个实现 Set 接口的类对象，这个类的方法对原映射进行操作，这种集合称为视图。</p><h4 id="9-4-1-轻量集合包装器"><a href="#9-4-1-轻量集合包装器" class="headerlink" title="9.4.1 轻量集合包装器"></a>9.4.1 轻量集合包装器</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;* Arrays 返回数组列表视图List&lt;E&gt; asList(E... array)*&#x2F;&#x2F;* Collections，获取不可修改集合static &lt;E&gt; List&lt;E&gt; nCopies(int n, E value)static &lt;E&gt; Set&lt;E&gt; singleton(E value)static &lt;E&gt; List&lt;E&gt; singletonList(E value)*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-4-2-子范围"><a href="#9-4-2-子范围" class="headerlink" title="9.4.2 子范围"></a>9.4.2 子范围</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;* ListsubList(int firstIncluded, int firstExcluded)*&#x2F;&#x2F;*subSet()subMap()*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-4-3-不可修改的视图"><a href="#9-4-3-不可修改的视图" class="headerlink" title="9.4.3 不可修改的视图"></a>9.4.3 不可修改的视图</h4><p>Collections 有方法获取集合不可修改视图，如果尝试修改则抛出异常。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;*static &lt;E&gt; Collection unmodifiableCollection(Collection&lt;&gt;E c)......*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-4-4-同步视图"><a href="#9-4-4-同步视图" class="headerlink" title="9.4.4 同步视图"></a>9.4.4 同步视图</h4><p>使用视图机制确保常规集合的线程安全。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;*static &lt;E&gt; Collection&lt;E&gt; synchronizedCollection(Collection&lt;E&gt; c)......*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-4-5-受查视图"><a href="#9-4-5-受查视图" class="headerlink" title="9.4.5 受查视图"></a>9.4.5 受查视图</h4><p>受查视图可以探测到集合不能探测到的代码问题，受查视图受限于虚拟机可以运行的运行时检查</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;*static &lt;E&gt; Collection&lt;E&gt; checkedCollection(Collection&lt;E&gt; c)......*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-5-算法"><a href="#9-5-算法" class="headerlink" title="9.5 算法"></a>9.5 算法</h3><h4 id="9-5-1-排序与混排"><a href="#9-5-1-排序与混排" class="headerlink" title="9.5.1 排序与混排"></a>9.5.1 排序与混排</h4><p>Arrays.sort()</p><h4 id="9-5-2-二分查找"><a href="#9-5-2-二分查找" class="headerlink" title="9.5.2 二分查找"></a>9.5.2 二分查找</h4><p>Collections.binarySearch()</p><h4 id="9-5-3-Collections-其他"><a href="#9-5-3-Collections-其他" class="headerlink" title="9.5.3 Collections 其他"></a>9.5.3 Collections 其他</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;* CollectionsT min(Collection&lt;T&gt; elements)T max(Collection&lt;T&gt; elements)void copy(List&lt;? super T&gt; to, List&lt;T&gt; from)void fill(List&lt;? super T&gt; l, T value)void swap(List&lt;?&gt; l, int i, int j)void reverse(List&lt;?&gt; l)旋转列表元素void rotate(List&lt;?&gt; l, int d)获取与 o 相同元素个数int frequency(Collection&lt;?&gt; c, Object o)两集合没有共同元素返回 trueboolean disjoint(Collection&lt;?&gt; cl, Collection&lt;?&gt; c2)*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-5-4-集合与数组转换"><a href="#9-5-4-集合与数组转换" class="headerlink" title="9.5.4 集合与数组转换"></a>9.5.4 集合与数组转换</h4><p>数组转集合，Arrays.asList()</p><p>集合转数组，list.toArray() 返回 Object[]，转为特定类型需要使用 list.toArray(new String[0]) 或 list.toArray(new String[list.size()]) 这种不会创建新数组</p><h4 id="9-5-5-编写自己的算法"><a href="#9-5-5-编写自己的算法" class="headerlink" title="9.5.5 编写自己的算法"></a>9.5.5 编写自己的算法</h4><p>集合声明时应该尽可能使用接口而非具体的实现，返回集合的方法，可能还要返回接口，而不是返回类。</p><h3 id="9-6-遗留的集合"><a href="#9-6-遗留的集合" class="headerlink" title="9.6 遗留的集合"></a>9.6 遗留的集合</h3><h4 id="9-6-1-Hashtable"><a href="#9-6-1-Hashtable" class="headerlink" title="9.6.1 Hashtable"></a>9.6.1 Hashtable</h4><p>Hashtable 与 HashMap 作用一样</p><h4 id="9-6-2-枚举"><a href="#9-6-2-枚举" class="headerlink" title="9.6.2 枚举"></a>9.6.2 枚举</h4><p>hasMoreElements 和 nextElement 与迭代器的 hasNext 和 next 方法相似。</p><h4 id="9-6-3-属性映射"><a href="#9-6-3-属性映射" class="headerlink" title="9.6.3 属性映射"></a>9.6.3 属性映射</h4><ul><li>键值都是字符串</li><li>表可以保存到文件，也可以从文件加载</li><li>使用一个默认的辅助表</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;* PropertiesProperties()Properties(Properties defaults)String getProperty(String key)String getProperty(String key, String defaultValue)从输入流中加载属性映射void load(InputStream in)将属性映射存储到输出流中void store(OutputStream out, String commentString)*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-6-4-栈"><a href="#9-6-4-栈" class="headerlink" title="9.6.4 栈"></a>9.6.4 栈</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;* StackE push(E item)E pop()E peek()*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-6-5-位集"><a href="#9-6-5-位集" class="headerlink" title="9.6.5 位集"></a>9.6.5 位集</h4><p>BitSet 存放一个位序列，高效</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;*BitSet(int initialCapacity)int length()boolean get(int bit)void set(int bit)void clear(int bit)void add(BitSet set)void or(BitSet set)void xor(BitSet set)void andNot(BitSet set)*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="13-部署-Java-应用程序"><a href="#13-部署-Java-应用程序" class="headerlink" title="13 部署 Java 应用程序"></a>13 部署 Java 应用程序</h2><h3 id="13-1-JAR-文件"><a href="#13-1-JAR-文件" class="headerlink" title="13.1 JAR 文件"></a>13.1 JAR 文件</h3><h4 id="13-1-1-创建-JAR-文件"><a href="#13-1-1-创建-JAR-文件" class="headerlink" title="13.1.1 创建 JAR 文件"></a>13.1.1 创建 JAR 文件</h4><p><code>jar cvf JARFileName File1 File2</code></p><h4 id="13-1-2-清单文件"><a href="#13-1-2-清单文件" class="headerlink" title="13.1.2 清单文件"></a>13.1.2 清单文件</h4><p><code>jar cfm JARFileName MainifestFileName ...</code></p><h4 id="13-1-3-可执行-JAR"><a href="#13-1-3-可执行-JAR" class="headerlink" title="13.1.3 可执行 JAR"></a>13.1.3 可执行 JAR</h4><p>使用 e 指定程序入口，或在清单中国指定</p><p><code>jar cvfe MyProgram.jar com.mycompany.mypkg.MainAppClass ...</code></p><p>启动 jar：<code>jar -jar MyProgram.jar</code></p><h4 id="13-1-4-资源"><a href="#13-1-4-资源" class="headerlink" title="13.1.4 资源"></a>13.1.4 资源</h4><p>文件的自动装载是利用资源加载特性完成的。</p><h4 id="13-1-5-密封"><a href="#13-1-5-密封" class="headerlink" title="13.1.5 密封"></a>13.1.5 密封</h4><p>在清单中加入 <code>Sealed: true</code> 则指定密封</p><h3 id="13-2-应用首选项的存储"><a href="#13-2-应用首选项的存储" class="headerlink" title="13.2 应用首选项的存储"></a>13.2 应用首选项的存储</h3><h4 id="13-2-1-属性映射"><a href="#13-2-1-属性映射" class="headerlink" title="13.2.1 属性映射"></a>13.2.1 属性映射</h4><p>使用 properties 存储属性，获取主目录：<code>System.getProperties(&quot;user.home&quot;)</code></p><h4 id="13-2-2-首选项-API"><a href="#13-2-2-首选项-API" class="headerlink" title="13.2.2 首选项 API"></a>13.2.2 首选项 API</h4><p>Preferences</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Reading </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ &amp; STL</title>
      <link href="/2024/01/10/cppstl/"/>
      <url>/2024/01/10/cppstl/</url>
      
        <content type="html"><![CDATA[<h1 id="STL-基本概念"><a href="#STL-基本概念" class="headerlink" title="STL 基本概念"></a>STL 基本概念</h1><p>六大组件：  容器、 算法、 迭代器、 仿函数、 适配器、 空间配置器</p><p>容器： 各种数据结构， 如 vector list deque set map<br>算法： 各种常用的算法， 如 sort find copy for_each<br>迭代器： 扮演了容器与算法之间的胶合剂<br>仿函数： 行为类似函数， 可以作为算法的某种策略<br>适配器： 一种用来修饰容器或者仿函数或迭代器接口的东西<br>空间配置器： 负责空间的配置与管理</p><p>序列式容器： 强调值的排序， 序列式容器中的每个元素均有固定位置<br>关联式容器： 二叉树结构， 各元素之间没有严格的物理上的顺序关系</p><p>算法： 问题之解法<br>分为： 质变算法  非质变算法<br>质变算法： 是指运算过程中会更改区间内的元素。 比如： 拷贝， 替换， 删除<br>非质变算法： 是指运算过程中不会更改区间内的元素内容。 比如： 查找、 计数、 遍历、 寻找极值等等</p><p>迭代器：容器和算法之间粘合剂<br>提供一种方法， 使之能够依序寻访某个容器所含的各个元素， 每个容器豆有自己的专属的迭代器<br>迭代器非常类似于指针， 初学阶段 我们可以理解为迭代器为指针<br>迭代器种类：<br><img src="/../images/STL/%E8%BF%AD%E4%BB%A3%E5%99%A8%E7%A7%8D%E7%B1%BB.jpg"></p><hr><p>容器算法迭代初识</p><h2 id="string"><a href="#string" class="headerlink" title="string"></a>string</h2><p>string 本质上是一个类</p><p>string 和 char * 区别<br>char* 是一个指针<br>string 是一个类， 类内部封装了 char* ， 管理这个字符串， 是一个char* 型的容器</p><p>string 类 内部封装了很多成员方法</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 查找 find  拷贝 copy  删除 delete  替代 replace   插入 insert<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="string-初始化"><a href="#string-初始化" class="headerlink" title="string 初始化"></a>string 初始化</h3><p>string 赋值方式很多， operator&#x3D; 这种方式比较实用的</p><pre class="line-numbers language-none"><code class="language-none">构造函数原型：string();  &#x2F;&#x2F; 创建一个空的字符串string(const char* s);    &#x2F;&#x2F; 使用字符串s 初始化string(const string&amp; str);   &#x2F;&#x2F; 使用一个string 对象初始化另一个 string 对象string(int n, char c);     &#x2F;&#x2F; 使用 n 个字符 c 初始化 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="string-相关操作"><a href="#string-相关操作" class="headerlink" title="string 相关操作"></a>string 相关操作</h3><h4 id="string-拼接"><a href="#string-拼接" class="headerlink" title="string 拼接"></a>string 拼接</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">string&amp; operator+&#x3D;(const char* str); &#x2F;&#x2F;重载 +&#x3D; 操作符string&amp; operator+&#x3D;(const char c);  &#x2F;&#x2F;重载 +&#x3D; 操作符string&amp; operator+&#x3D;(const string&amp; str);  &#x2F;&#x2F;重载 +&#x3D; 操作符string&amp; append(const char *s);  &#x2F;&#x2F; 把字符串s连接到当前字符串结尾string&amp; append(const char *s, int n); &#x2F;&#x2F; 把字符串s 的前n个字符连接到当前字符串结尾string&amp; append(const string &amp;s);  &#x2F;&#x2F; 同 operator+&#x3D;(const string&amp; str)string&amp; append(const string &amp;s, int pos, int n);  &#x2F;&#x2F; 字符串s中从pos开始的n个字符连接到字符串结尾<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="string-查找和替换"><a href="#string-查找和替换" class="headerlink" title="string 查找和替换"></a>string 查找和替换</h4><pre class="line-numbers language-none"><code class="language-none">int find(const string&amp; str, int pos &#x3D; 0) const;   &#x2F;&#x2F; 查找str 第一次出现的位置， 从pos 开始查找int find(const char* s, int pos &#x3D; 0) const; &#x2F;&#x2F; 查找s 第一次出现位置， 从pos 开始查找int find(const char* s, int pos, int n) const; &#x2F;&#x2F; 从pos 位置查找s 的前n 个字符第一次位置int find(const char c, int pos &#x3D; 0) const; &#x2F;&#x2F; 查找字符c 第一次出现的位置int rfind(const string&amp; str, int pos &#x3D; npos) const; &#x2F;&#x2F; 查找str 最后一次位置， 从pos 开始查找int rfind(const char* s, int pos &#x3D; npos) const;  &#x2F;&#x2F; 查找s 最后一次出现的位置， 从 pos 开始查找int rfind(const char *s, int pos, int n) const; &#x2F;&#x2F; 从 pos 查找s 的前n个字符最后一次的位置int rfind(const char c, int pos &#x3D; 0) const;  &#x2F;&#x2F; 查找字符C 最后一次出现的位置string&amp; replace(int pos, int n, const string&amp; str); &#x2F;&#x2F; 替换从 pos 开始n 个字符串为字符串为strstring&amp; replace(int pos, int n, const char*s);   &#x2F;&#x2F; 替换从 pos 开始的n个字符为字符串s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="string-比较"><a href="#string-比较" class="headerlink" title="string 比较"></a>string 比较</h4><pre class="line-numbers language-none"><code class="language-none">函数原型 ：int compare(const string &amp;s) const; &#x2F;&#x2F; 与字符串s比较int compare(const char *s) const; &#x2F;&#x2F; 与字符串s比较&#x2F;&#x2F; 字符串的比较&#x2F;&#x2F; 字符串比较是按字符串的 ASCII 码进行比较&#x2F;&#x2F; &#x3D; 返回0   &gt; 返回 1   &lt; 返回 -1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="string-字符存取"><a href="#string-字符存取" class="headerlink" title="string 字符存取"></a>string 字符存取</h4><pre class="line-numbers language-none"><code class="language-none">char&amp; operator[](int n); &#x2F;&#x2F; 通过 [] 方式取字符char&amp; at(int n);   &#x2F;&#x2F; 通过at方法获取字符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="string-插入和删除"><a href="#string-插入和删除" class="headerlink" title="string 插入和删除"></a>string 插入和删除</h4><pre class="line-numbers language-none"><code class="language-none">string&amp; insert(int pos, const char* s);   插入字符串string&amp; insert(int pos, const string&amp; str);  插入字符串string&amp; insert(int pos, int n, char c);  在指定位置插入n个字符cstring&amp; erase(int pos, int n &#x3D; npos);   删除从pos开始的n个字符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="string-字串"><a href="#string-字串" class="headerlink" title="string 字串"></a>string 字串</h4><pre class="line-numbers language-none"><code class="language-none">string substr(int pos &#x3D; 0, int n &#x3D; npos) const; 返回由pos 开始的n个字符组成的字符串<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h2><p>vector 数据结构和数组非常相似 ， 也称为单端数组<br>vector 与普通数组区别:<br>不同之处在于数组是静态空间， 而 vector 可以动态扩展<br>动态扩展： 并不是在原空间之后续接新空间， 而是找更大的内存空间， 然后将原数组拷贝新空间， 释放原空间<br>vector 容器的迭代器是支持随机访问的迭代器<br>![vector 容器]（E:\blog\source\images\C++ &amp; STL）</p><h3 id="vector-构造"><a href="#vector-构造" class="headerlink" title="vector 构造"></a>vector 构造</h3><pre class="line-numbers language-none"><code class="language-none">vector&lt;T&gt; v;   &#x2F;&#x2F; 采用模板实现类实现， 默认构造函数vector(v.begin(), v.end()); &#x2F;&#x2F; 将v[begin(),end()] 区间中的元素拷贝给本身vector(n,elem); &#x2F;&#x2F; 构造函数将 n 个elem 拷贝给本身vector(const vector &amp;vec);  &#x2F;&#x2F; 拷贝构造函数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 创建一个空的 vectorvector&lt;int&gt; v1;&#x2F;&#x2F; 拷贝构造vector&lt;int&gt; v2(v1);      &#x2F;&#x2F; array 转 vector，指定长度int arr[5] &#x3D; &#123;1, 2, 3, 4, 5&#125;;vector&lt;int&gt; v3(arr, arr + 5);&#x2F;&#x2F; 初始化元素个数为 5，每个值为 0vector&lt;int&gt; v4(5);  &#x2F;&#x2F; &#123;0,0,0,0,0&#125;&#x2F;&#x2F; 初始化元素个数为 5，每个值为 1vector&lt;int&gt; v5(5, 1);  &#x2F;&#x2F; &#123;1,1,1,1,1&#125;&#x2F;&#x2F; 赋值初始化，等同于 vector&lt;int&gt; v6 &#x3D; &#123;1,2,3,4,5&#125;vector&lt;int&gt; v6&#123;1,2,3,4,5&#125;;&#x2F;&#x2F; &#123;&#125; 用来进行列表初始化，如果其中的值无法用于列表初始化，编译器则用默认值初始化 vector 对象vector&lt;int&gt; v7&#123;2&#125;;           &#x2F;&#x2F; &#123;2&#125;vector&lt;string&gt; v8&#123;2&#125;;        &#x2F;&#x2F; 初始化长度为 2，每个值为空，&#123;&quot;&quot;, &quot;&quot;&#125;vector&lt;string&gt; v9&#123;2, &quot;hi&quot;&#125;;  &#x2F;&#x2F; 初始化长度为 2，每个值为 hi，&#123;&quot;hi&quot;, &quot;hi&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结： vector 的多种构造方式没有可比性， 灵活使用即可 </p><h3 id="vector-相关操作"><a href="#vector-相关操作" class="headerlink" title="vector 相关操作"></a>vector 相关操作</h3><h4 id="vector-赋值"><a href="#vector-赋值" class="headerlink" title="vector 赋值"></a>vector 赋值</h4><pre class="line-numbers language-none"><code class="language-none">vector&amp; operator&#x3D;(const vector &amp;vec)  &#x2F;&#x2F; 重载等号操作符 assign(beg, end);  &#x2F;&#x2F; 将[beg, end] 区间中的数据拷贝赋值给本身assign(n, elem);   &#x2F;&#x2F; 将 n 个elem 拷贝赋值给本身<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="vector-容量和大小"><a href="#vector-容量和大小" class="headerlink" title="vector 容量和大小"></a>vector 容量和大小</h4><pre class="line-numbers language-none"><code class="language-none">empty(); &#x2F;&#x2F; 判断容器是否为空capacity();  &#x2F;&#x2F; 容器的容量size();  &#x2F;&#x2F; 返回容器中元素的个数resize(int num);  &#x2F;&#x2F;  重新指定容器的长度为 num, 若容器变长， 则以默认值填充新位置。&#x2F;&#x2F; 如果容器变短， 则末尾超出容器长度的元素被删除。resize(int num, elem);    &#x2F;&#x2F; 重新指定容器的长度为 num, 若容器变长， 则以 elem 值填充新位置。&#x2F;&#x2F; 如果容器变短， 则末尾超出容器长度的元素被删除<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="vector-插入和删除"><a href="#vector-插入和删除" class="headerlink" title="vector 插入和删除"></a>vector 插入和删除</h4><pre class="line-numbers language-none"><code class="language-none">push_back(ele); &#x2F;&#x2F; 尾部插入元素 elepop_back();  &#x2F;&#x2F; 删除最后一个元素insert(const_iterator pos, ele); &#x2F;&#x2F; 迭代器指向位置pos 插入元素eleinsert(const_iterator pos, int count, ele);  &#x2F;&#x2F; 迭代器指向位置pos 插入count 个元素 eleerase(const_iterator pos);  &#x2F;&#x2F; 删除迭代器指向的元素erase(const_iterator start, const_iterator end);  &#x2F;&#x2F; 删除迭代器从start 到end 之间的元素clear();  &#x2F;&#x2F; 删除容器中的所有元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="vector-数据存取"><a href="#vector-数据存取" class="headerlink" title="vector 数据存取"></a>vector 数据存取</h4><pre class="line-numbers language-none"><code class="language-none">at(int idx)  &#x2F;&#x2F; 返回索引 idx 所指的数据operator[]; &#x2F;&#x2F; 返回索引中 idx 所指的数据front();  &#x2F;&#x2F; 返回容器中第一个数据元素 back();   &#x2F;&#x2F; 返回容器中最后一个数据元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="vector-互换容器"><a href="#vector-互换容器" class="headerlink" title="vector 互换容器"></a>vector 互换容器</h4><pre class="line-numbers language-none"><code class="language-none">swap(vec);   &#x2F;&#x2F;将vec 与本身的元素互换<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>基本使用</li><li>实际用途<br> 巧用 swap 可以收缩空间</li></ol><h4 id="vector-预留空间"><a href="#vector-预留空间" class="headerlink" title="vector 预留空间"></a>vector 预留空间</h4><p>减少vector 在动态扩展容量时的扩展次数<br>如果数据量较大， 可以一开始利用reserve 预留空间</p><pre class="line-numbers language-none"><code class="language-none">reserve (int len);   &#x2F;&#x2F;预留len个元素长度， 预留位置不初始化， 元素不可访问<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="vector-遍历"><a href="#vector-遍历" class="headerlink" title="vector 遍历"></a>vector 遍历</h3><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; for 语句体中不应改变其所遍历序列的大小&#x2F;&#x2F; 循环体内部含有向 vector 对象添加元素的语句，则不能使用 forvoid myPrint(int val)&#123;    cout &lt;&lt; val &lt;&lt; endl;&#125;&#x2F;&#x2F; 通过索引for(int i &#x3D; 0; i &lt; v.size(); ++i)&#123;    cout &lt;&lt; v[i] &lt;&lt; &quot; &quot;;&#125;cout &lt;&lt; endl;&#x2F;&#x2F; for loopfor (int i: v)&#123;    cout &lt;&lt; i &lt;&lt; &quot; &quot;;&#125;cout &lt;&lt; endl;while (itBegin !&#x3D; itEnd)&#123;    cout &lt;&lt; *itBegin &lt;&lt; endl;    itBegin++;&#125;&#x2F;&#x2F; 迭代器for (vector&lt;int&gt;::iterator i &#x3D; v.begin(); i !&#x3D; v.end(); i++)&#123;    cout &lt;&lt; *i &lt;&lt; &quot; &quot;;&#125;cout &lt;&lt; endl;&#x2F;&#x2F; 利用STL提供遍历算法  三个参数for_each(v.begin(), v.end(), myPrint);  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">最常用的容器 vector  算法： for_each迭代器： vector&lt;int&gt;::iterator<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="vector-容器嵌套容器"><a href="#vector-容器嵌套容器" class="headerlink" title="vector 容器嵌套容器"></a>vector 容器嵌套容器</h3><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 创建小容器    vector&lt;int&gt;v1;    vector&lt;int&gt;v2;    vector&lt;int&gt;v3;    vector&lt;int&gt;v4;    &#x2F;&#x2F; 向小容器中添加数据    for (int i &#x3D; 0; i &lt; 4; i++)    &#123;        v1.push_back(i+1);        v2.push_back(i+2);        v3.push_back(i+3);        v4.push_back(i+4);          &#125;    &#x2F;&#x2F; 将小容器插入到大容器中    v.push_back(v1);    v.push_back(v2);    v.push_back(v3);    v.push_back(v4);    &#x2F;&#x2F; 通过大容器， 把所有数据遍历一遍    for (vector&lt;vector&lt;int&gt;&gt;::iterator it &#x3D; v.begin(); it !&#x3D; v.end(); it++)    &#123;        for (vector&lt;int&gt;::iterator vit &#x3D; (*it).begin(); vit !&#x3D; (*it).end(); vit++)        &#123;            cout &lt;&lt; *vit &lt;&lt; &quot; &quot;;        &#125;        cout &lt;&lt; endl;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="deque-容器"><a href="#deque-容器" class="headerlink" title="deque 容器"></a>deque 容器</h2><p>deque 与 vector 区别<br>vector 对于头部的插入删除效率低, 数据量越大， 效率越低<br>deque 相对而言, 对头部的插入删除速度会比vector 快<br>vector 访问元素时的速度会比 deque 快 , 这和两者内部实现相关<br>vector 是一个连续的内存空间  deque 是双端数组 双向队列<br>deque 内部工作原理:<br>deque 内部 有个中控器， 维护每段缓冲区的内容， 缓冲区存放真实数据<br>中控器维护的时每个缓冲区的地址， 使得使用deque 时 像一片连续的内存空间<br>deque 容器的迭代器也是支持随机访问的</p><h3 id="deque-容器构造"><a href="#deque-容器构造" class="headerlink" title="deque 容器构造"></a>deque 容器构造</h3><pre class="line-numbers language-none"><code class="language-none">deque&lt;T&gt; deqT;   默认构造形式deque(beg, end);   构造函数将 [beg, end] 区间中的元素拷贝给本身deque(n, elem);   构造函数将n 个 elem 拷贝给本身deque(const deque &amp;deq);  拷贝构造函数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="deque-赋值操作"><a href="#deque-赋值操作" class="headerlink" title="deque 赋值操作"></a>deque 赋值操作</h3><pre class="line-numbers language-none"><code class="language-none">deque&amp; operator&#x3D;(const deque &amp;deq); &#x2F;&#x2F; 重载等号操作符assign(beg, end);  将[beg, end] &#x2F;&#x2F; 区间中的数据拷贝赋值给本身assign(n, elem); &#x2F;&#x2F; 将n个 elem 拷贝赋值给本身<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="deque-大小操作"><a href="#deque-大小操作" class="headerlink" title="deque 大小操作"></a>deque 大小操作</h3><pre class="line-numbers language-none"><code class="language-none">deque.empty()  &#x2F;&#x2F; 判断容器是否为空deque.size() &#x2F;&#x2F; 返回容器中元素的个数deque.resize(num)   &#x2F;&#x2F; 重新指定容器的长度为num, 若容器变长， 则以默认值填充新位置&#x2F;&#x2F; 如果容器变短， 则末尾超出容器长度的元素被删除deque.resize(num, elem) &#x2F;&#x2F; 重新指定容器的长度为 num, 若容器变长， 则以elem 值填充新位置&#x2F;&#x2F; 如果容器变短， 则末尾超出容器长度的元素被删除<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="deque-插入和删除"><a href="#deque-插入和删除" class="headerlink" title="deque 插入和删除"></a>deque 插入和删除</h3><pre class="line-numbers language-none"><code class="language-none">两端插入操作：push_back(elem);    &#x2F;&#x2F; 在容器尾部添加一个元素push_front(elem);  &#x2F;&#x2F; 在容器头部插入一个数据pop_back(); &#x2F;&#x2F; 删除容器最后一个数据pop_front(); &#x2F;&#x2F; 删除容器第一个数据指定位置操作insert(pos, elem);  &#x2F;&#x2F; 在pos 位置插入一个 elem 元素的拷贝， 返回新数据的位置insert(pos, n, elem); &#x2F;&#x2F; 在pos 位置插入n 个elem 数据， 无返回值insert(pos, beg, end); &#x2F;&#x2F; 在 pos 位置插入 [beg, end] 区间的数据, 无返回值clear(); &#x2F;&#x2F; 清空容器的所有数据erase(beg, end); &#x2F;&#x2F;  删除[beg, end] 区间的数据， 返回下一个数据的位置erase(pos); &#x2F;&#x2F; 删除pos 位置的数据， 返回下一个数据的位置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="deque-数据存取"><a href="#deque-数据存取" class="headerlink" title="deque 数据存取"></a>deque 数据存取</h3><pre class="line-numbers language-none"><code class="language-none">at(int idx); &#x2F;&#x2F; 返回索引idx 所指的数据operator[]; &#x2F;&#x2F; 返回索引idx 所指的数据front(); &#x2F;&#x2F; 返回容器中的一个元素back(); &#x2F;&#x2F; 返回容器中的最后一个元素 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="deque-排序"><a href="#deque-排序" class="headerlink" title="deque 排序"></a>deque 排序</h3><p>利用算法实现对deque 容器进行排序</p><pre class="line-numbers language-none"><code class="language-none">sort(iterator beg, iterator end) &#x2F;&#x2F; 对beg 和 end 区间内元素 进行排序<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h2><p>栈中只有顶部才可以被外界使用， 因此栈不可以有遍历行为<br>栈中进入数据称为 入栈 push<br>弹出 pop</p><h3 id="stack-构造函数"><a href="#stack-构造函数" class="headerlink" title="stack 构造函数"></a>stack 构造函数</h3><pre class="line-numbers language-none"><code class="language-none">stack&lt;T&gt; stk;    &#x2F;&#x2F; stack 采用模板类实现， stack 对象的默认构造形式stack(const stack &amp;stk) &#x2F;&#x2F; 拷贝构造函数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="stack赋值操作"><a href="#stack赋值操作" class="headerlink" title="stack赋值操作"></a>stack赋值操作</h3><pre class="line-numbers language-none"><code class="language-none">stack&amp; operator&#x3D;(const stack &amp;stk) &#x2F;&#x2F; 重载等号操作符<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="stack数据存取"><a href="#stack数据存取" class="headerlink" title="stack数据存取"></a>stack数据存取</h3><pre class="line-numbers language-none"><code class="language-none">push(elem) &#x2F;&#x2F; 向栈顶添加元素pop() &#x2F;&#x2F; 从栈顶移除第一个元素top() &#x2F;&#x2F; 返回栈顶元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="stack-大小操作"><a href="#stack-大小操作" class="headerlink" title="stack 大小操作"></a>stack 大小操作</h3><pre class="line-numbers language-none"><code class="language-none">empty() &#x2F;&#x2F; 判断堆栈是否为空size() &#x2F;&#x2F; 返回栈的大小<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h2><p>先进先出的数据结构 有两个接口<br>只有对头和队尾被外界访问， 因此不允许有遍历行为<br><code> push</code> 入队<br><code>pop</code> 出队</p><h3 id="queue-函数原型"><a href="#queue-函数原型" class="headerlink" title="queue 函数原型"></a>queue 函数原型</h3><p>queue<T> que; &#x2F;&#x2F; 采用模板类实现， queue &#x2F;&#x2F; 对象的默认构造形式<br>queue(const queue &amp;que) &#x2F;&#x2F; 拷贝构造函数</p><h3 id="queue-赋值操作"><a href="#queue-赋值操作" class="headerlink" title="queue 赋值操作"></a>queue 赋值操作</h3><pre class="line-numbers language-none"><code class="language-none">queue&amp; operator&#x3D;(const queue &amp;que) &#x2F;&#x2F; 重载等号操作符<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="queue数据存取"><a href="#queue数据存取" class="headerlink" title="queue数据存取"></a>queue数据存取</h3><p>push(elem) &#x2F;&#x2F; 往队尾添加元素<br>pop() &#x2F;&#x2F; 从对头移除第一个元素<br>back() &#x2F;&#x2F; 返回最后一个元素<br>front() &#x2F;&#x2F; 返回第一个元素</p><h3 id="queue大小操作"><a href="#queue大小操作" class="headerlink" title="queue大小操作"></a>queue大小操作</h3><pre class="line-numbers language-none"><code class="language-none">empty() &#x2F;&#x2F; 判断堆栈是否为空size() &#x2F;&#x2F; 返回栈的大小<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="list-容器"><a href="#list-容器" class="headerlink" title="list 容器"></a>list 容器</h2><p>功能： 将数据进行链式存储<br>链表是一种物理存储单元上非连续的存储结构， 数据元素的逻辑顺序是通过链表中的指针链接实现的<br>链表的组成： 链表由一系列结点组成<br>结点的组成： 一个是存储数据元素的数据域， 另一个是存储下一个结点地址的指针域<br>STL 中的链表是一个双向循环链表</p><p>由于链表的存储方式并不是连续的内存空间， 因此链表list中的迭代器只支持前移和后移， 属于双向迭代器</p><p>优点：<br>采用动态存储分配， 不会造成内存浪费和溢出<br>链表执行插入和删除操作十分方便， 修改指针即可， 不需要移动大量元素</p><p>缺点： 链表灵活， 但是空间（指针域）和时间（遍历）额外耗费较大</p><p>list 有一个重要性质： 插入操作和删除操作都不会造成原有list 迭代器的失效， 这在vector 是不成立的</p><p>总结： STL 中的 list 和 vector 是两个最常被使用的容器， 各有优缺点</p><h3 id="list-构造函数"><a href="#list-构造函数" class="headerlink" title="list 构造函数"></a>list 构造函数</h3><pre class="line-numbers language-none"><code class="language-none">list&lt;T&gt; lst;  &#x2F;&#x2F; list 采用模板类实现对象的默认构造形式list(beg, end); &#x2F;&#x2F; 构造函数将[beg, end] 区间中的元素拷贝给本身list(n, elem); &#x2F;&#x2F; 构造函数将 n 个elem 拷贝给本身list(const list &amp;lst); &#x2F;&#x2F; 拷贝构造函数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="list-赋值和交换"><a href="#list-赋值和交换" class="headerlink" title="list 赋值和交换"></a>list 赋值和交换</h3><pre class="line-numbers language-none"><code class="language-none">assign(beg, end)   将(beg, end) &#x2F;&#x2F; 区间中的数据拷贝赋值给本身assign(n, elem) &#x2F;&#x2F; 将 n 个elem 拷贝赋值给本身list&amp; operator&#x3D;(const list &amp;lst) &#x2F;&#x2F; 重载等号操作符swap(lst) &#x2F;&#x2F; 将lst 与本身的元素互换<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="list-大小进行操作"><a href="#list-大小进行操作" class="headerlink" title="list 大小进行操作"></a>list 大小进行操作</h3><pre class="line-numbers language-none"><code class="language-none">size() &#x2F;&#x2F; 返回容器中元素的个数empty() &#x2F;&#x2F; 判断容器是否为空resize(num) &#x2F;&#x2F; 重新指定容器的长度为num  若容器变长， 则以默认值填充位置&#x2F;&#x2F; 若容器变短， 则末尾超出容器的长度的元素被删除resize(num, elem) &#x2F;&#x2F; 重新指定容器的长度为 num. 若容器变长， 则以elem 值填充新位置。           &#x2F;&#x2F; 如果容器变短， 则末尾超出容器长度的元素被删除<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="list-插入和删除"><a href="#list-插入和删除" class="headerlink" title="list 插入和删除"></a>list 插入和删除</h3><pre class="line-numbers language-none"><code class="language-none">push_back(elem); &#x2F;&#x2F; 在容器尾部加入一个元素pop_back(); &#x2F;&#x2F; 删除容器中最后一个元素push_front(elem); &#x2F;&#x2F; 从容器开头插入一个元素pop_front(); &#x2F;&#x2F; 从容器开头移除第一个元素insert(pos, elem);   &#x2F;&#x2F; 从pos 位置插入 elem 元素的拷贝， 返回新数据的位置insert(pos, n, elem); &#x2F;&#x2F; 在 pos 位置插入n 个elem 数据， 无返回值insert(pos, beg, end); &#x2F;&#x2F; 在pos 位置插入 [beg, end] 区间的数据， 无返回值clear(); &#x2F;&#x2F; 移除容器的所有数据erase(beg, end)；  &#x2F;&#x2F; 删除[beg, end] 区间的数据， 返回下一个数据的位置erase(pos); &#x2F;&#x2F; 删除pos位置的数据， 返回下一个数据的位置remove(elem); &#x2F;&#x2F; 删除容器中所有与elem 值匹配的元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="list-数据存取"><a href="#list-数据存取" class="headerlink" title="list 数据存取"></a>list 数据存取</h3><pre class="line-numbers language-none"><code class="language-none">front(); &#x2F;&#x2F; 返回第一个元素back(); &#x2F;&#x2F; 返回最后一个元素&#x2F;&#x2F; 不可以用 [] 访问list 容器中的元素&#x2F;&#x2F; 不可以用 at 方式访问 list 容器中的元素&#x2F;&#x2F; 原因是 list 本质链表， 不是用连续性空间存取数据， 迭代器也是不支持随机访问的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="list-反转和排序"><a href="#list-反转和排序" class="headerlink" title="list 反转和排序"></a>list 反转和排序</h3><pre class="line-numbers language-none"><code class="language-none">reverse(); &#x2F;&#x2F; 反转链表sort(); &#x2F;&#x2F; 链表排序<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="set-multiset-容器"><a href="#set-multiset-容器" class="headerlink" title="set&#x2F; multiset 容器"></a>set&#x2F; multiset 容器</h2><p>所有元素都会在插入时自动被排序<br>本质： set&#x2F; multiset 属于关联式容器， 底层结构是用 二叉树实现</p><p>set 与 multiset 区别：<br>set 不允许容器中有重复的元素<br>multiset 允许容器中有重复的元素</p><h3 id="set-构造和赋值"><a href="#set-构造和赋值" class="headerlink" title="set 构造和赋值"></a>set 构造和赋值</h3><p>功能： 创建set 容器 以及赋值</p><pre class="line-numbers language-none"><code class="language-none">set&lt;T&gt; st;  默认构造函数set(const set &amp;st);  拷贝构造函数set&amp; operator&#x3D;(const set &amp;st);   重载等号操作符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="set-插入数据"><a href="#set-插入数据" class="headerlink" title="set 插入数据"></a>set 插入数据</h3><p>只有 insert 方式</p><h3 id="set-大小和交换"><a href="#set-大小和交换" class="headerlink" title="set 大小和交换"></a>set 大小和交换</h3><p>统计set 容器大小以及交换 set 容器</p><pre class="line-numbers language-none"><code class="language-none">size();   &#x2F;&#x2F; 返回容器中元素的数据empty(); &#x2F;&#x2F; 判断容器是否为空swap(st); &#x2F;&#x2F; 交换两个集合容器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="set-容器插入和删除"><a href="#set-容器插入和删除" class="headerlink" title="set 容器插入和删除"></a>set 容器插入和删除</h3><p>set 容器进行插入数据和删除数据</p><pre class="line-numbers language-none"><code class="language-none">insert(elem); &#x2F;&#x2F; 在容器中插入元素clear(); &#x2F;&#x2F; 清除所有元素erase(pos); &#x2F;&#x2F; 删除pos 迭代器所指的元素， 返回下一个元素的迭代器erase(beg, end); &#x2F;&#x2F; 删除区间[beg, end]的所有元素， 返回下一个元素的迭代器erase(elem); &#x2F;&#x2F; 删除容器中值为 elem 的元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="set-查找和统计"><a href="#set-查找和统计" class="headerlink" title="set 查找和统计"></a>set 查找和统计</h3><pre class="line-numbers language-none"><code class="language-none">find(key); &#x2F;&#x2F; 查找 key 是否存在，若存在，返回该键的元素的迭代器； 若不存在， 返回set.end();count(key); &#x2F;&#x2F; 统计 key 的元素个数  对于set 而言 统计结果要么是0 要么是 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="pair-对组创建"><a href="#pair-对组创建" class="headerlink" title="pair 对组创建"></a>pair 对组创建</h3><p>成对出现的数据， 利用对组可以返回两个数据</p><p>两种创建方式</p><pre class="line-numbers language-none"><code class="language-none">pair&lt;type, type&gt; p (value1, value2); pair&lt;type, type&gt; p &#x3D; make_pair(value1, value2);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="set-容器排序"><a href="#set-容器排序" class="headerlink" title="set 容器排序"></a>set 容器排序</h3><p>set 容器默认排序规则为从小到大， 掌握如何改变排序规则<br>主要技术点： 利用仿函数， 可以改变排序规则</p><h2 id="map-multimap-容器"><a href="#map-multimap-容器" class="headerlink" title="map&#x2F;multimap 容器"></a>map&#x2F;multimap 容器</h2><h3 id="map-基本概念"><a href="#map-基本概念" class="headerlink" title="map 基本概念"></a>map 基本概念</h3><p>简介：<br>map 中所有元素都是 pair<br>pair 中第一个元素为 key（键值）， 起到索引作用， 第二个元素为 value(实值)<br>所有元素都会根据元素的键值自动排序</p><p>本质：<br>map&#x2F; multimap 属于关联式容器， 底层结构是用二叉树实现</p><p>优点：<br>可以根据 key 值快速找到 value 值</p><p>map 和 multimap 区别：<br>map 不允许容器中有重复的 key 值元素<br>multimap 允许 容器中有重复 key 值元素</p><h3 id="map-构造和赋值"><a href="#map-构造和赋值" class="headerlink" title="map 构造和赋值"></a>map 构造和赋值</h3><p>对 map 容器经行构造和赋值操作</p><pre class="line-numbers language-none"><code class="language-none">map&lt;T1, T2&gt; mp;   &#x2F;&#x2F; map 默认构造函数map(const map &amp;mp);   &#x2F;&#x2F; 拷贝构造函数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="map-赋值"><a href="#map-赋值" class="headerlink" title="map 赋值"></a>map 赋值</h3><pre class="line-numbers language-none"><code class="language-none">map&amp; operator&#x3D;(const map &amp;mp);   &#x2F;&#x2F; 重载等号操作符<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="map-大小和交换"><a href="#map-大小和交换" class="headerlink" title="map 大小和交换"></a>map 大小和交换</h3><pre class="line-numbers language-none"><code class="language-none">size()   &#x2F;&#x2F; 返回容器中元素的数目empty()   &#x2F;&#x2F; 判断容器是否为空swap(st)   &#x2F;&#x2F; 交换两个集合容器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="map-插入和删除"><a href="#map-插入和删除" class="headerlink" title="map 插入和删除"></a>map 插入和删除</h3><p>map 容器进行插入数据和删除数据</p><pre class="line-numbers language-none"><code class="language-none">insert(elem);   &#x2F;&#x2F; 在容器中插入数据&#x2F;&#x2F; 第一种m.insert(pair&lt;int, int&gt;(1, 10)); &#x2F;&#x2F; 第二种m.insert(make_pair(2, 20));&#x2F;&#x2F; 第三种m.insert(map&lt;int, int&gt;::value_type(3, 30));&#x2F;&#x2F; 第四种   [] 不建议插入， 用途 可以利用 key 访问 valuem[4] &#x3D; 40;clear();    &#x2F;&#x2F; 清除所有元素  m.erase(begin(), end());erase(pos);  &#x2F;&#x2F; 删除 pos 迭代器所指的元素， 返回下一个元素的迭代器m.erase(m.begin());m.erase(3);  &#x2F;&#x2F; 按照 key 来删除erase(beg, end);  &#x2F;&#x2F; 删除区间 [beg, end] 的所有元素， 返回下一个元素的迭代器erase(key);  &#x2F;&#x2F; 删除容器中的值为 key 的元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="map-查找和统计"><a href="#map-查找和统计" class="headerlink" title="map 查找和统计"></a>map 查找和统计</h3><p>map 容器进行查找数据以及统计数据</p><pre class="line-numbers language-none"><code class="language-none">find(key);    &#x2F;&#x2F; 查找key是否存在， 若存在， 返回该键的元素的迭代器； 若不存在， 返回set.end();count(key);   &#x2F;&#x2F; 统计 key 元素的个数 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="map-容器排序"><a href="#map-容器排序" class="headerlink" title="map 容器排序"></a>map 容器排序</h3><p>按照 key 值进行从小到大排序， 掌握如何改变 排序规则</p><p>主要技术点： 利用仿函数， 可以改变排序规则</p><pre class="line-numbers language-none"><code class="language-none">对于自定义数据类型， map 必须要指定排序规则， 同 set 容器class myCompare&#123;public:    bool operator()(int v1, int v2)    &#123;        &#x2F;&#x2F; 降序        return v1 &gt; v2;    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 默认从小到大排map&lt;int, int, myCompare&gt; m;m.insert(make_pair(1, 10));m.insert(make_pair(2, 20));m.insert(make_pair(3, 30));m.insert(make_pair(4, 40));m.insert(make_pair(5, 50));for (map&lt;int, int&gt;::iterator it &#x3D; m.begin(); it !&#x3D; m.end(); it++)&#123;    cout &lt;&lt; &quot;key &#x3D; &quot; &lt;&lt; it-&gt;first &lt;&lt; &quot; value &#x3D; &quot; &lt;&lt; it-&gt;second &lt;&lt; endl;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Code Completion 代码大全读书笔记</title>
      <link href="/2024/01/05/codecompletion/"/>
      <url>/2024/01/05/codecompletion/</url>
      
        <content type="html"><![CDATA[<h2 id="软件构建"><a href="#软件构建" class="headerlink" title="软件构建"></a>软件构建</h2><p>开发软件是一个复杂的过程：</p><ul><li>定义问题（problem definition）</li><li>需求分析（requirements development）</li><li>规划构建（construction planning）</li><li>软件架构（software architecture）</li><li>详细设计（detailed design）</li><li>编码与测试（coding and debugging）</li><li>单元测试（unit testing）</li><li>集成测试（integration testing）</li><li>集成（integration）</li><li>系统测试（system testing）</li><li>保障维护（corrective maintenance）</li></ul><p>构建活动中具体任务：</p><ul><li>验证有关的基础工作已经完成，因此构建活动可以顺利地进行下去</li><li>确定如何测试所写的代码</li><li>设计并编写类（class）和子程序（routine）</li><li>创建并命名变量（variable）和具名常量（named constant）</li><li>选择控制结构（control structrue），组织语句块</li><li>对你的代码进行单元测试和集成测试，并排除其中的错误</li><li>评审开发团队其他成员的底层设计和代码，并让他们评审你的工作</li><li>润饰代码，仔细进行代码的格式化和注释</li><li>将单独开发的多个软件组集成为一体</li><li>调整代码（tuning code），让它更快，更节省资源</li></ul><p>构建重要的原因：</p><ul><li>构建活动是软件开发的主要组成部分</li><li>构建活动是软件开发的核心活动</li><li>把主要精力集中于构建活动，可以大大提高程序员的生产率</li><li>构建活动的产物——源代码，往往是对软件的唯一精确描述</li><li>构建活动是唯一一项确保会完成的工作</li></ul><h3 id="Key-Points"><a href="#Key-Points" class="headerlink" title="Key Points"></a>Key Points</h3><ul><li>软件构建是软件开发的核心活动：构建活动是每个项目中唯一一项必不可少的工作</li><li>软件构建的主要活动包括：详细设计、编码、测试、集成、开发者测试（包括单元测试和集成测试）</li><li>构建也常被称作『编码』和『编程』</li><li>构建活动的质量对软件的质量有着实质性的影响</li><li>对『如何进行构建』的理解程度，决定程序员的优秀程度</li></ul><h2 id="隐喻软件开发"><a href="#隐喻软件开发" class="headerlink" title="隐喻软件开发"></a>隐喻软件开发</h2><p>隐喻的价值绝不应被低估。隐喻的优点在于其可预期的效果：能被所有的人理解。不必要的沟通和误解也因此大为减低，学习与教授更为快速。实际上，隐喻是对概念进行内在化（internalizing）和抽象（abstracting）的一种途径，它让人们在更高的层面上思考问题，从而避免低层次的错误。</p><h3 id="Key-Points-1"><a href="#Key-Points-1" class="headerlink" title="Key Points"></a>Key Points</h3><ul><li>隐喻是启示而不是算法。因此它们往往有一点随意（sloopy）</li><li>隐喻把把软件开发过程与其他你熟悉的活动联系在一起，帮助你更好理解</li><li>有些隐喻比其他一些隐喻更贴切</li><li>通过把软件的构建过程比作是房屋的建设过程，我们可以发现，仔细的准备是必要的，而大型项目和小型项目之间也是有差异的</li><li>通过把软件开发中的实践比作是智慧工具箱中的工具，我们又发现，每位程序员有许多工具，但并不存在任何一个能适用于所有工作的工具，因地制宜地选择正确工具是成为能有效编程的程序员的关键</li><li>不同的隐喻彼此并不排斥，应当使用对你最有益处的某种隐喻组合</li></ul><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>准备工作的中心目标就是降低风险</p><p>优秀的程序员永远是紧缺的。人生苦短，当有大量更好的选择在你面前的时候，在一个蛮荒的软件企业中工作是不明智的</p><p>发现错误的实践要尽可能接近引入该错误的时间。需求的缺陷就有可能在系统中潜伏长时间，代价更加昂贵。</p><p>问题定义应该用客户的语言来书写，而且应该从客户的角度描述问题。</p><p>明确的需求有助于确保是用户驾驭系统的功能。重视需求有助于减少开始编程开发之后的系统变更情况。充分详尽地描述需求是项目成功的关键，它甚至很可能比有效的架构建技术更加重要。</p><h3 id="稳定需求的神话"><a href="#稳定需求的神话" class="headerlink" title="稳定需求的神话"></a>稳定需求的神话</h3><p>稳定的需求是软件开发的圣杯。对一个典型项目来说，在编写代码之前，客户无法可靠地描述他们想要的是什么，开发过程能够帮助客户更好地理解自己的需求，这是需求变更的主要来源。</p><h3 id="构建期间处理需求变更"><a href="#构建期间处理需求变更" class="headerlink" title="构建期间处理需求变更"></a>构建期间处理需求变更</h3><ul><li>使用需求核对表评估需求的质量。需求不够好就停止工作，直到做好再继续前进</li><li>确保每一个人都知道需求变更的代价。『进度』和『成本』这两个字眼比咖啡和洗冷水澡都要提神</li><li>建立一套变更控制的程序。</li><li>使用能适应变更的开发方法。缩短开发周期，以便更快地响应用户的需求</li><li>放弃这个项目。如果需求特别糟糕或者极不稳定，就取消这个项目</li><li>注意项目的商业案例，那些记得『考虑自己的决定所带来的商业影响』的程序员的身价与黄金相当</li></ul><h3 id="架构的典型组成部分"><a href="#架构的典型组成部分" class="headerlink" title="架构的典型组成部分"></a>架构的典型组成部分</h3><h4 id="程序组织"><a href="#程序组织" class="headerlink" title="程序组织"></a>程序组织</h4><p>系统架构首先要以概括的形式对有关系统做一个综述。架构应该定义程序的主要构造块。应该明确定义各个构造块的责任。每个构造块应该负责某一个区域的事情，并且对其他构造块负责的区域知道得越少越好。</p><h4 id="主要的类"><a href="#主要的类" class="headerlink" title="主要的类"></a>主要的类</h4><p>架构应该详细定义所用的主要的类。对那些构成系统 80% 的行为的 20% 的类进行详细说明</p><h4 id="数据设计"><a href="#数据设计" class="headerlink" title="数据设计"></a>数据设计</h4><p>架构应该描述所用到的主要文件和数据表的设计。数据通常只应该由一个子系统或一个类直接访问。架构应详细定义所用数据库的高层组织结构和内容。</p><h4 id="业务规则"><a href="#业务规则" class="headerlink" title="业务规则"></a>业务规则</h4><p>如果架构依赖于特定的业务规则，那么它就应该详细描述这些规则，并描述这些规则对系统设计的影响</p><h4 id="用户界面设计"><a href="#用户界面设计" class="headerlink" title="用户界面设计"></a>用户界面设计</h4><p>用户界面常常在需求阶段进行详细说明。架构应该模块化，以便替换新用户界面时不影响业务规则和程序的输出部分。</p><h4 id="资源管理"><a href="#资源管理" class="headerlink" title="资源管理"></a>资源管理</h4><p>架构应该描述一份管理稀缺资源的计划。稀缺资源包括数据库连接、线程、句柄登。</p><h4 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h4><p>架构应该描述实现设计层面和代码层面的安全性的方法。</p><h4 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h4><p>如果需要关注性能，就应该在需求中详细定义性能目标。</p><h4 id="可伸缩性"><a href="#可伸缩性" class="headerlink" title="可伸缩性"></a>可伸缩性</h4><p>可伸缩性是指系统增长以满足未来需求的能力。架构应该描述系统如何应对用户数量、服务器数量、网络节点数量、数据库记录数、数据库记录长度、交易量等的增长。</p><h4 id="互用性"><a href="#互用性" class="headerlink" title="互用性"></a>互用性</h4><p>如果预计这个系统会与其他软件或硬件共享数据或资源，架构应该描述如何完成这一任务</p><h4 id="国际化-本地化"><a href="#国际化-本地化" class="headerlink" title="国际化&#x2F;本地化"></a>国际化&#x2F;本地化</h4><p>架构应该表现出已经考虑过典型字符串问题和字符集的问题。</p><h4 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h4><p>架构应该详细定义读取策略是先做、后做还是即时做。应该描述那一层上检测 IO 错误</p><h4 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h4><p>最好在架构层面对待错误处理问题</p><h4 id="容错性"><a href="#容错性" class="headerlink" title="容错性"></a>容错性</h4><p>架构应该详细定义所期望的容错种类</p><h4 id="可行性"><a href="#可行性" class="headerlink" title="可行性"></a>可行性</h4><p>架构应该论证系统的可行性</p><h4 id="过度工程"><a href="#过度工程" class="headerlink" title="过度工程"></a>过度工程</h4><p>健壮性是指系统再检测到错误后继续运行的能力。详细定义一种过度工程的方法尤其重要</p><h4 id="复用"><a href="#复用" class="headerlink" title="复用"></a>复用</h4><p>架构应该说明如何对复用的软件加工，使之符合其他架构目标</p><h4 id="变更策略"><a href="#变更策略" class="headerlink" title="变更策略"></a>变更策略</h4><p>让架构更灵活，能够适应可能出现的变化。架构应当清除地描述处理变更的策略。</p><h4 id="架构的总体质量"><a href="#架构的总体质量" class="headerlink" title="架构的总体质量"></a>架构的总体质量</h4><p>架构应该是带有少许特别附加物的精炼且完整的概念体系。架构的目标应该清晰地表述。架构应该描述所有主要决策的动机。架构应该明确地指出有风险的区域。架构应该包含多个视图。</p><h3 id="花费时长"><a href="#花费时长" class="headerlink" title="花费时长"></a>花费时长</h3><p>一个运作良好的项目会在需求、架构以及其他前期计划方面投入 10%<del>20% 的工作量和 20%</del>30% 的时间。</p><h3 id="Key-Points-2"><a href="#Key-Points-2" class="headerlink" title="Key Points"></a>Key Points</h3><ul><li>构建活动的准备工作的根本目标在于降低风险。要确认你的准备活动是在降低风险，而非增加风险</li><li>如果你想要开发高质量的软件，软件开发过程必须由始至终关注质量。</li><li>程序员的一部分工作是教育老板和合作者，告诉他们软件开发过程中，包括再开始编程前进行充分准备的重要性</li><li>你所从事的软件项目类型对构建活动的前期准备有重大影响</li><li>如果没有明确的问题定义，那么你可能会在构建期间解决错误的问题</li><li>如果没有做完良好的需求分析工作，你可能没能察觉待解决问题的重要细节。如果需求变更发生在构建之后的阶段，其代价是再项目早期更改需求的 20 至 100 倍</li><li>如果没有做完良好的架构设计，你可能会在构建期间用错误的方法解决正确的问题。架构变更的代价随着为错误的架构编写的代码数量增加而增加</li><li>理解项目的前期准备所采用的方法，并相应地选择构建方法</li></ul><h2 id="构建决策"><a href="#构建决策" class="headerlink" title="构建决策"></a>构建决策</h2><h3 id="选择编程语言"><a href="#选择编程语言" class="headerlink" title="选择编程语言"></a>选择编程语言</h3><p>编程语言的选择从多个方面影响生产率和代码质量。编程语言影响程序员的思维。</p><h3 id="编程约定"><a href="#编程约定" class="headerlink" title="编程约定"></a>编程约定</h3><p>实现必须与架构保持一致，并且这种一致性是内在的、固有的。这正是变量名称、类的名称、子程序名称、格式约定、注释约定等这些针对构建活动的指导方针的关键所在。</p><p>如果你使用的语言缺乏你希望用的构件，或者倾向于出现其他种类的问题，那就应该试着去弥补它。发现你自己的编码约定、标准、类库以及其他改进措施。</p><h3 id="Key-Points-3"><a href="#Key-Points-3" class="headerlink" title="Key Points"></a>Key Points</h3><ul><li>每种编程语言都有其优点和缺点。要知道你使用语言的明确优点和缺点</li><li>在开始编程之前，做好一些约定。改变代码使之符合这些约定是近乎不可能的</li><li>构建的实践方法的种类比任何单个项目能用到的要多。有意识地选择最适合你的项目的实践方法</li><li>记得深入一种语言去编程，不要仅再一种语言上编程</li><li>确定在技术在浪潮中的位置，并相应调整计划和预期目标</li></ul><h2 id="软件构建中的设计"><a href="#软件构建中的设计" class="headerlink" title="软件构建中的设计"></a>软件构建中的设计</h2><h3 id="设计中的挑战"><a href="#设计中的挑战" class="headerlink" title="设计中的挑战"></a>设计中的挑战</h3><p>你必须首先把这个问题解决一遍以便能够明确地定义它，然后再次解决该问题，从未形成一个可行的方案。</p><p>犯错正是设计的关键所在，在设计阶段犯错并加以改正，其代价要比在编码后才发现同样的错误并彻底修改低得多。</p><p>设计者工作的一个关键内容就是去衡量彼此冲突的各项设计特性，并尽力在其中寻求平衡。</p><p>设计的要点，一部分是在创造可能发生的事情，而另一部分又是在限制可能发生的事情。</p><p>设计是在不断地设计评估、非正式讨论、写试验代码以及修改试验代码中演化和完善的</p><h3 id="关键的设计概念"><a href="#关键的设计概念" class="headerlink" title="关键的设计概念"></a>关键的设计概念</h3><p>管理复杂度是软件开发中最为重要的技术话题。在软件架构的层次上，可以通过把整个系统分解为多个子系统来降低问题的复杂度。保持子程序的短小精悍也能帮助减少思考的负担。从问题的领域着手，而不是从底层实现细节入手编程，在最抽象的层次上工作也能减少人脑力负担。</p><p>应对复杂度：</p><ul><li>把任何人在同一时间需要处理的本质复杂度降到最低</li><li>不要让偶然复杂度无谓地快速增长</li></ul><h3 id="理想的设计特征"><a href="#理想的设计特征" class="headerlink" title="理想的设计特征"></a>理想的设计特征</h3><ul><li>最小的复杂度（Minimal complexity）：做出简单易于理解的设计</li><li>易于维护（Ease of maintenance）：设计时为做维护工作的程序员着想</li><li>松散耦合（loose coupling）：设计出相互关联尽可能最少的类</li><li>可扩展性（extensibility）：能增强系统的功能而无须破坏其底层结构</li><li>可重用性（reusability）：设计的系统的组成部分能在其他系统中重复使用</li><li>高扇入（high fan-in）：设计出的系统很好地利用较低层的工具类</li><li>低扇出（low fan-out）：让一个类少量或适中地使用其他类</li><li>可移植性（portability）：设计的系统能方便地移植到其他系统中</li><li>精简性（leanness）：设计出的系统没有多余的部分</li><li>层次性（stratification）：尽量保持系统各个分解层的层次性，使得能在任意的层面上观察系统而不需要进入其他层次</li><li>标准技术（Standard techniques）：尽量用标准化的、常用的方法，是整个系统给人以一种熟悉的感觉</li></ul><h3 id="设计的层次"><a href="#设计的层次" class="headerlink" title="设计的层次"></a>设计的层次</h3><p><strong>第一层：软件系统</strong></p><p>往往从子系统或包这些类的更高层次上来思考更有益处</p><p><strong>第二层：分解为子系统或包</strong></p><p>这一层次上设计的主要目的是识别出所有的子系统，不同子系统之间相互通信的规则，限制子系统之间的通信能让每个子系统更有存在意义。</p><p>常用的子系统：</p><ul><li>业务规则：计算机系统中编入的法律、规则、政策以及过程</li><li>用户界面：创建一个子系统将用户界面组件同其他部分分隔起来，以便于用户界面的演化不会破坏程序的其余部分</li><li>数据库访问：将数据库的访问实现细节隐藏起来，减少程序的复杂度</li><li>对系统的依赖性：把对操作系统的依赖因素归到一个子系统中，就如同把对硬件的依赖因素封装起来一样</li></ul><p><strong>第三层：分解为类</strong></p><p>这一层次上设计包括识别出系统中所有的类。把所有子系统进行适当的分解，并确保分解出的细节恰到好处，能够用单个的类实现。</p><p><strong>第四层：分解成子程序</strong></p><p>完整地定义类内部的子程序，常常会有助于更好地理解类的接口。</p><p><strong>第五层：子程序内部的设计</strong></p><p>设计工作包括编写伪代码、选择算法、组织子程序内部的代码块，以及用编程语言编写代码</p><h3 id="设计构造块"><a href="#设计构造块" class="headerlink" title="设计构造块"></a>设计构造块</h3><p>使用对象进行设计的步骤：</p><ol><li>辨识对象及其属性（方法和数据），深入挖掘问题领域可能会得出更好的设计方案</li><li>确定可以对各个对象进行的操作</li><li>确定各个对象对其他对象进行的操作，包含还是继承</li><li>确定对象的哪些部分对其他对象可见</li><li>定义每个对象的公开接口</li></ol><p><strong>形成一致的抽象</strong></p><p>以复杂度的观点，抽象的主要好处就在于它使你能忽略无关的细节。抽象是我们用来得以处理现实世界中复杂度的一种重要手段</p><p><strong>封装实现细节</strong></p><p>封装帮助你管理复杂度的方法是不让你看到那些复杂度</p><p><strong>当继承能简化设计就继承</strong></p><p><strong>信息隐藏</strong></p><p>信息隐藏是结构化设计与面向对象设计的基础之一。信息隐藏在不断增上、大量变化的环境中尤其有用。在设计一个类的时候，一项关键性的决策就是决定类的哪些特性应该对外可见，而哪些特性应该隐藏起来。类的接口应该尽可能少地暴露其内部工作机制。隐藏设计决策对于减少『改动所影响的代码量』而言是至关重要的</p><p>信息隐藏主要分为两大类：</p><ul><li>隐藏复杂度，这样你就不用再去应付它，除非你要特别关注的时候</li><li>隐藏变化源，每当发生变化的时候，影响就能被限制在局部范围内</li></ul><p>信息隐藏的障碍：</p><ul><li>信息过度分散</li><li>循环依赖</li><li>把类数据误以为全局数据</li><li>可以觉察的性能损耗</li></ul><p>找出容易改变的区域：</p><ul><li>找出看起来容易变化的项目</li><li>把容易变化的项目分离出来</li><li>把看起来容易变化的项目隔离开来</li><li>业务规则</li><li>对硬件的依赖性</li><li>输入和输出</li><li>非标准的语言特性</li><li>困难设计区域和构建区域</li><li>状态变量</li><li>数据量的限制</li></ul><p><strong>保持松散耦合</strong></p><p>耦合度表示类与类之间或者子程序之间关系的紧密程度。</p><p>耦合标准：</p><ul><li>规模</li><li>可见性</li><li>灵活性</li></ul><p>耦合种类：</p><ul><li>简单数据参数耦合</li><li>简单对象耦合</li><li>对象参数耦合</li><li>语义上的耦合</li></ul><p>松散耦合的关键之处在于，一个有效得到模块提供一层附加的抽象。</p><p><strong>查阅常用的设计模式</strong></p><ul><li>设计模式通过提供现成的抽象来减少复杂度</li><li>设计模式通过把常见解决方案的细节予以制度化来减少出错</li><li>设计模式通过提供多种设计方案而带来启发性的价值</li><li>设计模式通过把设计对话提升到一个更高的层次上来简化交流</li></ul><p><strong>使用启发式方法的原则</strong></p><p>最有效的原则是不要卡在单一的方法上。</p><h3 id="设计实践"><a href="#设计实践" class="headerlink" title="设计实践"></a>设计实践</h3><p><strong>迭代</strong></p><p>当首次尝试得出一个看上去足够好的设计方案后，不要停下来，第二个尝试几乎肯定会好于第一个，而你也会从每次尝试中有所收获，这有助于改善整体设计。</p><p><strong>分而治之</strong></p><p>把程序分解成不同的关注区域，然后分别处理每一个区域。增量式设计是一种管理复杂度的强大工具</p><p><strong>自上而下</strong></p><p>从某个高层次抽象开始。</p><p><strong>自下而上</strong></p><p>设计始于细节，向一般性延伸。</p><p><strong>建立试验性原型</strong></p><p>建立原型指的是『写出用于回答特定设计问题的、量最少并且能够随时扔掉的代码』这项活动。</p><p><strong>合作设计</strong></p><p>保证质量，推荐高度结构化的检查实践，正式检察</p><h3 id="Key-Points-4"><a href="#Key-Points-4" class="headerlink" title="Key Points"></a>Key Points</h3><ul><li>软件的首要技术使命就是管理复杂度。以简单性作为努力目标的设计方案对此最有帮助</li><li>简单性可以通过两个方式来获取，一是减少在同一时间所关注的本质性复杂度的量，二是避免生成不必要的偶然复杂度</li><li>设计是一种启发式的过程。固执于某一种单一方法会损害创新能力，从而损害你的程序</li><li>好的设计都是迭代的。你尝试设计的可能性越多，你的最终设计方法就会变得越好</li><li>信息隐藏是个非常有价值的概念，通常询问我应该隐藏些什么，能够解决很多的困难的设计问题</li></ul><h2 id="可以工作的类"><a href="#可以工作的类" class="headerlink" title="可以工作的类"></a>可以工作的类</h2><p>类是由一组数据和子程序构成的集合，这些数据和子程序共同拥有一组内聚的、明确定义的职责。</p><h3 id="抽象数据类型"><a href="#抽象数据类型" class="headerlink" title="抽象数据类型"></a>抽象数据类型</h3><p>抽象数据类型（ADT,abstract data type）是指一些数据以及对这些数据所进行的操作的集合。</p><ul><li>隐藏实现细节</li><li>改动不会影响整个程序</li><li>让接口提供更多信息</li><li>更容易提高性能</li><li>让程序的正确性显而易见</li><li>程序更具有自我说明性</li><li>无须在程序内到处传递数据</li><li>像现实世界一样操作实体</li></ul><h3 id="良好的类接口"><a href="#良好的类接口" class="headerlink" title="良好的类接口"></a>良好的类接口</h3><p>好的抽象：</p><ul><li>类的接口应该展现一致的抽象层次</li><li>一定要理解类所实现的抽象是什么</li><li>提供成对的服务</li><li>把不相关的信息转移到其他类中</li><li>尽可能让接口可编程，而不是语义表达</li><li>谨防在修改时破坏接口的抽象</li><li>不要添加与接口抽象不一致的共用成员</li><li>同时考虑抽象性和内聚性</li></ul><h3 id="良好的封装"><a href="#良好的封装" class="headerlink" title="良好的封装"></a>良好的封装</h3><ul><li>尽可能地限制类和成员的可访问性</li><li>不要公开暴露成员数据</li><li>避免把私有的实现细节放入类的接口中</li><li>不要对类的使用者做出任何假设</li><li>避免使用友元类</li><li>不要因为一个子程序里面仅使用公用子程序，就把它归入公开接口</li><li>让阅读代码比编写代码更方便</li><li>要格外警惕语义上破坏封装性</li><li>留意过于紧密的耦合关系</li></ul><h3 id="设计和实现的问题"><a href="#设计和实现的问题" class="headerlink" title="设计和实现的问题"></a>设计和实现的问题</h3><p><strong>has a，包含关系</strong></p><p>通过包含来实现『has a 』的关系</p><p>警惕有超过约七个数据成员的类</p><p><strong>is a，继承关系</strong></p><p>用 public 继承来实现『is a』的关系</p><p>要么使用继承并进行详细说明，要么不用它</p><p>遵循 Liskov 替换原则</p><p>确保只继承需要继承的部分</p><p>不要覆盖一个不可覆盖的成员函数</p><p>把共用的接口、数据及操作放到继承树中尽可能高的位置</p><p>只有一个实例的类是值得怀疑的</p><p>只有一个派生类的基类是值得怀疑的</p><p>派生后覆盖某个子程序，但其中没有做任何操作，也是值得怀疑的</p><p>避免让继承体系过深</p><p>尽量使用多态，避免大量的类型检查</p><p>让所有数据都是 private 而不是 protected</p><p>程序员在决定使用多重继承之前，应该仔细地考虑其他替代方案，并谨慎地评估它可能对系统复杂度和可理解性产生的影响</p><p><strong>成员函数和数据成员</strong></p><p>让类中子程序的数量尽可能少</p><p>禁止隐式地产生你不需要的成员函数和运算符</p><p>减少类所调用的不同子程序的数量</p><p>对其他类的子程序的间接调用要尽可能少</p><p>尽量减少类和类之间相互合作的范围</p><p>应该在所有的构造函数中初始化所有的数据成员</p><p>用私有构造函数来强制实现单件属性</p><p>优先采用深层拷贝，除非论证可行才采用浅拷贝</p><h3 id="创建类的原因"><a href="#创建类的原因" class="headerlink" title="创建类的原因"></a>创建类的原因</h3><ul><li>为现实世界中的对象建模</li><li>为抽象的对象建模</li><li>降低复杂度</li><li>隔离复杂度</li><li>隐藏实现细节</li><li>限制变动的影响范围</li><li>隐藏全局数据</li><li>让参数传递更顺畅</li><li>建立中心控制点</li><li>让代码更易于重用</li><li>为程序族做计划</li><li>把相关操作包装到一起</li><li>实现某种特定的重构</li></ul><p>避免创建的类：</p><ul><li>避免创建万能类</li><li>消除无关紧要的类，只包含数据不包含行为</li><li>避免用动词命名类</li></ul><h3 id="Key-Points-5"><a href="#Key-Points-5" class="headerlink" title="Key Points"></a>Key Points</h3><ul><li>类的接口应提供一致的抽象。很多问题都是由于违背该原则而引起的</li><li>类的接口应隐藏一些信息，如某个系统接口，某项设计决策，一些实现细节</li><li>包含往往比继承更为可取，除非你要对『is a』关系建模</li><li>继承是一种有用的工具，但它却会增加复杂度，这有违软件的首要技术使命（管理复杂度）</li><li>类是管理复杂度的首要工具。要在设计类时给予足够的关注才能实现这一目标</li></ul><h2 id="高质量的子程序"><a href="#高质量的子程序" class="headerlink" title="高质量的子程序"></a>高质量的子程序</h2><p>子程序（routine）是实现一个特定的目的而编写的一个可被调用的方法或过程。使用子程序的好处就是它避免了重复代码，从而使程序更易于开发、调试、编档和维护。</p><h3 id="创建子程序的正当理由"><a href="#创建子程序的正当理由" class="headerlink" title="创建子程序的正当理由"></a>创建子程序的正当理由</h3><ul><li>降低复杂度</li><li>引入中间、易懂的抽象</li><li>避免代码重复</li><li>支持子类化，保持可覆盖的子程序简单</li><li>隐藏顺序</li><li>隐藏指针操作</li><li>提高可移植性</li><li>简化复杂的布尔判断</li><li>改善性能</li><li>确保所有子程序都很小</li></ul><h3 id="在子程序层上设计"><a href="#在子程序层上设计" class="headerlink" title="在子程序层上设计"></a>在子程序层上设计</h3><p><strong>功能的内聚性</strong></p><p>是最强也是最好的一种内聚性，让一个子程序仅执行一项操作</p><p><strong>顺序上的内聚性</strong></p><p>子程序包含按特定顺序执行的操作，这些步骤共享数据，且只有在全部执行完毕之后才完成一项完整的功能。</p><p><strong>通信上的内聚性</strong></p><p>一个子程序中不同操作使用了同样的数据，但不存在其他任何联系。</p><p><strong>临时的内聚性</strong></p><p>含有一些因为需要同时执行才放到一起操作的子程序</p><p>不可取的内聚性：</p><ul><li>过程上的内聚性，一个子程序操作是按特定的顺序进行的。</li><li>逻辑上的内聚性，若干操作被放到同一子程序中，通过传入的控制标志选择执行一项操作。</li><li>巧合地内聚性，子程序中各个操作之间没有任何可以看到的关联。</li></ul><h3 id="好的子程序的名字"><a href="#好的子程序的名字" class="headerlink" title="好的子程序的名字"></a>好的子程序的名字</h3><p>描述子程序所做的所有事情</p><p>避免使用无意义的、模糊或表述不清的动词</p><p>不要仅通过数字来形成不同的子程序名字</p><p>根据需要确定子程序名字的长度</p><p>给函数命名时要对返回值有所描述</p><p>给过程起名时使用语气强烈的动词加宾语的形式</p><p>准确使用对仗词</p><p>为常用操作确立命名规则</p><h3 id="子程序的长度"><a href="#子程序的长度" class="headerlink" title="子程序的长度"></a>子程序的长度</h3><p>编写超过200行的子程序之后可读性会遇到问题。</p><h3 id="如何使用子程序的参数"><a href="#如何使用子程序的参数" class="headerlink" title="如何使用子程序的参数"></a>如何使用子程序的参数</h3><p>按照输入-修改-输出的顺序排列参数</p><p>使用所有的参数。往子程序传递参数就一定要使用这个参数</p><p>把状态或出错变量放在最后</p><p>不要把子程序的参数用作工作变量</p><p>在接口中对参数的假定加以说明</p><p>把子程序的参数个数限制在大约7个以内</p><p>考虑对参数采用某种表示输入、修改、输出的命名规则</p><p>为子程序传递用以维持其接口抽象的变量或对象</p><p>使用具名参数</p><h3 id="Key-Points-6"><a href="#Key-Points-6" class="headerlink" title="Key Points"></a>Key Points</h3><ul><li>创建子程序最主要的目的是提高程序的可管理性，当然也有其他好的理由，其中节省代码空间只是一种次要原因，提高可读性、可靠性和可修改性等原因都更重要一些</li><li>有时候，把一些简单的操作写成独立的子程序也非常有价值</li><li>子程序可以按照其内聚性分为很多类，而你应该在大多数子程序具有功能上的内聚性</li><li>子程序的名字是它的质量的指示器。糟糕的名字都意味着程序需要修改</li><li>只有在某个子程序的主要目的是返回其名字所描述的特定结果时，才应该使用函数</li></ul><h2 id="防御式编程"><a href="#防御式编程" class="headerlink" title="防御式编程"></a>防御式编程</h2><p>防御式编程的主要思想是：子程序应该不因传入错误数据而被破坏，哪怕是由其他子程序产生的错误数据。</p><h3 id="保护程序免遭非法输入数据的破坏"><a href="#保护程序免遭非法输入数据的破坏" class="headerlink" title="保护程序免遭非法输入数据的破坏"></a>保护程序免遭非法输入数据的破坏</h3><ul><li>检查所以来源于外部的数据的值</li><li>检查子程序所有输入参数的值</li><li>决定如何处理错误的输入数据</li></ul><h3 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h3><p>断言对于大型的复杂程序或可靠性要求极高的程序来说尤其有用。断言主要用于开发和维护阶段。</p><ul><li>用错误处理代码来处理预期会发生的状况，用断言来处理绝不应该发生的状况</li><li>避免把需要执行的代码放到断言中</li><li>用断言来注解并验证前条件和后条件</li><li>对于高健壮性的代码，应该先使用断言再处理错误</li></ul><h3 id="错误处理技术"><a href="#错误处理技术" class="headerlink" title="错误处理技术"></a>错误处理技术</h3><ul><li>返回中立值，计算返回 0，字符串返回空串等。</li><li>换用下一个正确的数据</li><li>返回与前次相同的数据</li><li>换用最接近的合法值</li><li>把警告信息记录到日志文件中</li><li>返回一个错误码</li><li>调用错误处理子程序或对象</li><li>当错误发生时显示出错消息</li><li>用最妥当的方式再局部处理错误</li><li>关闭程序</li></ul><p>正确性意味着永不返回不准确的结果，哪怕不返回结果也比返回不准确的结果好。</p><p>健壮性意味着不断尝试采取某些措施，以保证软件可以持续地运转下去，哪怕有时做出一些不够准确的结果。</p><p>应该在整个程序里采用一致的方式处理非法参数。对错误进行处理的方式会直接关系到软件嫩否满足在正确性、健壮性和其他非功能性指标方面的要求。一旦确定了某种方法，就要始终如一地贯彻这一方法。</p><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><p>异常是把代码中的错误或异常事件传递给调用代码的一种特殊手段。</p><ul><li>用异常通知程序的其他部分，发生了不可忽略的错误</li><li>只有在真正例外的情况下才抛出异常</li><li>不能用异常来推卸责任</li><li>避免在构造函数和析构函数中抛出异常，除非你在同一地方把它们捕获</li><li>在恰当的抽象层次抛出异常</li><li>在异常消息中加入关于导致异常发生的全部信息</li><li>避免使用空的 catch 语句</li><li>了解所用函数库可能抛出的异常</li><li>考虑创建一个集中的异常报告机制</li><li>把项目对异常的使用标准化</li><li>考虑异常的替代方案</li></ul><h3 id="隔离程序"><a href="#隔离程序" class="headerlink" title="隔离程序"></a>隔离程序</h3><p>在输入数据时将其转换为恰当的类型。隔栏外部的程序使用错误处理技术，隔栏内部的程序使用断言技术。</p><h3 id="辅助调试的代码"><a href="#辅助调试的代码" class="headerlink" title="辅助调试的代码"></a>辅助调试的代码</h3><p>应该在开发期间牺牲一些速度和对资源的使用，来换取一些可以让开发更顺畅的内置工具。</p><p>如果你一旦遇到问题马上就编写或使用钱一个项目用过的某个调试助手的话，它会自始至终在整个项目中帮助你。</p><p>在开发阶段让异常显现出来，而在产品代码运行时让它能够自我恢复的处理异常方法称为进攻式编程。</p><h3 id="保留防御式代码"><a href="#保留防御式代码" class="headerlink" title="保留防御式代码"></a>保留防御式代码</h3><p>保留那些检查重要错误的代码</p><p>去掉检查细微错误的代码</p><p>去掉可以导致程序硬性崩溃的代码</p><p>保留可以让程序稳妥地崩溃的代码</p><p>为你的技术支持人员记录错误信息</p><p>确认留在代码中的错误消息是友好的，常用且有效的方法就是通知用户发生了内部错误，再留下可供反馈的电子邮箱或其他联系方式即可。</p><h3 id="Key-Points-7"><a href="#Key-Points-7" class="headerlink" title="Key Points"></a>Key Points</h3><ul><li>最终产品代码中对错误处理的方式要比“垃圾进，垃圾出”复杂得多</li><li>防御式编程可以让错误更容易发现、更容易修改，并减少错误对产品代码的破坏</li><li>断言可以帮助人尽早发现错误，尤其是大型系统和高可靠性系统中，以及快速变化的代码中</li><li>关于如何处理错误输入的决策是一项关键的错误处理决策，也是一项关键的高层设计决策</li><li>异常提供了一种与代码正常流程角度不同的错误处理手段，应该在异常和其他错误处理手段之间进行权衡比较</li><li>针对产品代码的限制并不适用于开发中的软件。你可以在开发中添加有助于更快地排查错误的代码。</li></ul><h2 id="伪代码编程过程"><a href="#伪代码编程过程" class="headerlink" title="伪代码编程过程"></a>伪代码编程过程</h2><h3 id="创建类和子程序的步骤"><a href="#创建类和子程序的步骤" class="headerlink" title="创建类和子程序的步骤"></a>创建类和子程序的步骤</h3><p>创建类：</p><ul><li>创建类的总体设计。定义类的特定职责，定义类所要隐藏的信息，以及精确地定义类的接口所代表的抽象概念；指出这个类关键的公用方法，标识并设计出类所需用到的重要数据成员。</li><li>创建类的子程序。</li><li>复审并测试整个类。</li></ul><p>创建子程序：设计子程序-检查设计-编写子程序的代码-检查代码</p><h3 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h3><p>伪代码是指某种用来描述算法、子程序、类或完整程序的工作逻辑的、非形式的、类似于英语的记法。伪代码编程过程则是一种通过书写伪代码而高效地创建程序代码的专门方法。</p><p>有效使用伪代码的指导原则：</p><ul><li>用类似英语的语句来精确描述特定的操作</li><li>避免使用目标编程语言中的语法元素。伪代码能让你在一个比代码本身略高的层次上进行设计。</li><li>在本意的层面上编写伪代码。用伪代码去描述解决问题的方法的意图而不是去写目标语言中如何实现。</li><li>在一个足够低的层次上编写伪代码，以便可以近乎自动地从它生成代码。</li></ul><p>使用伪代码的好处：</p><ul><li>伪代码使得评审更容易</li><li>伪代码支持反复迭代精化的思想</li><li>伪代码使变更更加容易</li><li>伪代码能使给代码作注释的工作量减到最少</li><li>伪代码比其他形式的设计文档更容易维护</li></ul><h3 id="通过伪代码编程过程创建子程序"><a href="#通过伪代码编程过程创建子程序" class="headerlink" title="通过伪代码编程过程创建子程序"></a>通过伪代码编程过程创建子程序</h3><p><strong>设计子程序</strong></p><ul><li>检查先决条件。检查子程序的工作是否定义好了，是否与整体设计相匹配，是否真正必需。</li><li>定义子程序解决的问题。陈述出该子程序将要解决的问题，叙述要足够详细，以便能去创建这个子程序。</li><li>为子程序命名</li><li>决定如何测试子程序</li><li>在标准库中搜寻可用的功能。提高代码的质量和生产率就是重用好的代码</li><li>考虑错误处理。考虑子程序所有可能出错的环节</li><li>考虑效率问题</li><li>研究算法和数据类型</li><li>编写伪代码。首先简要用于一句话类写下子程序的目的作为头部注释再编写高层次的伪代码。</li><li>考虑数据</li><li>检查伪代码</li><li>在伪代码中试验一些想法，留下最好的想法</li></ul><p><strong>编写子程序的代码</strong></p><ul><li>写出子程序的声明。并将头部注释写到编程语言中的注释。</li><li>把伪代码转变为高层次的注释</li><li>在每条注释下面填充代码</li><li>检查代码是否需要进一步分解</li></ul><p><strong>检查代码</strong></p><ul><li>在脑海中检查程序的错误</li><li>编译子程序</li><li>在调试器中逐行执行代码</li><li>测试代码</li><li>消除程序中的错误</li></ul><p><strong>收尾工作</strong></p><ul><li>检查子程序的接口。确认所有的输入、输出数据都参与了计算，并且所有的参数都用到了</li><li>检查整体的设计质量。子程序只做了一件事情，子程序是松散耦合的，子程序采用了防御式设计</li><li>检查子程序中的变量。检查是否存在不准确的变量名称、未被用到的对象、未经声明的变量，以及未经正确初始化的对象等</li><li>检查子程序的语句和逻辑。检查是否存在偏差1这样的错误、死循环、错误的嵌套以及资源泄露</li><li>检查子程序的布局。代码格式化</li><li>检查子程序的文档。</li><li>除去冗余的注释。</li></ul><h3 id="伪代码编程过程的替代方案"><a href="#伪代码编程过程的替代方案" class="headerlink" title="伪代码编程过程的替代方案"></a>伪代码编程过程的替代方案</h3><ul><li>测试先行开发。在任何代码之前先要写出测试用例</li><li>重构。通过对代码进行一系列保持语义的变换和调整来提高代码质量</li><li>契约式设计。认为每一段程序哦都有前条件和后条件</li><li>东拼西凑。</li></ul><h3 id="Key-Points-8"><a href="#Key-Points-8" class="headerlink" title="Key Points"></a>Key Points</h3><ul><li>创建类和子程序通常都是一个迭代的过程。在创建子程序的过程中获得的认识常常会反过来影响类的设计</li><li>编写好的伪代码需要使用易懂的英语，避免使用特定编程语言中才有的特性，同时要在意图层面上写为代码</li><li>伪代码编程过程是一个行之有效的做详细设计的工具，它同时让编码工作更容易。伪代码会直接转为注释，从而确保了注释的准确性和实用性。</li><li>不要只停留在你所想到的第一个设计方案上。反复使用伪代码做出多种方案，然后选出其中最佳的一种方案再开始编码</li><li>每一步完成后都要检查你的工作成果，还要鼓励其他人帮你来检查。这样你就会在投入精力最少的时候，用最低的成本发现错误。</li></ul><h2 id="使用变量的一般事项"><a href="#使用变量的一般事项" class="headerlink" title="使用变量的一般事项"></a>使用变量的一般事项</h2><h3 id="数据认知"><a href="#数据认知" class="headerlink" title="数据认知"></a>数据认知</h3><p>创建有效数据的第一步是了解所要创建数据的种类。</p><h3 id="掌握变量定义"><a href="#掌握变量定义" class="headerlink" title="掌握变量定义"></a>掌握变量定义</h3><p><strong>隐式声明</strong></p><p>隐式变量声明对于任何一种语言来说都是最具危险性的特性之一。</p><ul><li>关闭隐式声明</li><li>声明全部的变量</li><li>遵循某种命名规则</li><li>检查变量名</li></ul><h3 id="变量初始化规则"><a href="#变量初始化规则" class="headerlink" title="变量初始化规则"></a>变量初始化规则</h3><ul><li>在声明变量的时候初始化</li><li>在靠近变量第一次使用的位置初始化它</li><li>在靠近第一次使用变量的位置声明并定义该变量</li><li>在可能的情况下使用 final 或者 const</li><li>特别注意计数器和累加器</li><li>在类的构造函数里初始化该类的数据成员</li><li>检查是否需要重新初始化</li><li>一次性初始化具名常量，用可执行代码来初始化变量</li><li>使用编译器设置自动初始所有变量</li><li>利用编译器的警告信息</li><li>检查输入参数的合法性</li><li>使用内存访问检查工具来检查错误的指针</li><li>在程序开始时初始化工作内存</li></ul><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p><strong>使变量引用局部化</strong></p><p>一般而言，把对一个变量的引用局部化，即把引用点尽可能集中在一起总是一种很好的做法。</p><p><strong>尽可能缩短变量的存活时间</strong></p><p>这样变量被错误或无意修改的可能性就降低了。使你能对自己的代码有更准确的认识。减少了初始化错误的可能性。使代码更具可读性。重构也会非常容易。</p><p><strong>减少作用域的一般原则</strong></p><ul><li>在循环开始之前再去初始化该循环里使用的变量。</li><li>直到变量即将被使用时再为其赋值</li><li>把相关语句放在一起或提取成单独的子程序</li><li>开始时采用最严格的可见性，然后根据需要扩展变量的作用域</li></ul><h3 id="持续性"><a href="#持续性" class="headerlink" title="持续性"></a>持续性</h3><p>变量的生命周期有时是难以预料的。</p><ul><li>在程序中加入调试代码或者断言来检查那些关键变量的合理取值</li><li>准备抛弃变量是为其赋上不合理的数值，比如将对象赋为 null</li><li>养成在使用所有数据之前声明和初始化的习惯</li></ul><h3 id="绑定时间"><a href="#绑定时间" class="headerlink" title="绑定时间"></a>绑定时间</h3><ul><li>编码时，硬编码</li><li>编译时，具名常量</li><li>加载时，从外部文件获取</li><li>对象实例化时，窗体创建读取数据</li><li>即时，窗体重绘时读取</li></ul><p>一般而言，绑定事件越早，灵活性就越差，但复杂度也就会越低。</p><h3 id="数据类型和控制结构之间的关系"><a href="#数据类型和控制结构之间的关系" class="headerlink" title="数据类型和控制结构之间的关系"></a>数据类型和控制结构之间的关系</h3><ul><li>序列型数据翻译为程序中的顺序语句。</li><li>选择性数据翻译为程序中的 if 和 case 语句</li><li>迭代型数据翻译成程序中的 for、repeat、while 等循环结构</li></ul><h3 id="为变量指定单一用途"><a href="#为变量指定单一用途" class="headerlink" title="为变量指定单一用途"></a>为变量指定单一用途</h3><p>每个变量只用于单一用途</p><p>避免让代码具有隐含含义</p><p>确保使用了所有已声明的变量</p><h3 id="Key-Points-9"><a href="#Key-Points-9" class="headerlink" title="Key Points"></a>Key Points</h3><ul><li>数据初始化过程很容易出错，所以请用本章的初始化方法来避免由于非预期的初始化而造成的错误</li><li>最小化每个变量的作用域。把同一变量的引用点集中在一起。把变量限定在子程序或类的范围内。避免使用全局数据</li><li>把使用相同变量的语句尽可能集中在一起</li><li>早期绑定会减低灵活性，但有助于减少复杂度。晚期绑定可以增加灵活性，同时增加复杂度</li><li>把每个变量用于唯一的用途</li></ul><h2 id="变量名的力量"><a href="#变量名的力量" class="headerlink" title="变量名的力量"></a>变量名的力量</h2><h3 id="选择好变量名的注意事项"><a href="#选择好变量名的注意事项" class="headerlink" title="选择好变量名的注意事项"></a>选择好变量名的注意事项</h3><p>为变量命名时最重要的考虑事项是该名字要完全、准确地描述出该变量所代表的事物。通常对变量的描述就是最佳的变量名。不过太长很不实用。</p><p>一个好记的名字反映的通常是问题而不是解决方案。通常表达的是 waht 而不是 how。</p><p>平均长度在 10 到 16 个字符的时候，调试所花的气力最小，不是让我们把变量名控制在这一范围而是如果发现代码中有很多更短的名字，那么需要检查确保名字含义足够清晰。</p><p>将诸如 Total、Sum、Average、Max、Min 等限定词放在名字的最后。</p><p>使用对仗词。</p><h3 id="为特定类型的数据命名"><a href="#为特定类型的数据命名" class="headerlink" title="为特定类型的数据命名"></a>为特定类型的数据命名</h3><p><strong>为循环下标命名</strong></p><p>如果一个变量在循环之外使用，那么应该取一个比 i、j 或 k 更有意义的名字。</p><p><strong>为状态变量命名</strong></p><p>为状态变量取一个比 flag 更好的名字。为了清楚起见，标记应该用枚举类型、具名常量。</p><p><strong>为临时变量命名</strong></p><p>temp 丝毫没有反应该变量的功能</p><p><strong>为布尔变量命名</strong></p><p>使用典型的布尔变量名。done：表示已完成，error：表示有错误发生，found：表示值已找到，success 或 ok：表示操作成功。</p><p>给布尔变量赋予隐含真假含义的名字。is 前缀的变量名降低了简单逻辑表达式的可读性。</p><p>使用肯定的布尔变量名</p><p><strong>为枚举类型命名</strong></p><p>使用组前缀来表明该类型的成员同属于一个组</p><p><strong>为常量命名</strong></p><p>应该根据变量所表示的含义，而不是该常量所具有的数值为该抽象事物命名</p><h3 id="命名规则的力量"><a href="#命名规则的力量" class="headerlink" title="命名规则的力量"></a>命名规则的力量</h3><p>命名规则带来的好处：</p><ul><li>要求你更多地按规矩行事</li><li>有助于在项目之间传递知识</li><li>有助于你在新项目中更快速地学习代码</li><li>有助于减少名字增生</li><li>弥补编程语言的不足之处</li><li>强调相关变量之间的关系</li></ul><p>规则的存在为你的代码增加了结构，减少了你需要考虑的事情</p><p><strong>何时采用命名规则</strong></p><ul><li>当多个程序员开发一个项目时</li><li>当计划把一个项目转交给另一位程序员来修改和维护时</li><li>当你写程序规模太大，而必须分而治之时</li><li>当你写的程序生命期足够长，可能在一个月或几个月之后重新启动时</li><li>当一个项目中存在一些不常见术语时</li></ul><h3 id="非正式命名规则"><a href="#非正式命名规则" class="headerlink" title="非正式命名规则"></a>非正式命名规则</h3><p>与语言无关的命名规则指导：</p><ul><li>区分变量名和子程序名</li><li>区分类和对象，类名大写，对象名使用明确的名字如：<code>Widget employeeWidget</code></li><li>标识全局变量，比如加上 g_ 前缀</li><li>标识成员变量，比如加上 m_ 前缀</li><li>标识类型声明，比如加上 t_ 前缀</li><li>标识具名常量，比如加上 c_ 前缀</li><li>标识枚举类型的元素，比如加上 e_ 前缀或特定类型的前缀</li><li>在不能保证输入参数只读的语言里标识只读参数，增加 const 前缀</li><li>格式化命名提高可读性，使用 _ 分割</li></ul><h3 id="标准前缀"><a href="#标准前缀" class="headerlink" title="标准前缀"></a>标准前缀</h3><p>ch：字符</p><p>doc：文档</p><p>pa：段落</p><p>src：屏幕区域</p><p>sel：选中范围</p><p>wn：窗体</p><p>c：数量</p><p>first：数组第一个元素</p><p>g：全局变量</p><p>i：数组下标</p><p>last：数组最后一个元素</p><p>lim：lim 等于 last + 1</p><p>m：类一级的变量</p><p>max：绝对的最后一个元素</p><p>min：绝对的第一个元素</p><p>p：指针</p><h3 id="创建具有可读性的短名字"><a href="#创建具有可读性的短名字" class="headerlink" title="创建具有可读性的短名字"></a>创建具有可读性的短名字</h3><p>缩写的一般指导原则：</p><ul><li>使用标准的缩写</li><li>去掉所有非前置元音，如 computer 变成 cmptr，screen 变成 scrn</li><li>去掉虚词 and，or the 等</li><li>使用每个单词的第一个或前几个字母</li><li>统一在单词的第几个字母后截断</li><li>保留每个单词的第一个或最后一个字母</li><li>使用名字中的每一个重要单词，最多不超过三个</li><li>去除无用的后缀，如 img，ed 等</li><li>保留不要改变变量的含义</li></ul><p>名字对代码读者的意义要比对作者更重要</p><h3 id="应该避免的名字"><a href="#应该避免的名字" class="headerlink" title="应该避免的名字"></a>应该避免的名字</h3><ul><li>避免使用令人误解的名字或缩写。确保名字的含义是明确的</li><li>避免使用具有相似含义的名字</li><li>避免使用具有不同含义却有相似名字的变量</li><li>避免使用发音 相近的名字</li><li>避免在名字中使用数字</li><li>避免在名字中拼错单词</li><li>避免使用英语中常常拼错的单词</li><li>不要仅靠大小写来区分变量名</li><li>避免使用多种自然语言</li><li>避免使用标准类型、变量和子程序的名字</li><li>不要使用与变量含义完全无关的名字</li><li>避免在名字中包含易混淆的字符</li></ul><h3 id="Key-Points-10"><a href="#Key-Points-10" class="headerlink" title="Key Points"></a>Key Points</h3><ul><li>好的变量名是提高程序可读性的一项关键要素。对特殊种类的变量，比如循环下标和状态变量，需要加以特殊的考虑。</li><li>名字要尽可能地具体。那些模糊或者太通用以至于能够用于多种目的的名字通常不是很好</li><li>命名规则应该能够区分局部数据、类数据和全局数据。它们还应该区分类型名、具名常量、枚举常量和变量名</li><li>现代编程语言很少用到缩写</li><li>代码阅读的次数远远多于编写的次数。确保你所取得名字更侧重于阅读方便而不是编写方便</li></ul><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><h3 id="数值概论"><a href="#数值概论" class="headerlink" title="数值概论"></a>数值概论</h3><p><strong>避免使用“神秘数值”</strong></p><p>神秘数值是在程序中出现的、没有经过解释的数值文字量。应该使用具名常量或其他手段代替神秘数值。</p><p>一条很好的经验法则是，程序主体中仅能出现的文字量就是 0 和 1。任何其他文字量都应该换成更有描述性的表示。</p><p><strong>预防除零错误</strong></p><p>使用除法符号就都有考虑分母是否可能为零</p><p><strong>使类型转换变得明显</strong></p><p><strong>避免混合类型的比较</strong></p><p><strong>注意编译器的警告</strong></p><h3 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h3><ul><li>检查整数除法</li><li>检查整数溢出</li><li>检查中间结果溢出</li></ul><h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3><ul><li>避免数量级相差巨大的数之间的加减运算</li><li>避免等量判断，而是相减小于一定值</li><li>处理舍入误差问题</li></ul><h3 id="字符和字符串"><a href="#字符和字符串" class="headerlink" title="字符和字符串"></a>字符和字符串</h3><ul><li>避免使用神秘字符和神秘字符串</li><li>避免 off-by-one 错误</li><li>在程序生命期中尽早决定国际化&#x2F;本土化策略</li><li>多语言使用 Unicode</li></ul><h3 id="布尔变量"><a href="#布尔变量" class="headerlink" title="布尔变量"></a>布尔变量</h3><ul><li>用布尔变量对程序加以文档说明</li><li>用布尔变量来简化复杂的判断</li></ul><h3 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h3><ul><li>用枚举类型来提高可读性</li><li>用枚举类型提高可靠性</li><li>用枚举类型简化修改</li><li>用枚举类型作为布尔变量的替换方案</li><li>检查非法数值</li><li>定义枚举第一项以及最后一项，以便于循环边界</li><li>把枚举的第一个元素留作非法值</li></ul><h3 id="具名常量"><a href="#具名常量" class="headerlink" title="具名常量"></a>具名常量</h3><ul><li>在数据声明中使用具名常量</li><li>避免使用文字量，即使是安全的</li><li>用具有适当作用域的变量或类来模拟具名常量</li><li>统一地使用具名常量</li></ul><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><ul><li>确认所有数组下标没有越界</li><li>考虑使用容器取代数组或将数组作为顺序化结构来处理</li><li>检查数组的边界点</li><li>多维数组，确认下标的使用顺序是正确的</li><li>提防小标串话，即嵌套循环小标使用错误</li></ul><h3 id="创建自己的类型"><a href="#创建自己的类型" class="headerlink" title="创建自己的类型"></a>创建自己的类型</h3><ul><li>给所创建的类型取功能导向的名字</li><li>避免使用预定义类型</li><li>不要重定义一个预定义的类型</li><li>定义替代类型以便于移植</li><li>考虑创建一个类而不是使用 typeof</li></ul><h3 id="Key-Points-11"><a href="#Key-Points-11" class="headerlink" title="Key Points"></a>Key Points</h3><ul><li>使用特定的数据结构就意味着要记住适用于各个类型的很多独立的原则。</li><li>如果语言支持，创建自定义类型会使得程序更容易修改，并更具有自描述性</li><li>当使用 typeof 或者其等价方式创建一个简单类型的时候，考虑是否更应该创建一个新的类</li></ul><h2 id="不常见的数据类型"><a href="#不常见的数据类型" class="headerlink" title="不常见的数据类型"></a>不常见的数据类型</h2><h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h3><h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><h3 id="全局数据"><a href="#全局数据" class="headerlink" title="全局数据"></a>全局数据</h3><p>全局数据可以在程序中任意一个位置访问。</p><p>全局数据使用可能遇到的问题：</p><ul><li>无意间修改了全局数据</li><li>与全局数据有关的奇异和令人激动的别名问题</li><li>与全局数据有关的代码重入问题</li><li>全局数据阻碍代码重用</li><li>与全局数据有关的非确定的初始化顺序事宜</li><li>全局数据破坏了模块化和智力上的可管理性</li></ul><p>使用全局数据的理由：</p><ul><li>保存全局数值</li><li>模拟具名常量</li><li>模拟枚举类型</li><li>消除流浪数据</li></ul><p>用访问器子程序来取代全局数据，把数据隐藏到类里面。</p><p>降低使用全局数据的风险：</p><ul><li>创建一种命名规则来突出全局变量</li><li>为全部的全局变量创建一份注释良好的清单</li><li>不要用全局变量存放中间结果</li><li>不要把所有的数据都放在一个大对象中并到处传递</li></ul><h3 id="Key-Points-12"><a href="#Key-Points-12" class="headerlink" title="Key Points"></a>Key Points</h3><ul><li>结构体可以使程序更简单、更容易理解，以及更容易维护</li><li>每当你打算使用结构体时，考虑使用类是不是会工作得更好</li><li>指针很容易出现问题。用访问器子程序或类以及防御式编程实践来保护自己的代码</li><li>避免使用全局变量，比是因为它们很危险，而是你可以用其他更好的方法来取代它们</li><li>如果你不得不使用全局变量，那么通过访问器子程序来使用它。访问器子程序能为你带来全局变量所能带来得一切优点。</li></ul><h2 id="组织直线型代码"><a href="#组织直线型代码" class="headerlink" title="组织直线型代码"></a>组织直线型代码</h2><h3 id="必须有明确顺序的语句"><a href="#必须有明确顺序的语句" class="headerlink" title="必须有明确顺序的语句"></a>必须有明确顺序的语句</h3><ul><li>设法组织代码，使依赖关系变得更加明显</li><li>使子程序名能突显依赖关系</li><li>利用子程序参数明确显示依赖关系</li><li>用注释对不清晰的依赖关系进行说明</li><li>用断言或者错误处理代码来检查依赖关系</li></ul><h3 id="顺序无关的语句"><a href="#顺序无关的语句" class="headerlink" title="顺序无关的语句"></a>顺序无关的语句</h3><p>作为一条普遍性原则，要让程序易于自上而下阅读，而不是让读者得目光跳来跳去。</p><p>把相关的语句组织在一起，你有可能发现它们之间有很强的联系，你可能希望把这些关联度很强的代码独立成子程序</p><h3 id="Key-Points-13"><a href="#Key-Points-13" class="headerlink" title="Key Points"></a>Key Points</h3><ul><li>组织直线型代码的最主要原则是按照依赖关系进行排列</li><li>可以用好的子程序名、参数列表、注释，以及如果代码足够重要，内存管理变量来让依赖关系变得更加明显</li><li>如果代码之间没有顺序依赖关系，那就设法使相关的语句尽可能地接近</li></ul><h2 id="使用条件语句"><a href="#使用条件语句" class="headerlink" title="使用条件语句"></a>使用条件语句</h2><h3 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h3><p><strong>if-then 语句</strong></p><ul><li>首先写正常代码路径，再处理不常见情况</li><li>确保对于等量的分支是正确的</li><li>把正常情况的处理放在 if 后面而不要放在 else 后面</li><li>让 if 子句后面跟随一个有意义的语句</li><li>考虑 else 语句。空的 else 语句带上注释解释为啥 else 语句没必要更具可读性</li><li>测试 else 子句的正确性</li><li>检查 if 和 else 子句是不是弄反了</li></ul><p><strong>if-then-else 语句</strong></p><ul><li>利用布尔函数调用简化复杂的检测</li><li>把最常见的情况放在最前面</li><li>确保所有情况都考虑到了</li><li>使用 case 代替 if-then-else 语句，因为更容易编写与阅读</li></ul><h3 id="case-语句"><a href="#case-语句" class="headerlink" title="case 语句"></a>case 语句</h3><p><strong>为 case 选择最有效的排列顺序</strong></p><ul><li>按字母顺序或按数字顺序排列各种情况</li><li>把正常的情况放在前面</li><li>按执行效率排列 case 语句</li></ul><p><strong>使用 case 诀窍</strong></p><ul><li>简化每种情况对应的操作。如果代码复杂就应该写一个子程序然后在 case 语句中调用</li><li>不要为了使用 case 语句而特意制造一个变量</li><li>把 default 子句只用于检查真正的默认情况</li><li>利用 default 子句检查错误</li><li>避免代码越过一条 case 子句的末尾，使用 break</li></ul><h3 id="Key-Points-14"><a href="#Key-Points-14" class="headerlink" title="Key Points"></a>Key Points</h3><ul><li>对于简单的 if-else 语句，请注意 if 子句和 else 子句的顺序，特别是用它类处理大量错误的时候，要确认正确的情况是最清晰的</li><li>对于 if-then-else 语句串和 case 语句，选择一种最有利于阅读的排序</li><li>为了捕捉错误，可以使用 case 语句中的 default 子句，或者使用 if-then-else 语句最后一个 else 语句</li><li>各种控制结构并不是生来平等的，请为代码的每个部分选用最合适的控制结构</li></ul><h2 id="控制循环"><a href="#控制循环" class="headerlink" title="控制循环"></a>控制循环</h2><h3 id="选择循环的种类"><a href="#选择循环的种类" class="headerlink" title="选择循环的种类"></a>选择循环的种类</h3><ul><li>计数循环（counted loop），执行的次数是一定的</li><li>连续求值的循环（continuously evaluated loop），预先不知道将要执行多少次，它会每次迭代时检查是否应该结束</li><li>无限循环（endless loop），一旦启动就会一直执行下去</li><li>迭代器循环（iterator loop），对容器类里面的每个元素执行一次操作</li></ul><p><strong>什么时候用 while 循环</strong></p><p>执行每通过这种循环一次，while 只做一次循环终止的检测，而且有关 while 循环的最主要事项就是决定在循环开始处还是结尾处检测。</p><p><strong>什么时候使用带退出的循环</strong></p><p>带退出的循环就是终止条件出现在循环中间而不是开始或者末尾的循环。</p><p>如果把循环条件检测放在循环开始或结束处，那就需要一个半循环的代码。</p><p>把所有退出条件放在一处并且用注释来阐明操作意图</p><p><strong>何时使用 for 循环</strong></p><p>如果需要一个执行次数固定的循环，for 循环就是一个很好的选择。可以在 for 循环来执行哪些不需要循环控制的简单操作。</p><p>如果存在一个必须使执行从循环中跳出的条件，就应改为 while 循环，类似地，不要在 for 循环里通过直接修改下标值的方式迫使它终止。</p><p><strong>何时使用 foreach 循环</strong></p><p>很适用于对数组或者其他容器的各项元素执行操作。</p><h3 id="循环控制"><a href="#循环控制" class="headerlink" title="循环控制"></a>循环控制</h3><p>减少能影响该循环各种因素的数量。把控制尽可能地放在循环体外。</p><p><strong>进入循环</strong></p><ul><li>只从一个位置进入循环</li><li>把初始化代码紧放在循环前面</li><li>用 while(true) 表示无限循环</li><li>在适当的情况下多用 for 循环</li><li>在 while 循环更适用的时候，不要使用 for 循环</li></ul><p><strong>处理好循环体</strong></p><ul><li>用 { } 把循环中的语句括起来</li><li>避免空循环</li><li>把循环内务操作要么放在循环开始，要么放在循环末尾，内务操作即 i++ 这样控制循环的语句</li><li>一个循环只做一件事</li></ul><p><strong>退出循环</strong></p><ul><li>设法确认循环能够终止</li><li>使循环终止条件看起来很明显</li><li>不要为了终止循环而胡乱改动 for 循环下标</li><li>避免出现依赖于循环下标最终取值的代码</li><li>考虑使用安全计数器</li></ul><p><strong>提前退出循环</strong></p><ul><li>考虑在 while 循环中使用 break 语句而不是布尔标记</li><li>小心那些有很多 break 散步其中的循环</li><li>在循环开始处用 continue 进行判断，如果 continue 出现在循环末尾就应该改用 if</li><li>使用带标号 break 结构</li><li>使用 break 和 continue 时要小心谨慎</li></ul><p><strong>检查端点</strong></p><p>对于一个简单的循环，在创建循环的时候应该检查开始的情况、任意选择中间情况、以及最终的情况，确认不会出现错误。</p><p>如果包含复杂的计算，就应该拿出计算器来手动检查计算是否准确。</p><p>通过在头脑中模拟和手工运算而获益多多。</p><p><strong>使用循环变量</strong></p><ul><li>用整数或枚举类型表示数组和循环的边界</li><li>在嵌套循环中使用有意义的变量名来提高可读性</li><li>用有意义的名字来避免循环下标串话</li><li>把循环下标变量的作用域限制在本循环内</li></ul><p><strong>循环的长度</strong></p><ul><li>循环要尽可能地短，以便能够一目了然</li><li>把嵌套限制在 3 层以内</li><li>把长循环的内容移到子程序里</li><li>要让长循环格外清晰</li></ul><h3 id="轻松创建循环"><a href="#轻松创建循环" class="headerlink" title="轻松创建循环"></a>轻松创建循环</h3><p>从具体事件入手，在同一时间只考虑一件事，以及从简单的部分开始创建循环。在开发更通用、更复杂的循环过程中，你迈的步子要小，并且每一步的目的要容易理解。这样你可以减少在同一时间需要关注的代码量，从而减少出错的可能。</p><h3 id="循环和数组的关系"><a href="#循环和数组的关系" class="headerlink" title="循环和数组的关系"></a>循环和数组的关系</h3><p>大多数情况，循环就是用来操纵数组的，但是循环结构和数组不是天生就相互关联的。</p><p>有些解决方案时特定的语言，你所用的语言将在相当大的程度上影响到你的解决方案</p><h3 id="Key-Points-15"><a href="#Key-Points-15" class="headerlink" title="Key Points"></a>Key Points</h3><ul><li>循环很复杂。保持循环简单将有助于别人阅读你的代码</li><li>保持循环简单的技巧包括：避免使用怪异的循环、减少嵌套层次、让入口和出口一目了然、把内务操作放在一处</li><li>循环下标很容易被滥用。因此命名要准确，并且把它们各自仅用于一个用途</li><li>仔细地考虑循环，确认它在每一种情况下都运行正常，并且在所有可能的条件下都能退出。</li></ul><h2 id="不常见的控制结构"><a href="#不常见的控制结构" class="headerlink" title="不常见的控制结构"></a>不常见的控制结构</h2><h3 id="子程序中的多处返回"><a href="#子程序中的多处返回" class="headerlink" title="子程序中的多处返回"></a>子程序中的多处返回</h3><p>return 语句的指导原则：</p><ul><li>如果能增强可读性，那么就使用 return</li><li>用防卫子句来简化复杂的错误处理</li><li>减少每个子程序中 return 的数量，只有增强可读性的时候才去使用</li></ul><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>编写递归子程序的关键目标之一就是要防止产生无穷递归。</p><p>编写递归的技巧：</p><ul><li>确认递归能够停止</li><li>使用安全计数器防止出现无穷递归</li><li>把递归限制在一个子程序内</li><li>留心栈空间</li><li>不要用递归取计算阶乘或斐波那契数列</li></ul><p>在用递归之前考虑替代方案，用递归能做到的，同样也能用栈和循环做到</p><h3 id="针对不常见控制结构的观点"><a href="#针对不常见控制结构的观点" class="headerlink" title="针对不常见控制结构的观点"></a>针对不常见控制结构的观点</h3><p>软件开发这一领域是在限制程序员对代码的使用中得到发展的</p><h3 id="Key-Points-16"><a href="#Key-Points-16" class="headerlink" title="Key Points"></a>Key Points</h3><ul><li>多个 return 可以增强子程序的可读性和维护性，同时可以避免产生很深的嵌套逻辑。但是使用它的时候要多加小心</li><li>递归能过够很优雅地解决一小部分问题。对它的使用也要倍加小心</li></ul><h2 id="表驱动法"><a href="#表驱动法" class="headerlink" title="表驱动法"></a>表驱动法</h2><p>表驱动法是一种编程模式，从表里面查找信息而不使用逻辑语句。</p><h3 id="表驱动法使用总则"><a href="#表驱动法使用总则" class="headerlink" title="表驱动法使用总则"></a>表驱动法使用总则</h3><ul><li>从表中如何查询条目的问题</li><li>从表中查询记录的方法，直接访问、索引访问、阶梯访问</li></ul><h3 id="直接访问表"><a href="#直接访问表" class="headerlink" title="直接访问表"></a>直接访问表</h3><p>直接访问代替了更为复杂的逻辑控制结构，直接在表中找到想要的信息</p><h3 id="索引访问表"><a href="#索引访问表" class="headerlink" title="索引访问表"></a>索引访问表</h3><p>使用索引的时候，先用一个基本类型的数据从索引表中查出一个键，再用键查询感兴趣的数据。</p><h3 id="阶梯访问表"><a href="#阶梯访问表" class="headerlink" title="阶梯访问表"></a>阶梯访问表</h3><p>表中的记录对于不同的数据范围有效，而不是对不同的数据点有效</p><h3 id="Key-Points-17"><a href="#Key-Points-17" class="headerlink" title="Key Points"></a>Key Points</h3><ul><li>表提供了一种复杂的逻辑和继承结构的替代方案。如果你发现自己对某个应用程序的逻辑或者继承树感到困惑，那么问问自己是否可以通过一个查询表加以简化</li><li>使用表的一项关键决策是决定如何1去访问表。可以采取直接访问、索引访问和阶梯访问</li><li>使用表的另一个关键决策是决定应该把什么内容放入表中</li></ul><h2 id="一般控制问题"><a href="#一般控制问题" class="headerlink" title="一般控制问题"></a>一般控制问题</h2><h3 id="布尔表达式"><a href="#布尔表达式" class="headerlink" title="布尔表达式"></a>布尔表达式</h3><p>除了最简单的、要求语句按顺序执行的控制结构之外，所有的控制结构都依赖于布尔表达式的求值</p><p>在布尔表达式中应该用标识符 true 和 false，而不是用 0 和 1 等数值。</p><p>隐式地比较布尔值与 true 和 false。如 <code>a &gt; b</code> 而不是 <code>(a &gt; b) = true</code></p><p>简化复杂的表达式：</p><ul><li>拆分复杂的判断并引入新的布尔变量</li><li>把复杂的表达式做成布尔函数</li><li>用决策来替换复杂的条件。使用决策表（decision-table）查询操作</li></ul><p>编写肯定形式的布尔表达式：</p><ul><li>在 if 语句中，把判断条件从否定形式转换为肯定形式，并且互换 if 和 else 子句中代码</li><li>用狄摩根定理简化否定的布尔判断</li></ul><table><thead><tr><th>原表达式</th><th>等价表达式</th></tr></thead><tbody><tr><td>not A and not B</td><td>not (A or B)</td></tr><tr><td>not A and B</td><td>not (A or not B)</td></tr><tr><td>A and not B</td><td>not (not A or B)</td></tr><tr><td>A and B</td><td>not (not A or not B)</td></tr><tr><td>not A or not B</td><td>not (A and B)</td></tr><tr><td>not A or B</td><td>not (A and not B)</td></tr><tr><td>A or not B</td><td>not (not A and B)</td></tr><tr><td>A or B</td><td>not (not A and not B)</td></tr></tbody></table><p>用括号使布尔表达式更清晰，把布尔表达式整个括在括号里是一种很好的习惯。</p><p>理解布尔表达式是如何求值的</p><p>按照数轴的顺序编写数值表达式</p><p>与 0 比较的指导：</p><ul><li>隐式地比较逻辑变量</li><li>把数和 0 相比较</li><li>把指针与 null 比较</li></ul><p><strong>布尔表达式的常见问题</strong></p><ul><li>在 C 家族语言中，应该把常量放在比较的左端</li><li>C++ 中可以考虑创建预处理替换 &amp;&amp; || 和 &#x3D;&#x3D;</li><li>在 java 中，理解 &#x3D;&#x3D; 和 a.equals(b) 的差异</li></ul><h3 id="复合语句块"><a href="#复合语句块" class="headerlink" title="复合语句块"></a>复合语句块</h3><p>把括号对一起写出，以免漏掉</p><p>用括号把条件表达清楚</p><h3 id="空语句"><a href="#空语句" class="headerlink" title="空语句"></a>空语句</h3><p>小心使用空语句</p><p>为空语句创建一个 DoNothing() 预处理或者内联函数</p><p>考虑如果换用一个非空循环体，是否让代码更清晰</p><h3 id="驯服危险的深层嵌套"><a href="#驯服危险的深层嵌套" class="headerlink" title="驯服危险的深层嵌套"></a>驯服危险的深层嵌套</h3><p>通过重复检测条件中的某一部分来简化嵌套的 if 语句</p><p>用 break 块来简化嵌套 if</p><p>把嵌套 if 转换为一组 if-then-else 语句</p><p>把嵌套 if 转换为 case 语句</p><p>把深层嵌套的代码抽取出来放进单独的子程序</p><p>使用一种更面向对象的方法</p><p>重新设计深层嵌套的代码</p><h3 id="结构化编程"><a href="#结构化编程" class="headerlink" title="结构化编程"></a>结构化编程</h3><p>核心思想：一个应用程序应该只采用单入单出的控制结构（也称单一入口、单一出口的控制结构）。</p><p>一个结构化的程序将按照一种有序且有规则的方式执行，不会做不可预知的随便跳转。</p><p>三个组成部分：</p><ul><li>顺序：一组按照先后顺序执行的语句</li><li>选择：有选择的执行语句的控制结构</li><li>迭代：一种使一组语句多次执行的控制结构</li></ul><p>结构化编程的额中心论点是，任何一种控制流都可以由顺序、选择和迭代这三种结构生成。</p><h3 id="控制结构与复杂度"><a href="#控制结构与复杂度" class="headerlink" title="控制结构与复杂度"></a>控制结构与复杂度</h3><p>程序的复杂度在很大程度上决定了理解程序所需要花费的精力。</p><p><strong>降低复杂度的一般原则</strong></p><p>通过脑力联系提高自身的脑力游戏水平</p><p>降低应用程序的复杂度以及为了理解它所需的专心程度</p><p>度量复杂度：Tom McCabe 方法</p><p>通过计算子程序中的决策点的数量来衡量复杂度。从 1 开始计算，遇到 if、while、repeat、for、and、or 都加 1，case 语句中每一种情况都加 1。</p><p>决策点在 0 - 5 子程序可能还不错，6 - 10 得想办法简化子程序。10+ 把子程序的某一部分拆分成零一个子程序并调用。</p><h3 id="Key-Points-18"><a href="#Key-Points-18" class="headerlink" title="Key Points"></a>Key Points</h3><ul><li>使布尔表达式简单可读，将非常有助于提高你的代码的质量</li><li>深层次的嵌套使得子程序变得难以理解。你可以避免这么做</li><li>结构化编程是一种简单并且适用的得思想，你可以通过把顺序、选择和循环三者组合起来开发出任何程序</li><li>将复杂度降低到最低水平是编写高质量代码的关键</li></ul><h2 id="软件质量概述"><a href="#软件质量概述" class="headerlink" title="软件质量概述"></a>软件质量概述</h2><h3 id="软件质量的特性"><a href="#软件质量的特性" class="headerlink" title="软件质量的特性"></a>软件质量的特性</h3><p>外在特性，产品的用户能够感受到的部分：</p><ul><li>正确性（Correctness）指系统规范、设计和实现方面的错误的稀少程度</li><li>可用性（Usability）指用户学习和使用一个系统的容易程度</li><li>效率（Efficiency）指软件是否尽可能少地占用系统资源、包括内存和执行时间</li><li>可靠性（Reliablity）在指定的必须条件下，一个系统完成所需要功能的能力</li><li>完整性（Integrity）指系统阻止对程序或数据进行未经验证或者不正确访问的能力。</li><li>适应性（Adaptability）指为特定的应用或者环境设计的系统，在不修改的情况下，能够在其他应用或者环境中使用的范围</li><li>精确性（Accuracy）指对于一个已经开发出的系统，输出结果的误差程度，尤其在输出的是数量值的时候。</li><li>健壮性（Robustness）指的是系统在接收无效输入或者处于压力环境时继续正常运行的能力</li></ul><p>内在特性：</p><ul><li>可维护性（Maintainability）指是否能够很容易对系统进行修改，改变或者增加功能，提高性能以及修正缺陷</li><li>灵活性（Flexibility）指假如一个系统是为特定用途或者环境而设计的，那么当该系统被用于其他目的或者环境的时候，需要对系统做修改的程度</li><li>可移植性（Portability）指为了在原来设计的特定环境之外运行，对系统所进行修改的难易程度</li><li>可重用性（Reusability）指系统的某些部分可被应用到其它系统中的程度以及此项工作的难易程度</li><li>可读性（Readability）指阅读并理解系统代码的难易程度，尤其是在细节语句的额层次上</li><li>可测试性（Testability）指的是可以进行何种程度的单元测试或者系统测试，以及在何种程度上验证系统是否符合需求</li><li>可理解性（Understandability）指在系统组织的细节语句的层次上理解整个系统的难易程度</li></ul><h3 id="改善软件质量的技术"><a href="#改善软件质量的技术" class="headerlink" title="改善软件质量的技术"></a>改善软件质量的技术</h3><p>软件质量保证是一个需要预先计划、系统性的活动，其目的就是为了确保系统具备人们所期望的特性。</p><ul><li>软件质量目标，明确定义软件质量的目标</li><li>明确定义质量保证工作</li><li>测试策略</li><li>软件工程指南</li><li>非正式技术复查</li><li>正式技术复查</li><li>外部审查</li></ul><p><strong>开发过程</strong></p><ul><li>对变更进行控制的过程，有效地管理变更更是实现高质量的一个关键</li><li>结果的量化，量化结果能告诉你就计划成功与否</li><li>制作原型（Prototyping）制作原型是指开发出系统中关键功能的实际模型</li></ul><p><strong>设置目标</strong></p><p>明确设置质量目标是开发高质量软件的一个简单而清晰的步骤，但它常常被忽视。</p><h3 id="不同质量保障技术的相对效能"><a href="#不同质量保障技术的相对效能" class="headerlink" title="不同质量保障技术的相对效能"></a>不同质量保障技术的相对效能</h3><p><strong>缺陷检测率</strong></p><p>测定所找到的缺陷占该项目当时所有存在缺陷的百分比，是评估各种缺陷检测方法的一种途径。</p><p>综合使用多种技术才能达到更大的缺陷排除率，即使是单元测试加集成测试组合组合在一起也只能达到 30%~35% 之间的检测率。</p><p>阅读代码每小时能够检测出的缺陷要比测试高出 80% 左右。且检查比测试的成本更小。</p><p><strong>修正缺陷的成本</strong></p><p>越早发现错误的检测方法可以降低修正缺陷的成本。</p><p>一个有限的软件质量项目的底线。必须包括在开发的所有阶段联合使用多种技术</p><ul><li>对所有需求、架构以及系统关键部分的设计进行正式检查</li><li>建模或者创建原型</li><li>代码阅读或者检查</li><li>执行测试</li></ul><h3 id="什么时候进行质量保证"><a href="#什么时候进行质量保证" class="headerlink" title="什么时候进行质量保证"></a>什么时候进行质量保证</h3><p>需求或架构上的错误往往会产生更为广泛的影响。尽早捕捉错误才能有效地节省成本。</p><p>缺陷可能在任何阶段渗透到软件中。因此需要在早期阶段就开始强调质量保证工作，并且将其贯彻到项目的余下部分中。</p><h3 id="软件质量的普遍原理"><a href="#软件质量的普遍原理" class="headerlink" title="软件质量的普遍原理"></a>软件质量的普遍原理</h3><p>软件质量的普遍原理就是改善质量以降低开发成本</p><p>提高生产效率和改善质量的最佳途径就是减少花在代码返工上的时间，无论返工的代码是由需求、设计改变还是调试引起的。</p><p>绝大多数项目的最大规模的一种活动就是调试以及修正那些无法正常工作的代码。</p><p>把时间投入到前期工作中，能让程序员在后期工作中节省更多时间。</p><h3 id="Key-Points-19"><a href="#Key-Points-19" class="headerlink" title="Key Points"></a>Key Points</h3><ul><li>开发高质量代码最终并没有要求你付出更多，只是你需要对资源进行重新分配，以低廉的成本来防止缺陷，从而避免代价高昂的修整工作</li><li>并非所有质量保证目标都可以全部实现。明确哪些目标是你希望达到的，并就这些目标和团队成员进行沟通</li><li>没有任何一种错误检查方法能够解决全部问题，测试本身并不是排除错误的最有效方法。成功的质量保证计划应该使用多种不同的技术来检查各种不同类型的错误</li><li>在构建期间应该使用一些有效的质量保证技术，但在之前，一些具有同样强大功能的质量保证技术也是必不可少的，错误发现越早，它与其余代码的纠缠就越少，由此造成的损失也越小</li><li>软件领域的质量保证是面向过程的。软件开发与制造业不一样，在这里并不存在影响最终产品重复阶段。因此，最终产品的质量收到开发软件所用的过程的控制。</li></ul><h2 id="协同构建"><a href="#协同构建" class="headerlink" title="协同构建"></a>协同构建</h2><h3 id="协同开发实践概要"><a href="#协同开发实践概要" class="headerlink" title="协同开发实践概要"></a>协同开发实践概要</h3><p>协同构建包括结对编程、正式检查、非正式技术复查、文档阅读，以及其他让开发人员共同承担创建代码及其他工作产品责任的技术。</p><p>协同构建的首要目的就是改善软件的质量。</p><p>在减少软件中的缺陷数量的同时，开发周期也能得到缩短。</p><p>复查能让程序员得到关于他们自己代码的反馈，复查是培养新人以提高其代码质量的好机会。</p><p>一个采用正式检查的团队报告称，复查可以快速地将所有开发者的水平提高到最优秀的开发者的高度。</p><h3 id="结对编程"><a href="#结对编程" class="headerlink" title="结对编程"></a>结对编程</h3><p>在进行结对编程时候，一位程序员敲代码，另外一位注意有没有出现错误，并考虑某些策略性的问题。</p><p>结对编程的关键：</p><ul><li>用编码规范来支持结对编程</li><li>不要让结对编程变成旁观</li><li>不要强迫在简单的问题上使用结对编程</li><li>有规律地对结对人员和分配的工作任务进行轮换</li><li>鼓励双方跟上对方的步伐</li><li>确认两个人都能够看到显示器</li><li>不要强迫程序员与自己关系紧张的人结对</li><li>避免新手组合</li><li>指定一个组长</li></ul><p>结对编程的好处：</p><ul><li>结对能使人们在压力之下保持更好的状态</li><li>能够改善代码质量。代码的可读性和可理解性都倾向于上升至团队中最优秀程序员的水平</li><li>能缩短进度时间表。更快地编写代码，处所更少，这样后期修正缺陷的时间会更少</li><li>传播公司文化，知道初级程序员，以及培养集体归属感</li></ul><h3 id="正式检查"><a href="#正式检查" class="headerlink" title="正式检查"></a>正式检查</h3><p>详查（正式检查）是一张特殊的复查。</p><h3 id="Key-Points-20"><a href="#Key-Points-20" class="headerlink" title="Key Points"></a>Key Points</h3><ul><li>协同开发实践往往能比测试发现更多的缺陷，并且更有效率</li><li>协同开发实践所发现错误的类型通常跟测试所发现的不同，这意味着你需要同时使用详查和测试来保证你软件的质量</li><li>正式检查通过运用核对表、准备工作、明确定义的角色以及对方法的持续改善，将缺陷侦测的效率提升至最高</li><li>结对编程拥有和详查相同的成本，并能产生质量相当的代码。</li><li>正式检查可以应用在出代码之外的很多工作成果上</li><li>走查和代码阅读的详查的替代方案</li></ul><h2 id="开发者测试"><a href="#开发者测试" class="headerlink" title="开发者测试"></a>开发者测试</h2><p>测试是最常见的改善质量的活动。</p><ul><li>单元测试（Unit testing）是将一个程序员或者一个开发团队所编写的，一个完整的类、子程序或者小程序，从完整的系统中隔离出来进行测试</li><li>组件测试（Component testing）是将一个类、包、小程序或者其他程序元素，从一个更加完整的系统中隔离出来进行测试，这些被测代码涉及到多个程序员或者多个团队</li><li>集成测试（Integration testing）是对两个或更多的类、包、组件或者子系统进行的联合测试，这些组件由多个程序员或者开发团队所创建。</li><li>回归测试（Regression testing）是指重复执行以前的测试用例，以便在原先通过了相同测试集合的软件中查找缺陷</li><li>系统测试（System testing）是在最终的配置下运行整个软件。以便测试安全、性能、资源消耗、时序方面的问题。</li></ul><p>测试通常分为两大类，黑盒测试和白盒测试，黑盒测试指的是测试者无法了解测试对象内部工作机制的测试。白盒测试指的是测试者清楚待测试对象内部工作机制的测试。</p><p>测试是一种检查错误的方法，而调试意味着错误已经被发现。</p><p>开发者测试的推荐方法：</p><ul><li>对每一项相关的需求进行测试，以确保需求都已经被实现。</li><li>对每一个相关的设计关注点进行测试，以确保设计已经被实现</li><li>用基础测试来扩充针对需求和设计的详细测试用例</li><li>使用一个检查表，记录你在本项目所犯以及在过去项目所犯的错误类型</li></ul><p>开发者测试的局限性：</p><ul><li>开发者测试倾向于干净测试</li><li>开发者测试对覆盖率有过于乐观的估计</li><li>开发者测试往往会忽略一些更复杂的测试覆盖率类型</li></ul><h3 id="测试技巧锦囊"><a href="#测试技巧锦囊" class="headerlink" title="测试技巧锦囊"></a>测试技巧锦囊</h3><p><strong>结构化基础测试</strong></p><p>你需要去测试程序中的每一条语句至少一次</p><p><strong>数据流测试</strong></p><p>编写数据流测试用例的关键是要对所有可能的定义，使用路径进行测试。</p><p><strong>等价类划分</strong></p><p>如果两个用例能揭示的错误完全相同，那么只有一个就够了。</p><p><strong>猜测错误</strong></p><p>猜测程序会在哪里出错的基础之上建立测试用例。</p><p><strong>边界值分析</strong></p><p>写一些测试用例来测试边界值条件</p><h3 id="典型错误"><a href="#典型错误" class="headerlink" title="典型错误"></a>典型错误</h3><ul><li>大多数错误的影响范围是相当有限的</li><li>许多错误发生在构建的范畴之外</li><li>大多数的构建期错误是编程人员的失误造成的</li><li>笔误（拼写错误）是一个常见的问题根源</li><li>错误理解设计</li><li>大多数错误都很容易修正</li><li>总结所在组织中对付错误的经验</li></ul><p>减少测试用例当中的错误量：</p><ul><li>检查工作，对测试数据进行检查</li><li>开发软件的时候就要计划好测试用例</li><li>保留测试用例</li><li>将单元测试纳入测试框架</li></ul><h3 id="改善测试过程"><a href="#改善测试过程" class="headerlink" title="改善测试过程"></a>改善测试过程</h3><p><strong>有计划的测试</strong></p><p>有效测试的关键之一就是在待测试项目开始之初就拟定测试计划</p><p><strong>回归测试</strong></p><p>回归测试每次都应该使用相同的测试用例，添加新的测试用例的同时，也应保留旧的测试用例</p><p><strong>自动化测试</strong></p><p>管理回归测试唯一可行的方法就是将其变成一种自动化的过程</p><h3 id="保留测试记录"><a href="#保留测试记录" class="headerlink" title="保留测试记录"></a>保留测试记录</h3><ul><li>却显得管理方面描述</li><li>问题的完整描述</li><li>复现错误所需要的步骤</li><li>绕过该问题的建议</li><li>相关的缺陷</li><li>问题的严重程度</li><li>缺陷根源：需求、设计、编码还是测试</li><li>对编码缺陷分类</li><li>修正错误所需改变的类和子程序</li><li>缺陷所影响的代码行数</li><li>查找该错误所花的小时数</li><li>修正错误所花费的小时数</li></ul><h3 id="Key-Points-21"><a href="#Key-Points-21" class="headerlink" title="Key Points"></a>Key Points</h3><ul><li>开发人员测试是完整测试策略的一个关键部分。独立测试也很重要</li><li>同编码之后编写测试用例相比较，编码开始之前编写测试用例，工作量和花费的时间差不多，但是后者可以缩短缺陷-侦测-调试-修正的周期</li><li>测试仍然只是良好软件质量计划的一部分。高质量的开发方法和测试一样重要，尽可能减少需求和设计阶段的缺陷</li><li>错误往往集中在少量几个容易出错的类和子程序上</li><li>测试数据表本身出错的密度往往比被测代码还要高</li><li>自动化测试总体来说是很有用的，也是进行回归测试的基础</li><li>改善测试过程的最好办法就是将其规范化，并对其进行评估，然后用评估中获得的经验教训改善这个过程</li></ul><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>调试是确定错误根本原因并纠正此错误的过程。</p><h3 id="调试概述"><a href="#调试概述" class="headerlink" title="调试概述"></a>调试概述</h3><p>调试本身并不是改进代码质量的方法，而是诊断代码缺陷的一种方法。</p><p>开发高质量软件产品的最佳突进是精确描述需求、完善设计，并使用高质量的代码编写规范。</p><p>程序中的错误为你提供了学习很多东西的绝好机会，错误的好处：</p><ul><li>理解你正在编写的程序</li><li>明确你犯了哪种类型的错误</li><li>从代码阅读者的角度分析代码质量</li><li>审视自己解决问题的方法</li><li>审视自己修正缺陷的方法</li></ul><h3 id="寻找缺陷"><a href="#寻找缺陷" class="headerlink" title="寻找缺陷"></a>寻找缺陷</h3><p>调试包括了寻找缺陷和修正缺陷。寻找缺陷并且理解缺陷通常占到了整个调试工作的 90%</p><p>寻找缺陷的有效方法：</p><ol><li>将错误状态稳定下来，即让缺陷可以稳定地重现</li><li>确定错误的来源<ul><li>收集产生缺陷的相关数据</li><li>分析所收集的数据，并构造对缺陷的假设</li><li>确定怎么去证实或证伪这个假设</li><li>对假设做出最终结论</li></ul></li><li>修补缺陷</li><li>对所修补的地方进行测试</li><li>查看是否有类似的错误</li></ol><p><strong>把错误的发生稳定下来</strong></p><p>生成能产生错误的最小化测试用例。简化测试用例的目标是使它尽可能简单，其任何方面的修改都会改变相关错误的行为。</p><p><strong>寻找缺陷的建议</strong></p><ul><li>在构造假设时考虑所有的可用数据</li><li>提炼产生错误的测试用例</li><li>在自己的单元测试族中测试代码</li><li>利用可用的工具</li><li>采用多种不同的方法重现错误</li><li>用更多的数据生成更多的假设</li><li>利用否定性测试用例的结果</li><li>对可能的假设尝试头脑风暴</li><li>在桌上放一个记事本，把需要尝试的事情逐条列出</li><li>缩小嫌疑代码的范围</li><li>对之前出现过的缺陷和子程序保持警惕</li><li>检查最近修改过的代码</li><li>扩展嫌疑代码的范围</li><li>增量式继承</li><li>检查常见的缺陷</li><li>抛开问题休息一下</li></ul><p><strong>蛮力测试</strong></p><ul><li>对崩溃代码的设计和编码进行彻底检查</li><li>抛弃有问题的代码，从头开始设计和编程</li><li>抛弃整个程序，从头开始设计和编程</li><li>编译代码时生成全部的调试信息</li><li>在最为苛刻的警告级别下编译代码</li><li>全面执行单元测试</li><li>开发自动化测试工具</li><li>在调试期中手动遍历一个大循环，直至发现错误条件</li><li>在代码中打印、显示和其他日志记录语句</li><li>在另一个不同的的编译器来编译代码</li><li>在另一个不同的环境里编译和运行程序</li><li>复制最终用户的完整系统配置信息</li><li>将新的代码分小段进行集成，对每段集成的代码段进行完整的测试</li></ul><p><strong>语法错误</strong></p><ul><li>不要过分信任编译器信息中的行号</li><li>不要迷信编译器信息</li><li>不要轻信编译器的第二条信息</li><li>分而治之</li><li>找出没有配对的注释或者引号</li></ul><h3 id="修正缺陷"><a href="#修正缺陷" class="headerlink" title="修正缺陷"></a>修正缺陷</h3><p>第一次对缺陷进行修正时候，有超过 50% 的几率出错，减少出错几率的建议：</p><ul><li>在动手之前先理解问题</li><li>理解程序本身而不仅仅是问题</li><li>验证对错误的分析</li><li>放松一下</li><li>保存最初的源代码</li><li>治本而不是指标</li><li>修改代码时一定要有恰当的理由</li><li>一次只做一个改动</li><li>检查自己的改动</li><li>增加能暴露问题的单元测试</li><li>搜索类似的缺陷</li></ul><h3 id="调试中的心理因素"><a href="#调试中的心理因素" class="headerlink" title="调试中的心理因素"></a>调试中的心理因素</h3><p>规范的格式、恰当的注释、良好的变量和子程序命名方式，以及其他编程风格要素都有助于构建编程的良好基础。</p><p>心理距离可以定义为区分两事物的难易程度。</p><h3 id="调试工具"><a href="#调试工具" class="headerlink" title="调试工具"></a>调试工具</h3><ul><li>源代码比较工具，diff</li><li>编译器的警告信息<ul><li>将编译器的警告级别设置为最高级，尽可能不放过任何一个警告</li><li>用对待错误的态度来处理警告</li><li>在项目组范围内使用统一的编译设置</li></ul></li><li>增强的语法检查和逻辑检查</li><li>执行性能剖测器</li><li>测试框架</li><li>调试器</li></ul><h3 id="Key-Points-22"><a href="#Key-Points-22" class="headerlink" title="Key Points"></a>Key Points</h3><ul><li>调试同整个软件开发的成败信息相关，最好的解决之道是避免缺陷的产生，花时间提高自己的调试技巧还是很划算的</li><li>专注于调试工作，让每一个测试都能朝着正确的方向前进一步</li><li>在动手解决问题之前，要理解问题的根本。胡乱猜测错误的来源和随机修改都会让你的程序陷入比刚开始调试时更为糟糕的境地</li><li>将编译器警告级别设置为最严格，把警告信息所报告的错误都修正</li><li>调试工具对软件开发而言是强有力的支持手段，记得在调试的时候开动脑筋</li></ul><h2 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h2><h3 id="软件演化的类型"><a href="#软件演化的类型" class="headerlink" title="软件演化的类型"></a>软件演化的类型</h3><p>区分软件演化类型的关键，就是程序的质量在这一过程中是提高了还是降低了。</p><p>另一个就是演化是源于程序构建过程中得修改，还是维护过程中的修改。</p><p>演化一开始就充满危险，但同时也是使你软件开发接近完美的天赐良机。</p><p>软件演化的基本准则就是，演化应当提升程序的内在质量</p><h3 id="重构简介"><a href="#重构简介" class="headerlink" title="重构简介"></a>重构简介</h3><p>重构就是在不改变软件外部行为的前提下，对其内部结构进行改变，是指更容易理解并便于修改。</p><p><strong>重构的理由</strong></p><ul><li>代码重复</li><li>冗长的子程序</li><li>循环过长或嵌套过深</li><li>内聚性太差的类，一个类有太多彼此无关的任务，应该拆分成多个类</li><li>类的接口未能提供层次一致的抽象</li><li>拥有太多参数的参数列表</li><li>类的内部修改往往被局限于某个部分</li><li>变化导致对多个类的相同修改</li><li>对继承体系的同样修改</li><li>case 语句需要做相同的修改</li><li>同时使用的相关数据并未以类的方式进行组织</li><li>成员函数使用其他类的特征比使用自身类的特征还要多</li><li>过多使用基本数据类型</li><li>某个类无所事事</li><li>一系列传递流浪数据的子程序，流浪数据指数据传给某个子程序只为了让改子程序传递给另一个子程序。</li><li>中间人对象无事可做</li><li>某个类同其它类关系过于亲密</li><li>子程序命名不恰当</li><li>数据成员被设置为公用</li><li>某个派生类仅使用了基类很少一部分成员函数</li><li>注释被用于解释难懂的代码，不要为拙劣的代码编写文档，应该重写</li><li>使用了全局变量</li><li>在子程序调用前后设置了代码，在调用后使用收尾代码，应考虑是否能放入子程序中执行</li><li>程序中的一些代码似乎是在将来某个时候才会用到的。</li></ul><h3 id="特定的重构"><a href="#特定的重构" class="headerlink" title="特定的重构"></a>特定的重构</h3><p><strong>数据级的重构</strong></p><ul><li>用具名常量代替神秘数值</li><li>使变量的名字更为清晰且传递更多信息</li><li>将表达式内联化</li><li>用函数来代替表达式</li><li>引入中间变量</li><li>用多个单一用途变量代替某个多用途变量</li><li>在局部用途中使用局部变量而不是参数</li><li>将基础数据类型转化为类</li><li>将一组类型码转化为类或枚举类型</li><li>将一组类型码转换为一个基类及其相应派生类</li><li>将数组转换为对象</li><li>把群集封装起来</li><li>用数据类来代替传统记录</li></ul><p><strong>语句级的重构</strong></p><ul><li>分解布尔表达式</li><li>将复杂表达式转换成命名准确的布尔函数</li><li>合并条件语句不同部分中的重复代码片段</li><li>使用 break 或 return 而不是循环控制变量</li><li>在嵌套的 if-then-else 语句中一旦知道答案就立即返回，而不是去赋一个返回值</li><li>用多态来代替条件语句，尤其是重复的 case 语句</li><li>创建和使用 null 对象而不是去检测空值</li></ul><p><strong>子程序级重构</strong></p><ul><li>提取子程序或者方法</li><li>将子程序的代码内联化</li><li>用简单的算法代替复杂算法</li><li>增加参数</li><li>删除参数</li><li>将查询操作从修改操作中独立出来</li><li>合并相似的子程序，通过参数区分它们的功能</li><li>将行为取决于参数的子程序拆分开来，即子程序根据输入执行不同的行为，应该拆分成多个子程序</li><li>传递整个对象而非特定成员</li><li>传递特定成员而非整个对象</li><li>包装向下转型的操作，子程序返回对象时，应返回最精确的对象类型</li></ul><p><strong>类实现的重构</strong></p><ul><li>将值对象转为引用对象</li><li>将引用对象转为值对象</li><li>用数据初始化代替虚函数</li><li>改变成员函数或成员数据的位置</li><li>将特殊代码提取为派生类</li><li>将相似的代码结合起来放置到基类中</li></ul><p><strong>类接口的重构</strong></p><ul><li>将成员函数放到另一个类中</li><li>将一个类变成两个</li><li>删除类</li><li>去掉中间人</li><li>用继承代替委托</li><li>引入外部的成员函数</li><li>引入扩展类</li><li>对暴露在外的成员变量进行封装</li><li>对于不能修改的类成员，删除相关的 Set 成员函数</li><li>隐藏那些不会在类之外被用到的成员函数</li><li>封装不使用的成员函数</li><li>合并那些实现非常类似的基类和派生类</li></ul><p><strong>系统级重构</strong></p><ul><li>为无法控制的数据创建明确的索引源</li><li>将单向的类联系改为双向的类联系</li><li>将双向的类联系改为单向的类联系</li><li>用 Factory Method 模式而不是简单地构造函数</li><li>用异常取代错误代码，或者做相反方向的变换</li></ul><h3 id="安全的重构"><a href="#安全的重构" class="headerlink" title="安全的重构"></a>安全的重构</h3><ul><li>保存初始代码</li><li>重构的步伐请小些</li><li>同一时间只做一项重构</li><li>把要做的事情一条条列出来</li><li>设置一个停车场</li><li>多使用检查点</li><li>利用编译器警告信息</li><li>重新测试</li><li>增加测试用例</li><li>检查对代码的修改</li><li>根据重构风险级别来调正重构方法</li></ul><p>不易重构的情况：</p><ul><li>不要把重构当作先写后改的代名词</li><li>避免用重构代替重写</li></ul><h3 id="重构策略"><a href="#重构策略" class="headerlink" title="重构策略"></a>重构策略</h3><ul><li>在增加子程序时进行重构</li><li>在添加类的时候进行重构</li><li>在修补缺陷的时候进行重构</li><li>关注易于出错的模块</li><li>关注高度复杂的模块</li><li>在维护环境下，改善你手中正在处理的代码</li><li>定义清除干净代码和拙劣代码之间的边界，尝试把代码移过这条边界</li></ul><h3 id="Key-Points-23"><a href="#Key-Points-23" class="headerlink" title="Key Points"></a>Key Points</h3><ul><li>修改是程序一生都要面对的事情，不仅包括在最初的开发阶段，还包括在首次发布之后</li><li>在修改中软件的质量要么改进，要么恶化。软件演化的首要法则就是代码演化应该提升程序的内在质量</li><li>重构成功的关键在于程序员应当学会关注那些标志代码需要重构的众多的额警告</li><li>重构成功的最后要点在于要有安全的重构策略，一些重构方法会比其他重构方法要好</li><li>开发阶段的重构是提升程序质量的最佳时机，因为你可以立刻让刚刚产生的改变梦想变成现实。请珍惜开发阶段的天赐良机</li></ul><h2 id="代码调整策略"><a href="#代码调整策略" class="headerlink" title="代码调整策略"></a>代码调整策略</h2><h3 id="性能概述"><a href="#性能概述" class="headerlink" title="性能概述"></a>性能概述</h3><p>性能同代码速度之间存在着很松散的关系。</p><p>思考效率问题：</p><ul><li>程序需求</li><li>程序的设计</li><li>类和子程序的设计</li><li>程序同操作系统的交互</li><li>代码编译</li><li>硬件</li><li>代码调整</li></ul><h3 id="代码调整简介"><a href="#代码调整简介" class="headerlink" title="代码调整简介"></a>代码调整简介</h3><p>代码调整不是改进性能的最为有效的方法，完善程序架构、修改类的设计，选择更好的算法常常能带来更大幅度的性能提升。</p><p>Pareto 法则：你可以用 20% 的努力取得 80% 的成效。程序中 20% 的子程序耗费了 80% 的执行时间</p><p>一些错误的言论：</p><ul><li>在高级语言中，减少代码的行数就可以提升所生成机器代码的运算速度或者减少其资源占用——错误！</li><li>特定运算可能比其他的快，代码规模也较小——错误！</li><li>应当随时随地进行优化——错误！不成熟优化的主要缺陷在于它缺乏前瞻性</li><li>程序的运行速度同其正确性同等重要——错误！</li></ul><p>Jackson 的优化法则：法则一，不要对代码进行优化。法则二（仅限于高手），不要优化，除非你已经有一个非常清晰，而且未经优化的解决方案</p><h3 id="蜜糖和哥斯拉"><a href="#蜜糖和哥斯拉" class="headerlink" title="蜜糖和哥斯拉"></a>蜜糖和哥斯拉</h3><p>在调整代码时，你会发现程序某个部分运行起来如同是寒冬罐子里的蜜糖一般黏乎乎的，体积如哥斯拉一样。</p><p>常见的低效率之源：</p><ul><li>输入&#x2F;输出操作</li><li>分页</li><li>系统调用</li><li>解释型语言</li><li>错误</li></ul><h3 id="性能测量"><a href="#性能测量" class="headerlink" title="性能测量"></a>性能测量</h3><p>你应当测量代码性能，找出代码中的热点。一旦发现就进行代码优化，再一次测量，看看到底有多少改进，性能问题在很多方面都是违反直觉的。</p><p>性能测量应该精确，应当用分配给程序的 CPU 时钟来计算，而不是日期时钟。</p><h3 id="反复调整"><a href="#反复调整" class="headerlink" title="反复调整"></a>反复调整</h3><p>你可以将多种方法有效结合起来，在优化时反复尝试，直到发现有用的方法。</p><h3 id="代码调整方法总结"><a href="#代码调整方法总结" class="headerlink" title="代码调整方法总结"></a>代码调整方法总结</h3><ol><li>用设计良好的代码来开发软件，从而使程序易于理解和修改</li><li>如果程序性能很差<ul><li>保存代码的可运行版本</li><li>对系统进行分析测量，找出热点</li><li>判断性能拙劣是否源于设计、数据类型或者算法上的缺陷，确定是否应该进行代码调整</li><li>对上步所确定的瓶颈代码进行调整</li><li>每次调整后对性能提升进行测量</li><li>如果调整的代码没有改进代码的性能就恢复代码最初的样子</li></ul></li><li>重复第二步</li></ol><h3 id="Key-Points-24"><a href="#Key-Points-24" class="headerlink" title="Key Points"></a>Key Points</h3><ul><li>性能只是软件整体质量的一个方面，通常不是最重要的。精细的代码调整也只是实现整体性能的一种方法，通常不是决定性的。相对于代码本身的效率而言，程序的架构、细节设计以及数据结构和算法选择对程序的运行速度和资源占用的影响通常会更大</li><li>定量测量是实现性能最优化的关键。定量测量需要找出能真正决定程序性能的部分，在修改之后，应当通过重复测量来明确修改是提高还是降低了软件的性能</li><li>绝大多数程序员都有那么一小部分代码耗费了绝大部分的运行时间，如果你不测量，你不会知道是哪一部分代码</li><li>代码调整需要反复尝试没这样才能获得理想的性能提高</li><li>为性能优化工作做好准备的最佳方式就是在最初阶段编写清晰的代码，从而使代码在后续工作中易于理解和修改</li></ul><h2 id="代码调整技术"><a href="#代码调整技术" class="headerlink" title="代码调整技术"></a>代码调整技术</h2><h3 id="逻辑"><a href="#逻辑" class="headerlink" title="逻辑"></a>逻辑</h3><p>很多程序都是由逻辑操作构成的。</p><ul><li><p>在知道答案后停止判断，减少代码循环判断次数，使用短路求值</p></li><li><p>按照出现频率来调整判断顺序，让程序更容易进入常见情况的处理</p></li><li><p>相似逻辑结构之间没在不同的语言情况下不同，没有什么能替代测量得出的结论</p></li><li><p>用查询表替代复杂表达式</p></li><li><p>使用惰性求值，等到需要的时候再计算</p></li></ul><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p>循环会被执行很多次，由此它是程序热点最常见的藏身之处</p><ul><li>将判断外提</li><li>合并，将相同循环合并。减少循环多次</li><li>展开，减少维护循环所需要做的工作</li><li>尽可能减少在循环内部做的工作</li><li>哨兵值</li><li>把最忙的循环放在最内侧</li><li>削减强度</li></ul><h3 id="数据变换"><a href="#数据变换" class="headerlink" title="数据变换"></a>数据变换</h3><ul><li>使用整型数而不是浮点数</li><li>数组维度尽可能少</li><li>尽可能减少数组引用</li><li>使用辅助索引</li><li>使用缓存机制</li></ul><h3 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h3><ul><li>利用代数恒等式</li><li>削弱运算强度</li><li>编译期初始化</li><li>小心系统函数</li><li>使用正确的常量类型</li><li>预先算出结果</li><li>删除公共子表达式</li></ul><h3 id="子程序"><a href="#子程序" class="headerlink" title="子程序"></a>子程序</h3><ul><li>将子程序重写为内联</li></ul><h3 id="用低级语言重写代码"><a href="#用低级语言重写代码" class="headerlink" title="用低级语言重写代码"></a>用低级语言重写代码</h3><h3 id="变得越多，事情反而越没变"><a href="#变得越多，事情反而越没变" class="headerlink" title="变得越多，事情反而越没变"></a>变得越多，事情反而越没变</h3><h3 id="Key-Points-25"><a href="#Key-Points-25" class="headerlink" title="Key Points"></a>Key Points</h3><ul><li>优化结果在不同的语言、编译器和环境下有很大差异。如果没有对每一次优化进行测量，你将无法判断优化到底有无作用</li><li>第一次优化通常不会是最好的，即使找到了效果不错的，在不要停下扩大战果的步伐</li><li>代码调整这一话题有点类似于核能，富有争议，真只会让承认冲动。请务必谨慎行事</li></ul><h2 id="程序规模对构建的影响"><a href="#程序规模对构建的影响" class="headerlink" title="程序规模对构建的影响"></a>程序规模对构建的影响</h2><h3 id="交流与规模"><a href="#交流与规模" class="headerlink" title="交流与规模"></a>交流与规模</h3><p>随着项目成员数目的增加，交流路径的数量也随着增加，并且是乘性的。</p><p>改善交流效率的常用方法是采用正式的文档。</p><h3 id="项目规模的范围"><a href="#项目规模的范围" class="headerlink" title="项目规模的范围"></a>项目规模的范围</h3><p>大项目的用人数量占全部程序员数量的很大比重</p><h3 id="项目规模对错误的影响"><a href="#项目规模对错误的影响" class="headerlink" title="项目规模对错误的影响"></a>项目规模对错误的影响</h3><p>随着项目规模的增大，通常更大一部分要归咎于需求和设计</p><p>随着项目规模的增长，错误的数量也会随之显著增长，特大型项目的每千行错误数量甚至会达到小项目的四倍。</p><h3 id="项目规模对生产率的影响"><a href="#项目规模对生产率的影响" class="headerlink" title="项目规模对生产率的影响"></a>项目规模对生产率的影响</h3><p>随着项目规模和团队规模的增大，组织方式对生产率的影响也随之增大</p><h3 id="项目规模对开发活动的影响"><a href="#项目规模对开发活动的影响" class="headerlink" title="项目规模对开发活动的影响"></a>项目规模对开发活动的影响</h3><p>随着项目规模的扩大，构建活动在整个工作量中所占比重逐渐减小。</p><p>项目越大，复杂度也越大，也就越要求有意识地去关注方法论。</p><h3 id="Key-Points-26"><a href="#Key-Points-26" class="headerlink" title="Key Points"></a>Key Points</h3><ul><li>随着项目规模的扩大，交流需要加以支持。大多数方法论的关键点都在于减少交流中的问题，而一项方法论的存亡关键也应取决于它能否促进交流</li><li>在其他条件都相等的时候，大项目的生产率会低于小项目</li><li>在其他条件都相等的时候，大项目的每千行代码错误率会高于小项目</li><li>在小项目里的看起来理所当然的活动在大项目中必须仔细地计划。随着项目规模的扩大，构建活动的主导地位逐渐降低</li><li>放大轻量级的方法论要好于缩小重量级的方法论，最有效的方法是使用适量级方法论</li></ul><h2 id="管理构建"><a href="#管理构建" class="headerlink" title="管理构建"></a>管理构建</h2><p>质量目标和项目规模都会显著影响这个软项目的管理方式</p><h3 id="鼓励良好的编码实践"><a href="#鼓励良好的编码实践" class="headerlink" title="鼓励良好的编码实践"></a>鼓励良好的编码实践</h3><p>制定标准应该由项目中所受人尊敬的架构师来做，这样人们通常会接受他指定的标准</p><p>标准有助于减少项目中随意出现的诸多分歧</p><p>鼓励良好的编码实践的技术：</p><ul><li>给项目的每一部分分派两个人。两人完成一部分，则至少有两人认为这段代码是工作的</li><li>逐行复查代码。代码复查包括程序员本人和至少两名评审员</li><li>要求代码签名</li><li>安排一些好的代码示例供人参考</li><li>强调代码是共有财产</li><li>奖励好代码</li></ul><h3 id="配置管理"><a href="#配置管理" class="headerlink" title="配置管理"></a>配置管理</h3><p>配置管理是系统化地定义项目工件和处理变化，以使项目一直保持其完整性的实践活动</p><p><strong>需求变更和设计变更</strong></p><ul><li>遵循某种系统化的变更控制手续</li><li>成组地处理变更请求。记录所有的想法和建议，直到有时间处理，把它当作整体看待，从中选中最有益的变更加以实施</li><li>评估每项变更的成本</li><li>提放大量的变更请求</li><li>成立变更控制委员会或者类似机构</li><li>警惕官僚主义，但也不会因为害怕官僚主义而排斥有效的变更控制</li></ul><p><strong>软件代码变更</strong></p><ul><li>版本控制软件</li></ul><h3 id="评估构建进度表"><a href="#评估构建进度表" class="headerlink" title="评估构建进度表"></a>评估构建进度表</h3><p>评估项目的规模和完成项目所需的工作量是软件项目管理中最具挑战性的方面之一。</p><p>评估的方法：</p><ul><li>使用评估软件</li><li>使用算法方法</li><li>聘请外界的评估专家评估有关项目</li><li>为评估举行排练会议</li><li>评估项目的每一部分，然后加起来</li><li>让成员评估各自的任务，然后加起来</li><li>参考以往的项目经验</li><li>保留以往项目的评估</li></ul><p>一套评估项目的好方法：</p><ul><li>建立目标</li><li>为评估预留时间，并且做出计划</li><li>清楚地说明软件需求</li><li>在底层细节层面进行评估</li><li>使用若干不同的评估方法，并且比较其结果</li><li>定期做重新评估</li></ul><p>将阻止的项目经验记录下来，然后用它评估未来的项目需要花费的时间。</p><h3 id="度量"><a href="#度量" class="headerlink" title="度量"></a>度量</h3><p>任何一种项目特征都是可以用某种方法来度量的，而且总比不度量好得多</p><p>留心度量的副作用</p><p>反对度量就是认为最好不要去了解项目中到底发生了什么</p><h3 id="把程序员当人看"><a href="#把程序员当人看" class="headerlink" title="把程序员当人看"></a>把程序员当人看</h3><p>程序员不仅在编程上花时间，也要花时间去开会、培训、阅读邮件以及纯粹思考</p><p>不同程序员在天分和努力程度方面的差别巨大，这一点与其他所有领域都一样</p><p>并未发现程序员的经验与其代码质量或生产率之间有什么关联</p><p>不同的编程团队在软件质量和生产率上也存在着相当大的差异</p><p>物理环境对生产率有着巨大的影响</p><h3 id="管理你的管理者"><a href="#管理你的管理者" class="headerlink" title="管理你的管理者"></a>管理你的管理者</h3><p>技术出色并且其技术与时俱进的管理者实属凤毛麟角</p><p>应对管理者的方法：</p><ul><li>把你希望做什么的念头先藏起来，等你的管理者提起</li><li>把做事情的正确方法传授给你的管理者</li><li>关注你的管理者的兴趣，按照他的真正意图去做</li><li>拒绝按照你的管理者所说的去做，坚持用正确的方法做自己的事</li><li>换工作</li></ul><h3 id="Key-Points-27"><a href="#Key-Points-27" class="headerlink" title="Key Points"></a>Key Points</h3><ul><li>好的编码实践可以通过贯彻标准或者使用更为灵活的方法来达到</li><li>配置管理，如果应用得当，会使程序员的工作变得轻松</li><li>好的软件评估是一项重大挑战，成功的关键包括采用多种方法，随着项目的开展而修缮评估结果，以及很好地利用数据创建评估等</li><li>度量是构建管理成功的关键。你可以采取措施度量项目的任何方面，而这要比根本不度量好得多。准确的度量是指定准确的进度表、质量控制和改进开发过程的关键</li><li>程序员和管理人员都是人，把他们当人看的时候工作得最好</li></ul><h2 id="集成"><a href="#集成" class="headerlink" title="集成"></a>集成</h2><p>集成指的是一种软件开发行为：将一些独立的软件组件组合为一个完整的系统</p><h3 id="集成方式的重要性"><a href="#集成方式的重要性" class="headerlink" title="集成方式的重要性"></a>集成方式的重要性</h3><p>如果你按错误得顺序构建并集成软件，那么会难于编码，难于测试，难于调试。</p><p>周到的集成，所获得的益处：</p><ul><li>更容易诊断缺陷</li><li>缺陷更少</li><li>脚手架更少</li><li>花费更少的时间获得第一个能够工作的产品</li><li>更短的整体开发进度表</li><li>更好的顾客关系</li><li>增强士气</li><li>增加项目完成的机会</li><li>更可靠地估计进度表</li><li>更准确的现状报告</li><li>改善代码质量</li><li>较少的文档</li></ul><h3 id="集成频率"><a href="#集成频率" class="headerlink" title="集成频率"></a>集成频率</h3><p><strong>阶段式集成</strong></p><ol><li>设计、编码、测试、调试各个类，这一步称为单元开发</li><li>将这些类组合为一个庞大的系统</li><li>测试并调试整个系统</li></ol><p>最终类组合在一起可能会涌现大量错误，绝大多数情况下另一种方法更好</p><p><strong>增量集成</strong></p><ol><li>开发一个小的系统功能部件。</li><li>设计、编码、测试、调试某个类。</li><li>将这个新的类集成到系统骨架上。</li></ol><p>增量集成的益处：</p><ul><li>易于定位错误</li><li>及早在项目里取得系统级的成果</li><li>改善对进度的控制</li><li>改善客户关系</li><li>更加充分地测试系统中的各个单元</li><li>能在更短的开发进度计划内建造出整个系统</li></ul><h3 id="增量集成的策略"><a href="#增量集成的策略" class="headerlink" title="增量集成的策略"></a>增量集成的策略</h3><p>最佳解决方案总是为了满足特定项目的特定需求而制定的</p><p><strong>自顶向下集成</strong></p><p>首先编写并集成位于继承体系顶部的类，编写一些存根类，随着从上而下地继承各个类，这些存根类逐渐替换为实际的类。</p><p>自底向上集成</p><p>三明治集成</p><p>风险导向的集成</p><p>功能导向的集成</p><p>T-型集成</p><h3 id="Daily-Build-与冒烟测试"><a href="#Daily-Build-与冒烟测试" class="headerlink" title="Daily Build 与冒烟测试"></a>Daily Build 与冒烟测试</h3><p>每天都将各个源文件编译组合成一个可执行程序，然后对程序进行冒烟测试，即执行一种相对简单的检查，看看产品在运行时是否冒烟。</p><h3 id="Key-Points-28"><a href="#Key-Points-28" class="headerlink" title="Key Points"></a>Key Points</h3><ul><li>构建的先后次序对集成的步骤会影响设计、编码、测试各类的顺序</li><li>一个经过充分思考的集成顺序能减少测试的工作量，并使调试变得容易</li><li>增量集成有若干变型，而且除非项目是微不足道的，任何一种形式的增量集成都比阶段式集成好</li><li>针对每个特定的项目，最佳的集成步骤通常是自顶向下、自底向上、风向导向及其他集成方法的某种组合，T-型集成和竖直分块集成通常都能工作地很好</li><li>daily build 能减少集成的问题，提升开发人员的士气，并提供非常有用的项目管理信息</li></ul><h2 id="编程工具"><a href="#编程工具" class="headerlink" title="编程工具"></a>编程工具</h2><p>使用最前沿的工具集，并熟悉你所用的工具，能使生产力增加 50% 还不止</p><h3 id="设计工具"><a href="#设计工具" class="headerlink" title="设计工具"></a>设计工具</h3><p>那些能创建设计图表的图形化工具</p><h3 id="源代码工具"><a href="#源代码工具" class="headerlink" title="源代码工具"></a>源代码工具</h3><h3 id="可执行码工具"><a href="#可执行码工具" class="headerlink" title="可执行码工具"></a>可执行码工具</h3><h3 id="工具导向的环境"><a href="#工具导向的环境" class="headerlink" title="工具导向的环境"></a>工具导向的环境</h3><h3 id="打造自己的编程工具"><a href="#打造自己的编程工具" class="headerlink" title="打造自己的编程工具"></a>打造自己的编程工具</h3><h3 id="工具幻境"><a href="#工具幻境" class="headerlink" title="工具幻境"></a>工具幻境</h3><p>无论使用哪些工具，程序员都必须与凌乱的真实世界较力</p><p>始终需要人来填补真实世界需要解决的问题和准备用来解决问题的计算机之间的鸿沟</p><h3 id="Key-Points-29"><a href="#Key-Points-29" class="headerlink" title="Key Points"></a>Key Points</h3><ul><li>程序员有时会在长达数年的时间里忽视某些强大的工具，之后才发现并使用之</li><li>好的工具能让你的日子过得安逸得多</li><li>你能打造很多自己用的专用工具</li><li>好的工具能减少软件开发中最单调乏味的工作的量，但它不能消除对编程的需要，虽然它会持续地重塑编程的含义</li></ul><h2 id="布局与风格"><a href="#布局与风格" class="headerlink" title="布局与风格"></a>布局与风格</h2><h3 id="基本原则"><a href="#基本原则" class="headerlink" title="基本原则"></a>基本原则</h3><p>好的布局凸现程序的逻辑结构</p><p>编程工作量的一小部分是写让机器读的程序，大部分工作是写能让他人读懂的程序</p><p>良好的布局目标：</p><ul><li>准确表现代码的逻辑结构</li><li>始终如一地表现代码的逻辑结构</li><li>改善可读性</li><li>经得起修改</li></ul><h3 id="布局技术"><a href="#布局技术" class="headerlink" title="布局技术"></a>布局技术</h3><p>空白、括号</p><h3 id="布局风格"><a href="#布局风格" class="headerlink" title="布局风格"></a>布局风格</h3><ul><li>纯块结构</li><li>模仿纯块结构</li><li>使用 begin-end对（花括号）指定块边界</li><li>行尾布局</li></ul><h3 id="控制结构的布局"><a href="#控制结构的布局" class="headerlink" title="控制结构的布局"></a>控制结构的布局</h3><h3 id="Key-Points-30"><a href="#Key-Points-30" class="headerlink" title="Key Points"></a>Key Points</h3><ul><li>可视化布局的首要任务是指明代码的逻辑阻止。评估该任务是否实现的指标包括准确性、一致性、易读性和易维护性</li><li>外表悦目比起其他指标是最不重要的。然后如果其他指标都达到了，代码又质量好，那么布局效果看上去也会不错</li><li>Java 传统做法就是使用纯块风格</li><li>结构化代码有其自身目的。始终如一地沿用某个习惯而少来创新。不能持久的布局规范只会损害可读性</li></ul><h2 id="自说明代码"><a href="#自说明代码" class="headerlink" title="自说明代码"></a>自说明代码</h2><h3 id="外部文档"><a href="#外部文档" class="headerlink" title="外部文档"></a>外部文档</h3><ul><li>单元开发文件夹</li><li>详细设计文档</li></ul><h3 id="编程风格作文档"><a href="#编程风格作文档" class="headerlink" title="编程风格作文档"></a>编程风格作文档</h3><p>在代码层文档中起主要作用的因素并非注释，而是好的编程风格。编程风格包括良好的程序结构、直率易懂的方法、有意义的变量名和子程序名、具名常量、清晰的布局，以及最低复杂度的控制流及数据结构。</p><h3 id="注释或不注释"><a href="#注释或不注释" class="headerlink" title="注释或不注释"></a>注释或不注释</h3><p>写注释能让你更好地思考代码在干什么。如果注释困难，要么代码差劲，要么就是没有理解透彻代码。写注释并非在做无用功，而是指出你该做的工作。</p><h3 id="高效注释之关键"><a href="#高效注释之关键" class="headerlink" title="高效注释之关键"></a>高效注释之关键</h3><p>注释种类：</p><ul><li>重复代码，只是用不同文字把代码工作又描述一遍</li><li>解释代码，用于解释复杂、有巧、敏感的代码块</li><li>代码标记，提醒开发者某处的工作未做完</li><li>概述代码，将若干行代码的意思以一两句话说出来</li><li>代码意图说明，指出要解决的问题</li><li>传达代码无法表述的信息，包括版权声明、保密要求、版本号等杂项信息</li></ul><p>高效注释：</p><ul><li>采用不会打断或抑制修改的注释风格</li><li>用伪代码编程法减少注释时间</li><li>将注释集成到你的开发风格中</li><li>性能不是逃避注释的好借口</li></ul><h3 id="注释技术"><a href="#注释技术" class="headerlink" title="注释技术"></a>注释技术</h3><p><strong>注释单行</strong></p><ul><li>不要随意添加无关注释</li><li>不要对单行代码做行尾注释</li><li>不要对多行代码做行尾注释</li><li>行尾注释用于数据声明</li><li>避免用行尾注释存放维护注记</li><li>行尾注释难以维护与编排，最好不要用行尾注释</li></ul><p><strong>注释代码段</strong></p><ul><li>注释应表达代码的意图</li><li>代码本身应尽力做好说明</li><li>注释代码段应注重“为何做 why”而不是“怎么做 how”</li><li>用注释为后面的内容做铺垫</li><li>让每个注释都有用</li><li>说明非常规做法</li><li>别用缩略语</li><li>将主次注释区分开</li><li>错误或语言环境独特点都需要加注释</li><li>给出违背良好编程风格的理由</li><li>不要注释投机取巧的代码，应重写之</li></ul><p><strong>注释数据声明</strong></p><ul><li>注释数值单位</li><li>对数值的允许范围给出注释</li><li>注释编码含义</li><li>注释对输入数据的限制</li><li>注释位标志</li><li>将与变量有关的注释通过变量名关联起来</li><li>注释全局数据</li></ul><p><strong>注释控制结构</strong></p><ul><li>应在每个 if、case、循环或代码段前面加上注释</li><li>应在每个控制结构后加上注释</li><li>将循环结束处的注释看成代码太复杂的征兆</li></ul><p><strong>注释子程序</strong></p><ul><li>注释应靠近其说明的代码，子程序不该有庞大的注释头</li><li>在子程序上部都用一两句说明之</li><li>在声明参数处注释这些参数</li><li>利用注入 javadoc 之类的代码说明工具</li><li>分清输入和输出数据</li><li>注释接口假设</li><li>对子程序的局限性做注释</li><li>说明子程序的全局效果</li><li>记录所用算法的来源</li><li>用注释标记程序的各部分</li></ul><p><strong>注释类、文件和程序</strong></p><p>标注类：</p><ul><li>说明该类的设计方法</li><li>说明局限性、用法假设等</li><li>注释类接口</li><li>不要在类接口除说明实现细节</li></ul><p>注释文件：</p><ul><li>说明各文件的意图和内容</li><li>将姓名、电子邮件及电话号码放到注释块中</li><li>包含版本控制标志</li><li>请在注释块中包含法律通告</li><li>将文件命名为与其内容相关的名字</li></ul><p>“以书本为范例”强调了对程序组织的同时提供高底层说明的重要性</p><h3 id="IEEE-标准"><a href="#IEEE-标准" class="headerlink" title="IEEE 标准"></a>IEEE 标准</h3><p>标准的全称由编号、采用年份以及标准名组成。</p><p>软件开发标准</p><p>软件质量保证标准</p><p>管理标准</p><p>标准综述</p><h3 id="Key-Points-31"><a href="#Key-Points-31" class="headerlink" title="Key Points"></a>Key Points</h3><ul><li>该不该注释是个需要认真对待的问题。差劲的注释只会浪费时间，好的注释才有价值</li><li>源代码应当含有程序大部分的关键信息</li><li>好代码本身就是最好的说明，如果代码太糟，需要大量注释，应先试着改进代码，直至无须过多注释为止</li><li>注释应说出代码无法说出的东西，例如概述或用意等信息</li><li>有的注释风格需要许多重复性劳动，应舍弃改用易于维护的注释风格</li></ul><h2 id="个人性格"><a href="#个人性格" class="headerlink" title="个人性格"></a>个人性格</h2><h3 id="聪明和谦虚"><a href="#聪明和谦虚" class="headerlink" title="聪明和谦虚"></a>聪明和谦虚</h3><p>承认自己智力有限并通过学习来弥补，你会成为更好的程序员，你越是谦虚，进步就越快。</p><p>很多好的编程做法都能减轻你大脑灰质细胞的负担：</p><ul><li>将系统分解，是为了使之易于理解</li><li>进行审查、评审和测试是为了减少人为失误</li><li>将子程序编写得短小，以减轻大脑负荷</li><li>基于问题而不是底层实现细节来编程，从而减少工作量</li><li>通过各种各样的规范，使思路从相对繁琐的编程事务中解放出来</li></ul><h3 id="求知欲"><a href="#求知欲" class="headerlink" title="求知欲"></a>求知欲</h3><p>在成长为高手的过程中，对技术事物的求知欲具有压倒一切的重要性。</p><p>培养求知欲和把学习当作第一要务的方法：</p><ul><li>在开发过程中建立自我意识</li><li>试验，编写小程序检验某一概念</li><li>阅读解决问题的有关方法</li><li>在行动之前做分析和计划</li><li>学习成功项目的开发经验</li><li>阅读文档</li><li>阅读其他书本期刊</li><li>同专业人士交往</li><li>向专业开发看齐</li></ul><h3 id="诚实"><a href="#诚实" class="headerlink" title="诚实"></a>诚实</h3><ul><li>不是高手时不假装是高手</li><li>乐于承认错误</li><li>力图理解编译器的警告，而非弃之不理</li><li>透彻理解自己的程序，而不要只是编译看看能够否运行</li><li>提供实际的状况报告</li><li>提供现实的进度方案，在上司面前坚持自己的意见</li></ul><h3 id="交流与合作"><a href="#交流与合作" class="headerlink" title="交流与合作"></a>交流与合作</h3><p>真正优秀的程序员直到怎样同别人融洽地工作和娱乐。代码便于看懂是对团队成员的要求之一。编程首先是与人交流，其次才是与计算机交流</p><h3 id="创造力和纪律"><a href="#创造力和纪律" class="headerlink" title="创造力和纪律"></a>创造力和纪律</h3><p>不要将创造力花在无关紧要的事物上，在非关键之处建立范围，从而在重要地方倾力发挥你的创造性</p><h3 id="懒惰"><a href="#懒惰" class="headerlink" title="懒惰"></a>懒惰</h3><p>懒惰表现的几个方面：</p><ul><li>拖延不喜欢的任务</li><li>迅速昨晚不喜欢的任务，以摆脱之</li><li>编写某个工具来完成不喜欢的任务，以便再也不用做这样的事情了</li></ul><h3 id="习惯"><a href="#习惯" class="headerlink" title="习惯"></a>习惯</h3><p>培养先以伪代码编写类再改用实际代码，以及编译前认真检查代码的习惯，有了新习惯，坏习惯自然就会消失。</p><h3 id="Key-Points-32"><a href="#Key-Points-32" class="headerlink" title="Key Points"></a>Key Points</h3><ul><li>人的个性对其编程能力有直接影响</li><li>最有关系的行为为：谦虚、求知欲、诚实、创造性和纪律以及高明的偷懒</li><li>程序员高手的性格与天分无关，而任何事都与个人发展相关</li><li>出乎意料的是，小聪明、经验、坚持、疯狂既有助也有害</li><li>很多程序员不愿主动吸收新知识和技术，只依靠工作时偶尔接触新的信息</li><li>好性格与培养正确的习惯关系甚大，要成为杰出的程序员，先要养成良好习惯，其他自然水到渠成</li></ul><h2 id="软件工艺的话题"><a href="#软件工艺的话题" class="headerlink" title="软件工艺的话题"></a>软件工艺的话题</h2><h3 id="征服复杂性"><a href="#征服复杂性" class="headerlink" title="征服复杂性"></a>征服复杂性</h3><p>致力于降低复杂度是软件开发的核心。</p><h3 id="精选开发过程"><a href="#精选开发过程" class="headerlink" title="精选开发过程"></a>精选开发过程</h3><p>程序员成功与否部分取决于其对开发过程的选择</p><h3 id="首先为人写程序，其次才是为机器"><a href="#首先为人写程序，其次才是为机器" class="headerlink" title="首先为人写程序，其次才是为机器"></a>首先为人写程序，其次才是为机器</h3><p>代码可读性</p><h3 id="深入一门语言去编程，不浮于表面"><a href="#深入一门语言去编程，不浮于表面" class="headerlink" title="深入一门语言去编程，不浮于表面"></a>深入一门语言去编程，不浮于表面</h3><p>不要将编程思路局限到所用语言能自动支持的范围</p><h3 id="借助规范集中注意力"><a href="#借助规范集中注意力" class="headerlink" title="借助规范集中注意力"></a>借助规范集中注意力</h3><p>规范能够精确地传达重要信息</p><p>规范可以使你免除各种风险</p><p>规范增加了对底层工作的可预见性</p><p>规范能够弥补语言的不足之处</p><h3 id="基于问题域编程"><a href="#基于问题域编程" class="headerlink" title="基于问题域编程"></a>基于问题域编程</h3><p>将程序划分为不同层次的抽象：</p><ul><li>第 0 层：操作系统的操作和机器指令。高级语言自动替我们处理好了</li><li>第 1 层：编程语言结构工具。语言的基础数据类型、控制结构等</li><li>第 2 层：底层实现结构。通常为算法和数据结构</li><li>第 3 层：底层问题域。构思解决问题的方法，并创建用于解决问题的各种基本构件</li><li>第 4 层：高级问题域。提供了对问题工作的抽象能力。</li></ul><p>问题域的底层技术：</p><ul><li>在问题域实用类，来实现有实际意义的结构</li><li>隐藏底层数据类型以及实现细节的信息</li><li>使用具名常量来说明字符串和文字量的意义</li><li>对中间计算结果使用中间变量</li><li>用布尔函数使复杂逻辑判断更清晰</li></ul><h3 id="当心落石"><a href="#当心落石" class="headerlink" title="当心落石"></a>当心落石</h3><p>程序编制时，要有好的判断力，需要对程序细微问题的警告信息做出反应。</p><h3 id="迭代，反反复复，一次又一次"><a href="#迭代，反反复复，一次又一次" class="headerlink" title="迭代，反反复复，一次又一次"></a>迭代，反反复复，一次又一次</h3><p>软件设计是一个逐步精华的过程，和其他类似过程一样，需要经过反复修正和改进。</p><h3 id="Key-Points-33"><a href="#Key-Points-33" class="headerlink" title="Key Points"></a>Key Points</h3><ul><li>编程的主要目的之一是管理复杂度</li><li>编程过程对最终产品有深远影响</li><li>合作开发要求团队成员之间进行广泛的沟通，甚于同计算机的交互</li><li>编程规范一旦滥用，只会雪上加霜，使用得当则能为开发环境带来良好机制，有助于管理复杂度和相互沟通</li><li>编程应基于问题域而非解决方案，这样便于复杂性管理</li><li>注意警告信息，将其作为编程的疑点，因为编程几乎是纯粹的智力活动</li><li>开发时迭代次数越多，产品的质量越好</li><li>墨守成规的方法有悖于高质量的软件开发</li></ul>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> Reading </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL8</title>
      <link href="/2023/11/18/mysql8learning/"/>
      <url>/2023/11/18/mysql8learning/</url>
      
        <content type="html"><![CDATA[<h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><p>1、安装 docker-compose</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 下载文件sudo curl -L &quot;https:&#x2F;&#x2F;github.com&#x2F;docker&#x2F;compose&#x2F;releases&#x2F;download&#x2F;1.29.2&#x2F;docker-compose-$(uname -s)-$(uname -m)&quot; -o &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose# 设置权限sudo chmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose# 设置软链接sudo ln -s &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose &#x2F;usr&#x2F;bin&#x2F;docker-compose# 检测是否成功docker-compose --version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、构建文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 新建 data、conf、init 文件夹用于挂载mkdir -r &#x2F;usr&#x2F;local&#x2F;mysql8docker&#x2F;&#123;data,conf,init&#125;# 编写 docker-compose.yml 文件cd &#x2F;usr&#x2F;local&#x2F;mysql8dockervim docker-compose.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">version: &quot;3&quot;services:  db:  image: mysql:latest  container_name: mysql8  restart: always  command: --default-authentication-plugin&#x3D;mysql_native_password  environment:    TZ: Asia&#x2F;Shanghai    MYSQL_ROOT_PASSWORD: root    MYSQL_DATABASE: test  ports:    - 3306:3306  volumes:    - &quot;.&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql&quot;    - &quot;.&#x2F;conf:&#x2F;etc&#x2F;mysql&#x2F;conf.d&quot;    - &quot;.&#x2F;init:&#x2F;docker-entrypoint-initdb.d&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、运行容器</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 构建容器并后台运行docker-compose up -d# 查看容器运行情况docker container ls# 以可交互终端 bash 进入 mysql8 容器docker exec -it mysql8 bash# 登录 root 用于并指定密码为 rootmysql -uroot -proot<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、配置 mysql</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 显示 mysql 字符集show variables like &#39;character_%&#39;;# 显示 mysql 校对集show variables like &#39;collation_%&#39;;# 新建 reajason 用户，% 指定所有 ip 可连接，设置密码为 123456create user reajason@&#39;%&#39; identified by &#39;123456&#39;;# 将所有权限授予 reajasongrant all privileges on *.* to &#39;reajason&#39;;# 刷新权限flush privileges;# root 用户grant all privileges on *.* to &#39;root&#39;@&#39;%&#39; identified with mysql_native_password by &#39;root&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Select"><a href="#Select" class="headerlink" title="Select"></a>Select</h2><p>1、简单使用</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 使用别名，表明和列名都可使用别名，使用 AS 关键字SELECTemployee_id,first_name ,last_name ,salary * 1.05 AS &quot;totalSalary&quot;FROMemployees;# 表使用别名SELECTe.employee_id ,e.emailFROMemployees e;# 去重 DISTINCT 关键字，可以对多列去重，多列全不同才去掉SELECTDISTINCT e.department_idFROMemployees e;# 空值参与运算也为空值（NULL）SELECTe.employee_id ,e.salary * (1 + e.commission_pct) * 12 &quot;年工资&quot;FROMemployees e;# 使用反引号，规避名称为关键字的情况SELECT * FROM &#96;order&#96;;# 显示表结构，显示表列名、数据类型、键约束等信息DESCRIBE employees;DESC employees;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、使用 where</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 1.查询员工12个月的工资总和，并起别名为ANNUAL SALARYSELECTe.employee_id ,e.salary * 12 AS &quot;ANNUAL SALARY&quot;FROMemployees e;# 2.查询employees表中去除重复的job_id以后的数据SELECTDISTINCT e.job_idFROMemployees e;# 3.查询工资大于12000的员工姓名和工资SELECTe.first_name ,e.last_name,e.salaryFROMemployees eWHEREe.salary &gt; 12000;# 4.查询员工号为176的员工的姓名和部门号SELECTe.last_name,e.department_idFROMemployees eWHEREe.employee_id &#x3D; 176;# 5.显示表 departments 的结构，并查询其中的全部数据DESC departments;SELECT * FROM departments;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、运算符</p><ul><li><strong>NULL 参与运算结果为 NULL</strong></li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 运算符 +、-、*、&#x2F;（DIV）、%（MOD）SELECT 2 DIV 1 FROM DUAL;SELECT -1 MOD 8 FROM DUAL;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 比较运算符 &#x3D;、&lt;&#x3D;&gt;（安全等于）、&lt;&gt;（不等于）、!&#x3D;、&gt;、&lt;、&gt;&#x3D;、&lt;&#x3D;# &#x3D; NULL 不会有结果，而 &lt;&#x3D;&gt; NULL 则会输出为 NULL 的值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># IS NULL（为 NULL）、IS NOT NULL（不为 NULL）、ISNULL()（为 NULL）SELECT NULL IS NULL FROM DUAL;# LEAST(value1,value2,...)--获取最小、GREATEST(value1,value2,...)--获取最大# BETWEEN ... AND，包括边界值# 1、查询工资 6000 到 8000 的的员工信息（不能调换两个值的位置）SELECT * FROM employees e WHERE salary BETWEEN 6000 AND 8000;SELECT * FROM employees e WHERE salary&gt;&#x3D;6000 AND salary&lt;&#x3D;8000;# 2、查询工资低于 6000 以及 高于 8000 的员工信息SELECT * FROM employees e WHERE salary NOT BETWEEN 6000 AND 8000;SELECT * FROM employees e WHERE salary&lt;6000 OR salary&gt;8000;# IN(set)、NOT IN(set)# LIKE 模糊查询，% 匹配任意字符、_ 匹配单个字符# REGEXP 正则表达式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 逻辑运算符 NOT、AND、OR、XOR<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 位运算符 &amp;、|、^、~、&gt;&gt;、&lt;&lt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 1.选择工资不在5000到12000的员工的姓名和工资SELECT e.last_name, e.salary FROM employees e WHERE e.salary NOT BETWEEN 5000 AND 12000;# 2.选择在20或50号部门工作的员工姓名和部门号SELECT e.last_name ,e.department_id FROM employees e WHERE e.department_id IN (20,50);# 3.选择公司中没有管理者的员工姓名及job_idSELECT e.last_name ,e.job_id FROM employees e WHERE e.manager_id IS NULL;# 4.选择公司中有奖金的员工姓名，工资和奖金级别SELECT e.last_name ,e.salary ,e.commission_pct FROM employees e WHERE e.commission_pct IS NOT NULL;# 5.选择员工姓名的第三个字母是a的员工姓名SELECT e.last_name FROM employees e WHERE e.last_name LIKE &#39;__a%&#39;;# 6.选择姓名中有字母a和k的员工姓名SELECT e.last_name FROM employees e WHERE e.last_name LIKE &#39;%a%k%&#39;OR  e.last_name LIKE &#39;%k%a%&#39;;# 7.显示出表 employees 表中 first_name 以 &#39;e&#39;结尾的员工信息SELECT * FROM employees e WHERE e.first_name LIKE &#39;%e&#39;;# 8.显示出表 employees 部门编号在 80-100 之间的姓名、工种SELECT e.last_name,e.job_id FROM employees e WHERE department_id BETWEEN 80 AND 100;# 9.显示出表 employees 的 manager_id 是 100,101,110 的员工姓名、工资、管理者idSELECT e.last_name ,e.salary ,e.manager_id FROM employees e WHERE e.manager_id IN (100,101,110);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Order"><a href="#Order" class="headerlink" title="Order"></a>Order</h2><p>不使用 ORDER BY 时默认排序为数据添加的顺序</p><p>使用 ORDER BY 不指定排序规则默认为升序(ASC)，指定降序使用 DESC</p><p>列别名可以在 ORDER BY 中使用不能在 WHERE 使用</p><p>可以指定多个排序列，从前往后进行排序</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 指定以 salary 排序SELECT * FROM employees e WHERE e.salary &gt; 5000 ORDER BY e.salary;SELECT * FROM employees e WHERE e.salary &gt; 5000 ORDER BY e.salary DESC;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 查询员工的姓名和部门号和年薪，按年薪降序,按姓名升序显示SELECT e.last_name,e.salary * 12 annual_sal FROM employees e ORDER BY e.salary DESC, e.last_name;# 查询邮箱中包含 e 的员工信息，并先按邮箱的字节数降序，再按部门号升序SELECT * FROM employees e WHERE e.email LIKE &#39;%e%&#39; ORDER BY LENGTH(e.email) DESC, e.department_id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Limit"><a href="#Limit" class="headerlink" title="Limit"></a>Limit</h2><p>实现分页，LIMIT(offset, size)</p><pre class="line-numbers language-MYSQL" data-language="MYSQL"><code class="language-MYSQL"># 每页 20 条记录，显示第 1、2 页SELECT e.employee_id, e.last_name FROM employees e LIMIT 0, 20;SELECT e.employee_id, e.last_name FROM employees e LIMIT 20, 20;# 显示前 10 条数据SELECT e.employee_id, e.last_name,e.salary FROM employees e ORDER BY e.salary DESC LIMIT 10;# MySQL8 LIMIT ... OFFSET ...# 获取 21、22 位置的数据LIMIT 2 OFFSET 20; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 选择工资不在 8000 到 17000 的员工的姓名和工资，按工资降序，显示第21到40位置的数据SELECT e.last_name,e.salary FROM employees e WHERE e.salary NOT BETWEEN 8000 AND 17000 ORDER BY e.salary DESC LIMIT 20,20;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="Join"><a href="#Join" class="headerlink" title="Join"></a>Join</h2><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 当使用 , 连接两表产生笛卡尔积，使用 WHERE 条件可获取正确需要的数据SELECT * FROM employees e,departments d;SELECT * FROM employees e,departments d WHERE e.department_id &#x3D; d.department_id;# 自连接# 内连接，... JOIN ... ON ...# 左外连接，保留左表的所有行，右表没数据的使用 NULL 填充，... LEFT JOIN ...ON ...# 右外连接，反之，... LEFT JOIN ...ON ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>UNION 返回两个查询的结果集并集，去除重复记录</p><p>UNION ALL 返回两个查询的结果集并集，不去重</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 自然连接，... NATUAL JOIN ...，自动查询两张表相同字段进行等值连接<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 1.显示所有员工的姓名，部门号和部门名称。SELECT e.last_name ,e.department_id,d.department_name FROM employees e LEFT JOIN departments d ON e.department_id &#x3D; d.department_id;# 2.查询90号部门员工的job_id和90号部门的location_idSELECT e.job_id, d.location_id FROM employees e , departments d WHERE e.department_id &#x3D; d.department_id AND e.department_id &#x3D; 90;# 3.选择所有有奖金的员工的 last_name , department_name , location_id , citySELECT e.last_name , d.department_name, l.location_id, l.city FROM employees e LEFT JOIN departments d ON  e.department_id &#x3D; d.department_id LEFT JOIN locations l ON d.location_id &#x3D; l.location_idWHERE e.commission_pct IS NOT NULL;# 4.选择city在Toronto工作的员工的 last_name , job_id , department_id , department_nameSELECT e.last_name , e.job_id, d.department_id, d.department_name FROM employees e ,departments d, locations l WHERE e.department_id &#x3D; d.department_id AND d.location_id &#x3D; l.location_idAND l.city &#x3D; &#39;Toronto&#39;;# 5.查询员工所在的部门名称、部门地址、姓名、工作、工资，其中员工所在部门的部门名称为’Executive’SELECT d.department_name,l.street_address , e.last_name, e.job_id, e.salary FROM employees e ,departments d, locations l WHERE d.location_id &#x3D; l.location_id AND e.department_id &#x3D; d.department_id AND d.department_name &#x3D;&#39;Executive&#39;;# 6.选择指定员工的姓名，员工号，以及他的管理者的姓名和员工号，结果类似于下面的格式SELECT e.last_name, e.employee_id AS &quot;EMP#&quot;, m.last_name, m.employee_id AS &quot;Mgr#&quot;FROM employees e LEFT JOIN employees m ON e.manager_id &#x3D; m.employee_id;# 7.查询哪些部门没有员工SELECT d.* FROM departments d LEFT JOIN employees e ON d.department_id &#x3D; e.department_id WHERE e.department_id IS NULL;# 8. 查询哪个城市没有部门SELECT l.location_id, l.street_address FROM departments d RIGHT JOIN locations l ON d.location_id &#x3D; l.location_id WHERE d.location_id IS NULL;# 9. 查询部门名为 Sales 或 IT 的员工信息SELECT e.*,d.department_name FROM employees e, departments d WHERE e.department_id &#x3D; d.department_id AND d.department_name IN (&#39;Sales&#39;, &#39;IT&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Func"><a href="#Func" class="headerlink" title="Func"></a>Func</h2><p>数值函数：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">&#x2F;*ABS(X) 求绝对值CELING(X) 向上取整FLOOR(X) 向下取整RADN(X) X 为随机数种子的随机数RAND() 0-1 随机数ROUND(X) 四舍五入，取整ROUND(X,Y) 保留 Y 位小数，四舍五入TRUNCATE(X,Y) 保留 Y 位小数，截断三角函数指数对数进制转换*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>字符串函数：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">&#x2F;*ASCII(C) 获取 c 的 ascii 码值CHAR_LENGTH(S) 获取字符长度LENGTH(S) 获取字节数（和编码有关）CONCAT(s1,s2...) 字符串拼接CONCAT_WS(sep,s1,s2...) 使用 sep 分隔符连接字符串INSERT(str,index,length,reolacestr) 字符索引 1 开始REPLACE(str,a,b) 字符串替换UPPLER(S) 转大写LOWER(S) 转小写LEFT(S,n) 取左边 n 个RIGHT(S,n) 取右边 n 个LPAD(S,length,pad) 扩展 s 长度，左边使用 pad 补充RPAD(S,length,pad) 扩展 s 长度，右边使用 pad 补充TRIM(S) 去除字符左右的空白字符REPEAT(S,n) 重复 n 次SUBSTR(S,index,length) 取子串LOCATE(substr,S) 查找子串*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>日期时间函数：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">&#x2F;*CURDATE() 当前日期，年月日CURTIME() 当前时间，时分秒NOW() 当前系统时间UTC_DATE()UTC_TIME()UNIX_TIMESTAMP() 时间戳UNIX_TIMESTAMP(DATE) 将 date 转为时间戳FROM_UNIXTIME(TIMESTAMP) 将时间戳转为时间YEAR(DATE)&#x2F;MONTH(DATE)&#x2F;DAY(DATE)HOUR(TIME)&#x2F;MINUTE(TIME)&#x2F;SECOND(TIME)TIME_TO_SEC(TIME) 时间转为秒钟SEC_TO_TIME(SECONDS) 秒转时间ADDDATE(DATE,INTERVAL expr type) 增加日期SUBDATE(DATE, INTERVAL expr type) 减少日期ADDTIME(time1,time2)SUBTIME(time1,time2)DATEDIFF(date1,date2)TIMEDIFF(time1,time2)DATE_FORMAT(date,format) %Y-%m-%d %H:%i:%sTIME_FORMAT(time,format)STR_TO_DATE(str,format)*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>流程控制处理函数：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">&#x2F;*如果 value 为 true，则 value1，反之 value2IF(value,value1,value2) 如果 value1 不为空返回 value1，某则返回 value2IFNULL(value1,value2) CASE WHEN condition1 THEN result1WHEN condition2 THEN result2ELSE resultENDCASE exprWHEN value1 THEN result1WHEN value2 THEN result2ELSE resultEND*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>加密与解密函数：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">&#x2F;*PASSWORD(str)  MD5(str) SHA(str) ENCODE(value,seed) 以 seed 作为加密密码加密 valueDECODE(value,seed) 以 seed 作为加密密码解密 value*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MySQL 相关函数：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">&#x2F;*VERSION() 返回 mysql 版本号CONNECTION_ID() 返回 mysql 连接数DATABASE() 返回当前所在数据库USER() 返回当前连接用户CHARSET(value) 返回 value 字符集COLLATION(value) 返回 value 校对规则*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 1.显示系统时间(注：日期+时间)SELECT NOW() FROM DUAL;# 2.查询员工号，姓名，工资，以及工资提高百分之20%后的结果（new salary）SELECT e.employee_id,e.last_name, e.salary, e.salary * 1.2 &quot;new salary&quot; FROM employees e;# 3.将员工的姓名按首字母排序，并写出姓名的长度（length）SELECT e.last_name, LENGTH(e.last_name) FROM employees e ORDER BY e.last_name DESC;# 4.查询员工id,last_name,salary，并作为一个列输出，别名为OUT_PUTSELECT CONCAT(employee_id, &#39;,&#39; , last_name , &#39;,&#39;, salary) OUT_PUT FROM employees e;# 5.查询公司各员工工作的年数、工作的天数，并按工作年数的降序排序SELECT e.hire_date, YEAR(NOW()) - YEAR(e.hire_date) years, DATEDIFF(NOW(),e.hire_date) FROM employees eORDER BY years DESC;# 6.查询员工姓名，hire_date , department_id，满足以下条件：雇用时间在1997年之后，department_id 为80 或 90 或110, commission_pct不为空SELECT e.employee_id,e.hire_date,e.department_id FROM employees eWHERE e.commission_pct IS NOT NULLAND e.department_id in (80, 90, 100)AND YEAR(e.hire_date) &gt;&#x3D; 1997;# 7.查询公司中入职超过10000天的员工姓名、入职时间SELECT e.employee_id ,e.hire_date FROM employees e WHERE DATEDIFF(NOW(),e.hire_date) &gt; 10000;# 8、使用 case whenSELECT e.last_name,e.job_id,(CASE e.job_id WHEN &#39;AD_PRES&#39; THEN &#39;A&#39;WHEN &#39;ST_MAN&#39; THEN &#39;B&#39;WHEN &#39;IT_PROG&#39; THEN &#39;C&#39;WHEN &#39;SA_REP&#39; THEN &#39;D&#39;WHEN &#39;ST_CLERK&#39; THEN &#39;E&#39;ELSE &#39;F&#39;END) GradeFROM employees e;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>聚合函数：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">&#x2F;*  不能在 WHERE 使用聚合函数，因为 WHERE 的数据只有一行没有多行AVG() 对数值型使用，求平均SUM() 对数值型使用，求和MIN() 对任意类型，取最小MAX() 对任意类型，取最大COUNT(*) 返回记录总数，包括 NULL 行COUNT(ecpr) 返回 expr 不为 NULL 行*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Group"><a href="#Group" class="headerlink" title="Group"></a>Group</h2><p>GROUP BY 分组，和聚合函数结合使用</p><p>可以对多个列进行分组，分组的列必须列出来，不分组的列需要使用聚合函数来使得分组后的数据进行处理</p><p>WITH ROLLUP 在分组之后会增加一条记录，计算查询记录总和，不可与 ORDER BY 同时出现</p><p>HAVING 分组后过滤，必须在 GROUP BY 后使用</p><p>SELECT 格式与执行顺序：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#（1）from：从哪些表中筛选#（2）on：关联多表查询时，去除笛卡尔积#（3）where：从表中筛选的条件#（4）group by：分组依据#（5）having：在统计结果中再次筛选#（6）order by：排序#（7）limit：分页# 执行顺序：FROM -&gt; WHERE -&gt; GROUP BY -&gt; HAVING -&gt; SELECT 的字段 -&gt; DISTINCT -&gt; ORDER BY -&gt; LIMIT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#2.查询公司员工工资的最大值，最小值，平均值，总和SELECT MAX(e.salary),MIN(e.salary),AVG(e.salary),SUM(e.salary) FROM employees e;#3.查询各job_id的员工工资的最大值，最小值，平均值，总和SELECT e.job_id, MAX(e.salary),MIN(e.salary),AVG(e.salary),SUM(e.salary) FROM employees e GROUP BY e.job_id;#4.选择具有各个job_id的员工人数SELECT e.job_id, COUNT(*)FROM employees e GROUP BY e.job_id;# 5.查询员工最高工资和最低工资的差距（DIFFERENCE）SELECT MAX(e.salary) - MIN(e.salary) DIFFERENCE FROM employees e;# 6.查询各个管理者手下员工的最低工资，其中最低工资不能低于6000，没有管理者的员工不计算在内SELECT e.manager_id, MIN(e.salary) minS FROM employees e WHERE e.manager_id IS NOT NULLGROUP BY e.manager_idHAVING minS &gt; 6000;# 7.查询所有部门的名字，location_id，员工数量和平均工资，并按平均工资降序SELECT d.department_name,d.location_id, COUNT(e.employee_id) counts, AVG(e.salary) avgSFROM employees e, departments dWHERE e.department_id &#x3D; d.department_id GROUP BY d.department_name,d.location_idORDER BY avgS;# 8.查询每个工种、每个部门的部门名、工种名和最低工资SELECT d.department_name,e.job_id,MIN(e.salary)FROM departments d LEFT JOIN employees eON e.department_id &#x3D; d.department_idGROUP BY d.department_name,e.job_id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Subquery"><a href="#Subquery" class="headerlink" title="Subquery"></a>Subquery</h2><p>子查询要包含在括号内</p><p>将子查询放在比较条件的右侧</p><p>单行操作符对应单行子查询，多行操作符对应多行子查询</p><p>ANY 与子查询某一个值进行比较</p><p>ALL 与子查询所有值进行比较</p><p>EXISTS 子查询满足条件返回 true</p><p>NOT EXISTS 子查询不满足条件，返回 true</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#1.查询和Zlotkey相同部门的员工姓名和工资SELECT * FROM employees e WHERE e.department_id &#x3D; (SELECT e.department_id FROM employees e WHERE e.last_name &#x3D; &#39;Zlotkey&#39;);#2.查询工资比公司平均工资高的员工的员工号，姓名和工资。SELECT e.employee_id,e.last_name ,e.salary FROM employees e WHERE e.salary &gt; (SELECT AVG(e.salary) FROM employees e);#3.选择工资大于所有JOB_ID &#x3D; &#39;SA_MAN&#39;的员工的工资的员工的last_name, job_id, salarySELECT e.last_name ,e.job_id ,e.salary FROM employees e WHERE e.salary &gt; ALL(SELECT e.salary FROM employees e WHERE e.job_id &#x3D; &#39;SA_MAN&#39;);#4.查询和姓名中包含字母u的员工在相同部门的员工的员工号和姓名SELECT * FROM employees eWHERE e.department_id IN (SELECT e.department_id FROM employees e WHERE e.last_name LIKE &#39;%u%&#39;);#5.查询在部门的location_id为1700的部门工作的员工的员工号SELECT e.employee_id FROM employees e WHERE e.department_id IN (SELECT d.department_id FROM departments d WHERE d.location_id &#x3D; 1700);#6.查询管理者是King的员工姓名和工资SELECT e.last_name, e.salary FROM employees e WHERE e.manager_id IN (SELECT e.employee_id FROM employees e WHERE e.last_name &#x3D; &#39;King&#39;);#7.查询工资最低的员工信息: last_name, salarySELECT e.last_name, e.salary FROM employees e WHERE e.salary &#x3D; (SELECT MIN(salary) FROM employees);#8.查询平均工资最低的部门信息SELECT * FROM departments d WHERE d.department_id &#x3D; (SELECT e.department_id FROM employees e GROUP BY e.department_id ORDER BY AVG(e.salary) LIMIT 1);#9.查询平均工资最低的部门信息和该部门的平均工资（相关子查询）SELECT d.*,t.avgSFROM departments d,(SELECT e.department_id,AVG(e.salary) avgS FROM employees e GROUP BY e.department_id ORDER BY AVG(e.salary) LIMIT 1) t WHERE d.department_id &#x3D; t.department_id;#10.查询平均工资最高的 job 信息SELECT * FROM jobs j WHERE j.job_id &#x3D; (SELECT e.job_id FROM employees e GROUP BY e.job_id ORDER BY AVG(e.salary) DESC LIMIT 1);#11.查询平均工资高于公司平均工资的部门有哪些?SELECT e.department_id FROM employees eWHERE e.department_id IS NOT NULLGROUP BY e.department_id HAVING AVG(e.salary) &gt; (SELECT AVG(e.salary) FROM employees e);#12.查询出公司中所有 manager 的详细信息SELECT DISTINCT e.* FROM employees e ,employees m WHERE e.employee_id &#x3D; m.manager_id; SELECT * FROM employees e WHERE EXISTS (SELECT * FROM employees e2 WHERE e2.manager_id &#x3D; e.employee_id);#13.各个部门中 最高工资中最低的那个部门的 最低工资是多少?SELECT MIN(e.salary) FROM employees e WHERE e.department_id &#x3D; (SELECT e.department_id FROM employees e GROUP BY e.department_id ORDER BY MAX(e.salary) LIMIT 1);#14.查询平均工资最高的部门的 manager 的详细信息: last_name, department_id, email, salarySELECT e.last_name ,e.department_id ,e.email ,e.salary FROM employees e WHERE e.employee_id IN (SELECT e.manager_id FROM  employees e WHERE e.department_id &#x3D; (SELECT e.department_id FROM employees e GROUP BY e.department_id ORDER BY AVG(e.salary) DESC LIMIT 1));#15. 查询部门的部门号，其中不包括job_id是&quot;ST_CLERK&quot;的部门号SELECT * FROM departments d WHERE d.department_id NOT IN (SELECT e.department_id FROM employees e WHERE e.job_id &#x3D; &#39;ST_CLERK&#39;);#16. 选择所有没有管理者的员工的last_nameSELECT e.last_name FROM employees e WHERE e.manager_id IS NULL;SELECT e.last_nameFROM employees eWHERE NOT EXISTS (SELECT * FROM employees e1WHERE e.manager_id &#x3D; e1.employee_id);#17．查询员工号、姓名、雇用时间、工资，其中员工的管理者为 &#39;De Haan&#39;SELECT e.employee_id ,e.last_name ,e.hire_date ,e.salary FROM employees e WHERE e.manager_id &#x3D; (SELECT e.employee_id FROM employees e WHERE e.last_name &#x3D; &#39;De Haan&#39;);#18.查询各部门中工资比本部门平均工资高的员工的员工号, 姓名和工资（相关子查询）SELECT e.employee_id ,e.last_name ,e.salary FROM employees e WHERE e.salary &gt; (SELECT AVG(e1.salary) FROM employees e1 WHERE e1.department_id &#x3D; e.department_id GROUP BY e1.department_id);#19.查询每个部门下的部门人数大于 5 的部门名称（相关子查询）SELECT * FROM departments d WHERE 5 &lt; (SELECT COUNT(*) FROM employees e WHERE e.department_id &#x3D;d.department_id);#20.查询每个国家下的部门个数大于 2 的国家编号（相关子查询）SELECT * FROM countries c , locations l WHERE c.country_id &#x3D; l.country_id AND 2 &lt; (SELECT COUNT(*) FROM departments d WHERE d.location_id &#x3D; l.location_id );<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="DATABASE"><a href="#DATABASE" class="headerlink" title="DATABASE"></a>DATABASE</h2><p>创建数据库：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 以默认方式创建数据库CREATE DATABASE mytest;# 查看数据库创建语句SHOW CREATE DATABASE mytest;# 创建数据库，存在则不创建，指定字符集和校对规则CREATE DATABASE IF NOT EXISTS mytest2 CHARACTER SET &#39;utf8mb4&#39; COLLATE &#39;utf8mb4_0900_ai_ci&#39;;# 切换数据库USE mytest;# 查看数据库下的表SHOW TABLES;SHOW TABLES FROM mysql;# 查看当前所在数据库SELECT DATABASE() FROM DUAL;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改数据库：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ALTER DATABASE mytest2 CHARACTER SET &#39;utf8&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除数据库：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DROP DATABASE IF EXISTS mytest2;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="TABLE"><a href="#TABLE" class="headerlink" title="TABLE"></a>TABLE</h2><p>创建表：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">&#x2F;*CREATE TABLE [IF NOT EXISTS] 表名(字段1, 数据类型 [约束条件] [默认值],字段2, 数据类型 [约束条件] [默认值],字段3, 数据类型 [约束条件] [默认值],……[表约束条件]);*&#x2F;# 创建表CREATE TABLE emp (    emp_id INT,    emp_name VARCHAR(20),    salary DOUBLE,    birthday DATE);# 查看表结构DESC emp;# 使用 AS 基于查询创建表和插入查询到的数据CREATE TABLE dept80ASSELECT employee_id, last_name, salary*12 ANNSAL, hire_dateFROM employeesWHERE department_id &#x3D; 80;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改表：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 添加列ALTER TABLE emp ADD phone_num VARCHAR(14) AFTER emp_name;# 修改列&#x2F;*ALTER TABLE 表名 MODIFY 【COLUMN】 字段名1 字段类型 【DEFAULT 默认值】【FIRST|AFTER 字段名2】;*&#x2F;ALTER TABLE dept80MODIFY salary double(9,2) default 1000;ALTER TABLE dept80CHANGE department_name dept_name varchar(15);# 删除列ALTER TABLE empDROP COLUMN phone_num;# 重命名表RENAME TABLE empTO myemp;# 删除表DROP TABLE IF EXISTS emp;# 清空表 TRUNCATE 不可回滚，DELETE 有事务可回滚TRUNCATE TABLE emp;DELETE FROM emp;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#1. 创建数据库test01_office,指明字符集为utf8。并在此数据库下执行下述操作CREATE DATABASE test01_office CHARACTER SET &#39;utf8&#39;;USE test01_office;#2. 创建表dept01&#x2F;*字段 类型id INT(7)NAME VARCHAR(25)*&#x2F;CREATE TABLE dept01 ( id INT(7), name VARCHAR(25));#3. 将表departments中的数据插入新表dept02中CREATE TABLE dept02ASSELECT * FROM atguigudb.departments;#4. 创建表emp01&#x2F;*字段 类型id INT(7)first_name VARCHAR (25)last_name VARCHAR(25)dept_id INT(7)*&#x2F;CREATE TABLE emp01 (id INT(7),first_name VARCHAR(25),last_name VARCHAR(25),dept_id INT(7));DESC emp01;#5. 将列last_name的长度增加到50ALTER TABLE emp01MODIFY last_name VARCHAR(50);#6. 根据表employees创建emp02CREATE TABLE emp02ASSELECT * FROM atguigudb.employees;#7. 删除表emp01DROP TABLE emp01;#8. 将表emp02重命名为emp01RENAME TABLE emp02 TO emp01;#9.在表dept02和emp01中添加新列test_column，并检查所作的操作ALTER TABLE dept02 ADD test_column VARCHAR(1);ALTER TABLE emp01 ADD test_column VARCHAR(1);DESC dept02;DESC emp01;#10.直接删除表emp01中的列 department_idALTER TABLE emp01DROP COLUMN department_id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="RECORD"><a href="#RECORD" class="headerlink" title="RECORD"></a>RECORD</h2><p>插入数据：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">&#x2F;*INSERT INTO 表名(column1 [, column2, …, columnn])VALUES(value1 [,value2, …, valuen]),(value1 [,value2, …, valuen]),……(value1 [,value2, …, valuen]);*&#x2F;&#x2F;* 使用查询的数据插入表中INSERT INTO 目标表名(tar_column1 [, tar_column2, …, tar_columnn])SELECT(src_column1 [, src_column2, …, src_columnn])FROM 源表名[WHERE condition]*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更新数据：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">&#x2F;*UPDATE table_nameSET column1&#x3D;value1, column2&#x3D;value2, … , column&#x3D;valuen[WHERE condition]*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删除数据：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">&#x2F;*DELETE FROM table_name [WHERE &lt;condition&gt;];*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>MySQL8计算列：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 使用其他列计算而来CREATE TABLE tb1(id INT,a INT,b INT,c INT GENERATED ALWAYS AS (a + b) VIRTUAL);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 1、创建数据库test01_libraryCREATE DATABASE test01_library;USE test01_library;# 2、创建表 booksCREATE TABLE books(id INT,name VARCHAR(50),authors VARCHAR(100),price FLOAT,pubdate YEAR,note VARCHAR(100),num INT);DESC books;SELECT * FROM books;# 3、向books表中插入记录# 1）不指定字段名称，插入第一条记录INSERT INTO books VALUES(1, &#39;Tal of AAA&#39;, &#39;Dickes&#39;, 23, 1995, &#39;novel&#39;, 11);# 2）指定所有字段名称，插入第二记录INSERT INTO books(id, name, authors, price, pubdate, note, num)VALUES (2, &#39;EmmaT&#39;, &#39;Jane lura&#39;, 35, 1993, &#39;joke&#39;, 22),(3, &#39;Story of Jane&#39;, &#39;Jane Tim&#39;, 40, 2001, &#39;novel&#39;, 0);# 3）同时插入多条记录（剩下的所有记录）INSERT INTO booksVALUES (4, &#39;Lovey Day&#39;, &#39;George Byron&#39;, 20, 2005, &#39;novel&#39;, 30),(5, &#39;Old land&#39;, &#39;Honore Blade&#39;, 30, 2010, &#39;law&#39;, 0),(6, &#39;The Battle&#39;, &#39;Upton Sara&#39;, 30, 1999, &#39;medicine&#39;, 40),(7, &#39;Rose Hood&#39;, &#39;Richard haggard&#39;, 28, 2008, &#39;cartoon&#39;, 28);# 4、将小说类型(novel)的书的价格都增加5UPDATE books b SET b.price &#x3D; b.price + 5 WHERE b.note &#x3D; &#39;novel&#39;;# 5、将名称为EmmaT的书的价格改为40，并将说明改为dramaUPDATE books b SET b.price &#x3D; 40, b.note &#x3D; &#39;drama&#39; WHERE b.name &#x3D; &#39;EmmaT&#39;;# 6、删除库存为0的记录DELETE FROM books WHERE num &#x3D; 0;# 7、统计书名中包含a字母的书SELECT * FROM books b WHERE b.name LIKE &#39;%a%&#39;;# 8、统计书名中包含a字母的书的数量和库存总量SELECT COUNT(*),SUM(num) FROM books b WHERE b.name LIKE &#39;%a%&#39;;# 9、找出“novel”类型的书，按照价格降序排列SELECT * FROM books b WHERE b.note &#x3D; &#39;novel&#39; ORDER BY b.price DESC;# 10、查询图书信息，按照库存量降序排列，如果库存量相同的按照note升序排列SELECT * FROM books b ORDER BY b.num DESC, b.note;# 11、按照note分类统计书的数量SELECT b.note ,COUNT(*) FROM books b GROUP BY b.note;# 12、按照note分类统计书的库存量，显示库存量超过30本的SELECT b.note ,SUM(b.num) sums FROM books b GROUP BY b.noteHAVING sums &gt;&#x3D; 30;# 13、查询所有图书，每页显示5本，显示第二页SELECT * FROM books b LIMIT 5,5;# 14、按照note分类统计书的库存量，显示库存量最多的SELECT b.note FROM books b GROUP BY b.noteORDER BY SUM(b.num)LIMIT 1;# 15、查询书名达到10个字符的书，不包括里面的空格SELECT * FROM books b WHERE CHAR_LENGTH(REPLACE(b.name,&#39; &#39;,&#39;&#39;)) &gt;&#x3D; 10;# 16、查询书名和类型，其中note值为novel显示小说，law显示法律，medicine显示医药，cartoon显示卡通，joke显示笑话SELECT b.name, b.note,(CASE b.note WHEN &#39;novel&#39; THEN &#39;小说&#39;WHEN &#39;law&#39; THEN &#39;法律&#39;WHEN &#39;medicine&#39; THEN &#39;医药&#39;WHEN &#39;cartoon&#39; THEN &#39;卡通&#39;WHEN &#39;joke&#39; THEN &#39;笑话&#39;ELSE &#39;其他&#39;END) zhnameFROM books b;# 17、查询书名、库存，其中num值超过30本的，显示滞销，大于0并低于10的，显示畅销，为0的显示需要无货SELECT b.name, b.num,(CASE WHEN b.num &gt;&#x3D; 30 THEN &#39;滞销&#39;WHEN b.num &lt; 10 AND b.num &gt; 0 THEN &#39;畅销&#39;WHEN b.num &#x3D; 0 THEN &#39;无货&#39;ELSE &#39;正常&#39;END) statusFROM books b;# 18、统计每一种note的库存量，并合计总量SELECT b.note, SUM(b.num) FROM books b GROUP BY b.note WITH ROLLUP;# 19、统计每一种note的数量，并合计总量SELECT b.note,COUNT(1) FROM books b GROUP BY b.note WITH ROLLUP;# 20、统计库存量前三名的图书SELECT * FROM books b ORDER BY sums DESC  LIMIT 3;# 21、找出最早出版的一本书SELECT * FROM books b ORDER BY b.pubdate LIMIT 1;# 22、找出novel中价格最高的一本书SELECT * FROM books b WHERE b.note &#x3D; &#39;novel&#39; ORDER BY b.price DESC LIMIT 1;# 23、找出书名中字数最多的一本书，不含空格SELECT * FROM books ORDER BY CHAR_LENGTH(REPLACE(name,&#39; &#39;,&#39;&#39;)) DESC LIMIT 0,1;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Type"><a href="#Type" class="headerlink" title="Type"></a>Type</h2><p><strong>整型：</strong></p><p>TINYINT（1字节）、SMALLINT（2字节）、MEDIUMINT（3字节）、INT&#x2F;INTEGER（4字节）、BIGINT（8字节）</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 其中的 5 表示显示宽度，搭配 ZEROFILL 零填充才能看到效果，MySQL 8.0.17 不再有显示宽度# UNSIGNED 设置无符号CREATE TABLE test_int(f1 INT(5),    f2 INT(5) ZEROFILL);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>浮点型：</strong></p><p>FLOAT（4字节）、DOUBLE（8字节）、REAL（默认就是 DOUBLE）</p><p>表示精度不精准，不应使用 &#x3D; 比较浮点型</p><p><strong>定点数：</strong></p><p>DECIMAL(M,D)，M 位有效位，小数点后 D 位。使用字符串存储。</p><p><strong>位类型：</strong></p><p>BIT(M)</p><p><strong>日期时间类型：</strong></p><p>YEAR（年）、TIME（时分秒）、DATE（年月日）、DATETIME（年月日时分秒）、TIMESTAMP（年月日时分秒）</p><p>DATE：标准格式为：<code>YYYY-MM-DD</code></p><p>TIME：标准格式：<code>D HH-MM-SS</code>、<code>HH-MM-SS</code>，D 会转为小时与 HH 相加</p><p>DATETIME（8个字节）：标准格式：YYYY-MM-DD HH:MM:SS</p><p>TIMESTAMP（4字节）：标准格式：YYYY-MM-DD HH:MM:SS，存储范围为 “1970-01-01 00:00:01 UTC”到“2038-01-19 03:14:07 UTC”，存储的数据时区不同显示不同。</p><p>尽量使用 DATETIME，注册时间等常用于计算的存储使用时间戳</p><p><strong>文本字符串类型：</strong></p><p>CHAR(M)、VARCHAR(M)、TINYTEXT、TEXT、MEDIUMTEXT、LONGTEXT、ENUM、SET</p><p>VARCHAR(20)：4.0版本以下指20字节，5.0版本以上指20字符，存储字节为字符串实际长+1，InnoDB 建议使用 VARCHAR</p><p>ENUM：<code>season ENUM(&#39;春&#39;,&#39;夏&#39;,&#39;秋&#39;,&#39;冬&#39;,unknow&#39;)</code>，只能选择一个</p><p>SET：<code>s SET (&#39;A&#39;, &#39;B&#39;, &#39;C&#39;)</code>，可多选存储</p><p><strong>二进制：</strong></p><p>BINARY、VARBINARY、TIBYBLOB、BLOB、MEDIUMBLOB、LONGBLOB </p><p>BLOG 和 TEXT 执行大量更新和删除操作时，会产生空洞现象，为提高性能应定期使用 OPTIMIZE TABLE 进行碎片处理。尽量分离到单独的表中，减少主表的碎片。</p><p><strong>JSON 类型：</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE test_json(js json);INSERT INTO test_json (js)VALUES (&#39;&#123;&quot;name&quot;:&quot;songhk&quot;, &quot;age&quot;:18, &quot;address&quot;:&#123;&quot;province&quot;:&quot;beijing&quot;,&quot;city&quot;:&quot;beijing&quot;&#125;&#125;&#39;);SELECT js -&gt; &#39;$.name&#39; AS NAME,js -&gt; &#39;$.age&#39; AS age ,js -&gt; &#39;$.address.province&#39;AS province, js -&gt; &#39;$.address.city&#39; AS cityFROM test_json;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Constraint"><a href="#Constraint" class="headerlink" title="Constraint"></a>Constraint</h2><p>实体完整性、域完整性、引用完整性、用户自定义完整性</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 列级约束，约束在列之后CREATE TABLE mytest(id int NOT NULL);# 表级约束，在所有字段之后CREATE TABLE mytest(id int NOT NULL,    last_name VARCHAR(25),    email VARCHAR(25)    CONSTRAINT uk_mytest_email UNIQUE(email) );<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>NOT NULL 非空约束，规定某个字段不能为空</p></li><li><p>UNIQUE 唯一约束，规定某个字段在整个表中是唯一的</p><ul><li>定义 UNIQUE 约束时会自动创建一个唯一性索引</li><li>删除唯一约束，只能通过删除唯一约束来删除</li></ul></li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 设置 name 和 pwd 组合唯一CREATE TABLE mytest(id INT,    name VARCHAR(25),    pwd VARCHAR25),    CONSTRAINT uk_mytest_name_pwd UNIQUE(&#96;name&#96;, pwd) # 指定索引名    # UNIQUE KEY(&#96;name&#96;, pwd)  # 索引自动命名为第一个列名);# 查看表索引SHOW INDEX FROM mytest;# 删除唯一性约束ALTER TABLE mytest DROP INDEX uk_mytest_name_pwd;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>PRIMARY KEY 主键(非空且唯一)约束，只能有一个主键约束</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 列级约束id INT PRIMARY KEY# 表级约束，索引自动命名为列名PRIMARY KEY(id)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>AUTO_INCREMENT 自增，一个表只能有一个自增列，必须是主键列、整数类型</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">&#x2F;*MySQL5.7 自增下一个值保存在内存中，重启服务则清空了缓存MySQL8 则是保存在重做日志中*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>FOREIGN KEY 外键约束，限定表的引用完整性<ul><li>外键必须是主表的主键或唯一约束</li><li>表可以创建多个外键约束</li><li>外键有性能开销，推荐应用层解决引用完整性而不是使用外键</li></ul></li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 表级约束CONSTRANT fk_dept_id FOREIGN KEY(dept_id) REFERENCE department(dept_id)# 约束等级# Cascade 主表删除对应数据时，从表相关数据也删除# Set null 主表删除对应数据时，从表的外键设为 null 而不删除记录# 删除外键约束SELECT * FROM information_schema.table_constraints WHERE table_name &#x3D; &#39;表名称&#39;;#查看某个表的约束名ALTER TABLE 从表名 DROP FOREIGN KEY 外键约束名;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>CHECK 检查约束，检查值的范围，5.7 不支持，8 支持</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">salary DECIMAL(10,2) CHECK(salary &gt; 2000)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>DEFAULT 默认值约束</li></ul><h2 id="View"><a href="#View" class="headerlink" title="View"></a>View</h2><p>视图可以看作是一个虚拟表，修改视图数据，基表数据也会修改，视图数据删除，基表不会删除。</p><p>视图更新需要视图的行和基表一一对应关系，以下情况不能更新：</p><ul><li>视图定义时指定 <code>ALGORITHM=TEMPTABLE</code>，不支持插入和删除操作</li><li>视图中不包含基表中所有被定义为非空又未指定默认值的列，视图将不支持INSERT操作</li><li>视图查询语句使用 join，不支持插入和删除操作</li><li>查询语句使用数学表达式或子查询，不h支持插入和更新哪些列</li><li>视图列中使用 DISTINCT、聚合函数、GROUP BY、HASVING、UNION 等，不支持插入、更新和删除操作</li><li>通常视图就是为了方便查询，更新修改数据都是在基表上操作</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">&#x2F;*CREATE [OR REPLACE][ALGORITHM &#x3D; &#123;UNDEFINED | MERGE | TEMPTABLE&#125;]VIEW 视图名称 [(字段列表)]AS 查询语句[WITH [CASCADED|LOCAL] CHECK OPTION]*&#x2F;# 查看视图DESC 视图名称;# 删除视图DROP VIEW IF EXISTS 视图名称;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Procedure-Function"><a href="#Procedure-Function" class="headerlink" title="Procedure&amp;Function"></a>Procedure&amp;Function</h2><p>存储过程是一段程序化sql，对底层表进行操作</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">&#x2F;*CREATE PROCEDURE 存储过程名(IN|OUT|INOUT 参数名 参数类型,...)[characteristics ...]BEGIN存储过程体END*&#x2F;# 调用：CALL 存储过程名(实参列表)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vim使用方法</title>
      <link href="/2023/04/10/vimlearning/"/>
      <url>/2023/04/10/vimlearning/</url>
      
        <content type="html"><![CDATA[<hr><p>正在更新ing….</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP 可靠传输协议</title>
      <link href="/2022/12/29/tcpreliabledatatransferprotocol/"/>
      <url>/2022/12/29/tcpreliabledatatransferprotocol/</url>
      
        <content type="html"><![CDATA[<h2 id="rdt1-0"><a href="#rdt1-0" class="headerlink" title="rdt1.0"></a>rdt1.0</h2><h3 id="假设前提"><a href="#假设前提" class="headerlink" title="假设前提"></a>假设前提</h3><ol><li>底层信道是完全可靠的</li><li>发送速率等于接受速率，发送方发多少，接收方就能收多少</li></ol><h3 id="发送端"><a href="#发送端" class="headerlink" title="发送端"></a>发送端</h3><p>等待接收上层的数据（上层使用 <code>rdt_send(data)</code> 函数调用给下层发送数据），收到上层数据之后，将数据打包成分组（使用 <code>make_pkt(data)</code> ），将分组发送到信道上（<code>udt_send (packet)</code>）。</p><h3 id="接收端"><a href="#接收端" class="headerlink" title="接收端"></a>接收端</h3><p>从下层信道接收分组（通过 <code>rdt_rcv(packet)</code> 事件），从分组中取出数据（<code>extract(packet, data)</code>），并将数据传送给上层（ <code>deliver_data(data)</code> ）。</p><h2 id="rdt2-0"><a href="#rdt2-0" class="headerlink" title="rdt2.0"></a>rdt2.0</h2><p>真实网络传输中分组中可能比特会出现差错，因此引入控制报文，<strong>肯定确认</strong>（positive acknowledgment）和 <strong>否定确认</strong>（negative acknowledgment）。这两个控制报文使得接收方让发送方知道哪些分组被正确接收，哪些分组有误需要重发。基于这种重传机制的 rdt 称为 <strong>自动重传请求（Automatic Repeat reQuest，ARQ）协议</strong>。</p><p>ARQ 协议中使用三个协议功能来处理比特差错：</p><ul><li>差错检测。需要一种机制使接收方检测何时出现了比特差错。添加额外的比特，校验和（checksum）来检测并可能纠正分组比特的错误。</li><li>接收方反馈。发送方要了解接收方情况的唯一途径就是让接收方提供明确的反馈信息给发送方。使用 ACK 和 NAK 。</li><li>重传。接收方收到有差错的分组，发送方重传该分组</li></ul><h3 id="发送端-1"><a href="#发送端-1" class="headerlink" title="发送端"></a>发送端</h3><p>等待接收上层数据（ <code>rdt_send(data)</code> ），收到数据时，将数据和校验和打包成分组（<code>nake_pkt(data,checksum)</code>），然后将分组发送到信道上。</p><p>如果收到 ACK 报文（<code>rdt_rcv(rcvpkt) &amp;&amp; isNAK(rcvpkt)</code>），则回到等待上层调用的状态，继续监听上层数据的到来。</p><p>如果收到 NAK 报文（<code>rdt_rcv(rcvpkt) &amp;&amp; isACK(rcvpkt)</code>），则重发当前分组，并继续等待。</p><p>这种等待接收方反馈的方式，称为 <strong>停等（stop-and-wait）协议</strong>。</p><h3 id="接收端-1"><a href="#接收端-1" class="headerlink" title="接收端"></a>接收端</h3><p>收到的分组如果是损坏的，则发送 NAK 报文。</p><p>收到的分组如果是完好的，则发送 ACK 报文并将数据解包移交给上层处理。</p><h3 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h3><p>NAK 和 ACK 在传输过程中也有分组受损的可能性。</p><p>解决办法是将数据分组进行编号，将 ACK 也添加校验和字段。</p><h2 id="rdt3-0"><a href="#rdt3-0" class="headerlink" title="rdt3.0"></a>rdt3.0</h2><p>底层信道除了比特差错外还会出现丢包情况。</p><p>发送方设置一个时间值，来判断是否发生了丢包，如果这一段时间没有收到 ACK 即重发分组。虽然导致了 <strong>冗余数据分组</strong>（duplicate data packet）的可能性，但分组编号机制能识别这种问题。</p>]]></content>
      
      
      <categories>
          
          <category> Network </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux Crontab 定时任务</title>
      <link href="/2022/05/07/linux-crontab/"/>
      <url>/2022/05/07/linux-crontab/</url>
      
        <content type="html"><![CDATA[<h2 id="Crontab命令介绍"><a href="#Crontab命令介绍" class="headerlink" title="Crontab命令介绍"></a>Crontab命令介绍</h2><p>Linux Crontab是用来定期执行程序的命令。</p><p>Linux内置的Crontab进程能帮我们实现这些需求，Crontab搭配<strong>shell脚本</strong>，非常复杂的指令也没有问题。</p><p>用Crontab 做一个定时命令，比如每天自动签到等等。。</p><p><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=1377028624,1913731558&fm=26&gp=0.jpg"></p><p><img src="https://i.loli.net/2020/05/07/d7p8lnhqORBPtUM.png" alt="crontab"></p><h2 id="Crontab相关指令"><a href="#Crontab相关指令" class="headerlink" title="Crontab相关指令"></a>Crontab相关指令</h2><p><code> vim /etc/crontab</code> </p><p><code>crontab -l</code>  查看正在定时执行的脚本        </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ &#x2F;etc&#x2F;init.d&#x2F;cron crond start       &#x2F;&#x2F;启动服务$ &#x2F;etc&#x2F;init.d&#x2F;cron stop              &#x2F;&#x2F;关闭服务$ &#x2F;etc&#x2F;init.d&#x2F;cron restart           &#x2F;&#x2F;重启服务$ &#x2F;etc&#x2F;init.d&#x2F;cron reload            &#x2F;&#x2F;重新载入配置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><ul><li><p>实例1：每1分钟执行一次myCommand</p><p>  <code>* * * * * myCommand</code></p></li><li><p>实例2：每小时的第3和第15分钟执行</p><p>  <code>3,15 * * * * myCommand</code></p></li><li><p>实例3：在上午8点到11点的第3和第15分钟执行</p><p>  <code>3,15 8-11 * * * myCommand</code></p></li><li><p>实例4：每隔两天的上午8点到11点的第3和第15分钟执行</p><p>  <code>3,15 8-11 */2  *  * myCommand</code></p></li><li><p>实例5：每周一上午8点到11点的第3和第15分钟执行</p><p>  <code>3,15 8-11 * * 1 myCommand</code></p></li><li><p>实例6：每晚的21:30重启smb</p><p>  <code>30 21 * * * /etc/init.d/smb restart</code></p></li><li><p>实例7：每月1、10、22日的4 : 45重启smb</p><p>  <code>45 4 1,10,22 * * /etc/init.d/smb restart</code></p></li><li><p>实例8：每周六、周日的1 : 10重启smb</p><p>  <code>10 1 * * 6,0 /etc/init.d/smb restart</code></p></li><li><p>实例9：每天18 : 00至23 : 00之间每隔30分钟重启smb</p><p>  <code>0,30 18-23 * * * /etc/init.d/smb restart</code></p></li><li><p>实例10：每星期六的晚上11 : 00 pm重启smb</p><p>  <code>0 23 * * 6 /etc/init.d/smb restart</code></p></li><li><p>实例11：每一小时重启smb</p><p>  <code>* */1 * * * /etc/init.d/smb restart</code></p></li><li><p>实例12：晚上11点到早上7点之间，每隔一小时重启smb</p><p>  <code>* 23-7/1 * * * /etc/init.d/smb restart</code></p></li></ul><hr><p>参考链接 ：<a href="https://www.runoob.com/linux/linux-comm-crontab.html">菜鸟教程</a></p>]]></content>
      
      
      <categories>
          
          <category> ECS </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Crontab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fiddler的使用</title>
      <link href="/2022/03/01/fiddler/"/>
      <url>/2022/03/01/fiddler/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是Fiddler？"><a href="#什么是Fiddler？" class="headerlink" title="什么是Fiddler？"></a>什么是Fiddler？</h2><blockquote><p>Fiddler是位于客户端和服务器端之间的代理，也是目前最常用的抓包工具之一 。它能够记录客户端和服务器之间的所有 请求，可以针对特定的请求，分析请求数据、设置断点、调试web应用、修改请求的数据，甚至可以修改服务器返回的数据，功能非常强大，是web调试的利器。</p></blockquote><h2 id="Fiddler-的安装"><a href="#Fiddler-的安装" class="headerlink" title="Fiddler 的安装"></a>Fiddler 的安装</h2><p>Fiddler的下载<br>打开官网，官网下载地址是<a href="https://www.telerik.com/download/fiddler">https://www.telerik.com/download/fiddler</a></p><h2 id="关于Fiddler-的相关配置"><a href="#关于Fiddler-的相关配置" class="headerlink" title="关于Fiddler 的相关配置"></a>关于Fiddler 的相关配置</h2><h3 id="PC端的配置"><a href="#PC端的配置" class="headerlink" title="PC端的配置"></a>PC端的配置</h3><h4 id="1-配置fiddler允许监听到https"><a href="#1-配置fiddler允许监听到https" class="headerlink" title="1. 配置fiddler允许监听到https"></a>1. 配置fiddler允许监听到https</h4><ul><li>配置fiddler允许监听到https（fiddler默认只抓取http格式的）</li></ul><p>打开Fiddler菜单项Tools-&gt; Options-&gt;HTTPS，</p><p>勾选CaptureHTTPS CONNECTs,<br>勾选Decrypt HTTPS traffic option点击OK。<br> <img src="https://i.loli.net/2020/09/06/gHS7bRyEl6Ue1h3.jpg"><br> <img src="https://i.loli.net/2020/09/06/OFtMHZkasVfIRu7.jpg"></p><h4 id="2-配置fiddler允许远程连接"><a href="#2-配置fiddler允许远程连接" class="headerlink" title="2. 配置fiddler允许远程连接"></a>2. 配置fiddler允许远程连接</h4><p>上一步窗口中点击Tools-&gt;TelerikFiddler Options-&gt;Connections,勾选allow remote computers to connect，默认监听端口为8888，若端口被占用可以设置成其他的，配置好后要重新启动fiddler<br><img src="https://i.loli.net/2020/09/06/gpHyRGt5jnsdVSc.png"></p><p> <strong>点击完成之后，PC端配置完成</strong></p><p> 至此，已经可以监听PC端浏览器的请求了。<br> 接下来开始配置手机端</p><h3 id="手机端的配置"><a href="#手机端的配置" class="headerlink" title="手机端的配置"></a>手机端的配置</h3><p>首先要保证手机和电脑都处于同一个网络；</p><p>然后要知道电脑的ip地址，查看你的本机IP地址，在Fiddler的右上角有一个Online按钮，点击一下会显示你的IP信息。</p><p>再者要知道fiddler的端口号，Tools-&gt;TelerikFiddler Options-&gt;Connections，port中值就是端口号，一般默认为8888；接下来开始操作手机；</p><ol><li><p>第一步：安装手机证书</p><p> 手机和电脑连接同一个网络，打开手机浏览器，输入 http:&#x2F;&#x2F; 对应 ip:端口号 ，点击前往；进入一个网页，点击最下面那个FiddlerRoot certificate下载证书，下载成功后在设置里面安装，安装步骤：打开高级设置-&gt;安全-&gt;从SD卡安装证书-&gt;找到证书文件-&gt;点击后为证书命名点击确定即可安装成功。</p></li><li><p>更改手机无线网的代理</p><p> 手机系统设置-无线网-点击高级，代理选择手动，主机名就是fiddler的电脑ip地址，端口号，就是fiddler的端口号，与浏览器中ip：端口号保持一致，点击确定即可。</p></li><li><p>操作手机，电脑fiddler中会显示一些http信息，成功；</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fiddler </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo指定域名和宝塔面板的部署</title>
      <link href="/2021/09/30/hexo-zhi-ding-zi-yu-ming-he-bao-ta-mian-ban-de-bu-shu/"/>
      <url>/2021/09/30/hexo-zhi-ding-zi-yu-ming-he-bao-ta-mian-ban-de-bu-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前些天用阿里云的云服务器 、 Nginx 的环境和 域名 挂载了一个快速简洁的博客框架 Hexo 。但是却发现整个域名都用于 Hexo 博客的搭载，这并不能发挥域名的最大价值，于是最近总想着怎么让 nginx 绑定我多个域名，从而搭载我更多的业务。使用域名就是为了方便用户访问， 因此想修改一下 Nginx 中的文件，让 Nginx 通过请求的域名来返回相应的根目录下的网站，以达到同时运行多个网站的目的。关于 Hexo 的搭建，详情请参考我另一篇<a href="http://golife.top/2020/03/28/wo-de-hexo-tang-keng-zhi-lu/">blog</a>。<strong>我这里是利用宝塔面板一键建站，修改根目录的办法来指向域名，如果你有类似的需求，可以参考我这边 blog ，或者你有更好的方法，也欢迎你联系我，我们一起探讨，互相学习。</strong></p><h2 id="问题提出与解决思路"><a href="#问题提出与解决思路" class="headerlink" title="问题提出与解决思路"></a>问题提出与解决思路</h2><p><strong>如何修改 Nginx中的文件 从而利用 Nginx服务器绑定域名</strong></p><p>办法总是有的，但是解决起来实在是相当的棘手。可以直接 vim 命令修改 nginx.config 文件，以达到最终的目的。但是这个过程还是相当繁琐的，甚至还需要用到证书什么的。<br>作为一名<strong>小白</strong>，毕竟一失足成千古恨。所以我知难而退，重新寻找另外更快捷的方法。果不其然，方法总比困难多，我找到了更好部署工具 —— <strong>面板</strong>。</p><blockquote><p>利用面板，我们可以一键建站。再修改一下建站的文件，直接指向我们的网站根目录。对于以后的网站业务也甚是方便，实在是妙不可言。</p></blockquote><h2 id="Nginx的卸载"><a href="#Nginx的卸载" class="headerlink" title="Nginx的卸载"></a>Nginx的卸载</h2><p>因为我们要用到面板，所以原来的nginx文件都不需要了，可以直接下载了。卸载指令如下：（Ubuntu下nginx的卸载）</p><pre><code>sudo apt-get remove nginx nginx-common # 卸载删除除了配置文件以外的所有文件。sudo apt-get purge nginx nginx-common # 卸载所有东东，包括删除配置文件。sudo apt-get autoremove # 在上面命令结束后执行，主要是卸载删除Nginx的不再被使用的依赖包。sudo apt-get remove nginx-full nginx-common #卸载删除两个主要的包。sudo service nginx restart  #重启nginx</code></pre><blockquote><p>Nginx 的安装何其简单，但是卸载却相当不易，一不小心就是个坑。</p></blockquote><h2 id="宝塔面板的部署"><a href="#宝塔面板的部署" class="headerlink" title="宝塔面板的部署"></a>宝塔面板的部署</h2><p>关于面板，市面上有很多种，但是比较常用的还是宝塔面板。</p><blockquote><p>宝塔Linux面板是提升运维效率的服务器管理软件，支持一键LAMP&#x2F;LNMP&#x2F;集群&#x2F;监控&#x2F;网站&#x2F;FTP&#x2F;数据库&#x2F;JAVA等100多项服务器管理功能。<br>有20个人的专业团队研发及维护，经过200多个版本的迭代，功能全，少出错且足够安全，已获得全球百万用户认可安装。运维要高效，装宝塔。</p></blockquote><p><img src="https://i.loli.net/2020/03/31/fkCeBhAisdRqGMW.png" alt="宝塔面板.png"> </p><p><strong>下面来讲解一下如何部署宝塔面板：</strong></p><h3 id="1-安装宝塔面板"><a href="#1-安装宝塔面板" class="headerlink" title="1. 安装宝塔面板"></a>1. 安装宝塔面板</h3><ul><li>进入宝塔面板的<a href="https://www.bt.cn/">官网</a> </li><li>点击立即安装，就可以看到宝塔面板的安装要求和安装命令。</li><li>直接复制相应系统的命令在你的服务器上面执行即可。<br>   <img src="https://i.loli.net/2020/03/30/dqyfkbuzCBW3Xgs.png" alt="宝塔面板"></li></ul><h3 id="2-登录宝塔面板"><a href="#2-登录宝塔面板" class="headerlink" title="2. 登录宝塔面板"></a>2. 登录宝塔面板</h3><ul><li><p>安装完成后，最后会出现你的账号密码以及登录网址。</p><pre><code>  Bt-Panel: http://服务器ip:8888/23a4d083  username:  #用户名  password: #密码    Warning:            #警告  If you cannot access the panel,   release the following port (8888|888|80|443|20|21) in the security group</code></pre></li></ul><p><strong>注意：</strong></p><blockquote><p>最后会出现一个警告，这个意思是我们要先去打开 80 端口和 8888 端口，这个两个端口是一定要开的，否则就访问不了。阿里云服务器默认是关闭，所以我们要手动配置。 打开阿里云服务器管理控制台 -&gt; 点击左侧安全组 -&gt; 点击右侧的配置规则 -&gt; 点击添加安全组规则</p></blockquote><p><img src="https://i.loli.net/2020/03/30/lCMLiXf4167r5yZ.png" alt="打开80端口"><br><img src="https://i.loli.net/2020/03/30/8vrpM21cQgZGtUm.png" alt="打开8888端口"></p><p>ps：这个面板的登录页面不是一定要把8888端口打开的，仅仅只是第一次登录需要打开8888端口，登录之后后面，进入面板设置是可以改掉这个端口的。账号密码面板的域名也是可以改的。</p><ul><li>打开两个端口之后就可以用网站和用户名顺利登录啦！</li></ul><h3 id="3-宝塔面板的自定义设置"><a href="#3-宝塔面板的自定义设置" class="headerlink" title="3.宝塔面板的自定义设置"></a>3.宝塔面板的自定义设置</h3><ul><li><p>进去后会推荐安装 Lamp，这个我们依他的推荐就好了。（安装时间可能有点长，我们需要等一下）</p></li><li><p>安装完成后 ，会自动提示我们修改宝塔面板的端口，因为原始的8888 端口不安全。修改建议端口范围8888 - 65535。<strong>注意：有安全组的服务器请提前在安全组放行新端口</strong> 打开阿里云服务器管理控制台 -&gt; 点击左侧安全组 -&gt; 点击右侧的配置规则 -&gt; 点击添加安全组规则</p></li><li><p>修改原始用户名密码和宝塔面板的域名。（ps：修改域名的时候一定要记得去域名解析那里添加A记录，还有宝塔面板的安全入口也一定要重视，否则仅仅通过域名是打不开宝塔面板的，这里出现问题也不要怕，后面会有问题参考的）<br><img src="https://i.loli.net/2020/03/31/rSIOXRvCotnY1sL.png" alt="解析ip"></p></li></ul><h3 id="4-宝塔面板的探索"><a href="#4-宝塔面板的探索" class="headerlink" title="4. 宝塔面板的探索"></a>4. 宝塔面板的探索</h3><p>在安装相应的插件、修改好端口之后，你可以自由得探索宝塔面板了，毕竟来到新环境，还是非常陌生的。</p><ul><li>简单说下添加站点，如果建站成功会出现如下图所示。当然如果你填了域名，<strong>一定要在域名的控制台解析添加A记录。</strong><br><img src="https://i.loli.net/2020/03/31/65yObsXlo2BiI3P.png" alt="建站成功.png"></li></ul><p>宝塔面板有一键建站，ftp、数据库，甚至在软件商店中的还有一键部署各种各样的功能，是非常强大的，你可以去软件商店里面找找你需要的插件哦！<br><img src="https://i.loli.net/2020/03/31/MhyCIdlgzNsJpa1.png" alt="软件商店中的一键部署"></p><h2 id="在宝塔面板里修改网站的根目录"><a href="#在宝塔面板里修改网站的根目录" class="headerlink" title="在宝塔面板里修改网站的根目录"></a>在宝塔面板里修改网站的根目录</h2><p>顺利安装宝塔面板，也体验了面板的强大之后，我们还是回到正题吧！！！</p><p><strong>如何将我Hexo 绑定到我的域名下的一个子域名：</strong></p><h3 id="点击左边的网站-添加站点"><a href="#点击左边的网站-添加站点" class="headerlink" title="点击左边的网站 &gt;- 添加站点"></a>点击左边的网站 &gt;- 添加站点</h3><p><img src="https://i.loli.net/2020/03/30/M3YrHEX49SOsPV7.png" alt="添加站点"></p><p>此时就有网站的根目录出现，我们把这里的根目录指向我的Hexo 博客的地址。</p><p>我这里是  var&#x2F;www&#x2F;blog 文件。详情请看我Hexo搭建另一篇<a href="http://golife.top/2020/03/28/wo-de-hexo-tang-keng-zhi-lu/">blog</a><br><img src="https://i.loli.net/2020/03/30/2omNfbVSyRZl9i5.png" alt="修改根目录"></p><blockquote><p>如果你还想用你的blog绑定更多的域名，可以直接在方框里面加上去。</p></blockquote><ul><li><strong>如果你已经在宝塔面板里面添加过了这个站点</strong><br>不需要删除重建，你也可以直接修改配置文件，将文件指向你博客的根目录即可。<img src="https://i.loli.net/2020/03/31/dBtGvCpKQ52SXiY.png" alt="修改后的配置文件"></li></ul><h2 id="问题参考"><a href="#问题参考" class="headerlink" title="问题参考"></a>问题参考</h2><p>修改好了宝塔面板的域名后，想通过域名直接进入面板，但出现如下的错误。<img src="https://i.loli.net/2020/03/31/HFEsaRW4YweUVL7.png" alt="登录错误.png"><br>这是因为你安全入口的8字符没有加上哦。</p><p>解决方法：直接在服务器上的 敲</p><p>&#x2F;etc&#x2F;init.d&#x2F;bt default</p><p>就可以看到面板的正确网址啦！</p><h2 id="最后总结"><a href="#最后总结" class="headerlink" title="最后总结"></a>最后总结</h2><p>面板的存在让这个过程变的更加的方便。如果你有类似的需要，也可以这样做。关于Nginx，我们还是慢慢学吧，路还很长&#x2F;(ㄒoㄒ)&#x2F;~~。此外，在宝塔的软件商店里，还有许多的插件，不妨花点时间研究研究，还是非常有意思的。</p>]]></content>
      
      
      <categories>
          
          <category> ECS </category>
          
          <category> Hexo </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> Ip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>创建SSH KEY及查看SSH KEY</title>
      <link href="/2021/08/10/ssh-key/"/>
      <url>/2021/08/10/ssh-key/</url>
      
        <content type="html"><![CDATA[<blockquote><p> 只适用于Mac和windows下的Git Bash操作界面。</p></blockquote><h2 id="检查本地是否有SSH-Key存在"><a href="#检查本地是否有SSH-Key存在" class="headerlink" title="检查本地是否有SSH Key存在"></a>检查本地是否有SSH Key存在</h2><p><code>ssh-keygen -t rsa -C &quot;邮箱地址&quot;</code>  &#x2F;&#x2F;执行成功后将会返回Generating public&#x2F;private rsa key pair. <strong>直接按回车，冒号可以不用管</strong><br>这里的 <em>username</em> 是你电脑的名字</p><ul><li><p>如果正常运行的话，会出现</p><p>  Enter passphrase (empty for no passphrase):</p><p>  然后我们直接回车</p></li><li><p>有的时候我们可能会出现</p><p>  &#x2F;Users&#x2F;your username&#x2F;.ssh&#x2F;id_rsa already exists.</p><p>  Overwrite (y&#x2F;n)?  y</p><p>  这说明你已经设置了存储地址，我们输入“y”覆盖</p><p>  回车</p></li></ul><h2 id="生成新的ssh"><a href="#生成新的ssh" class="headerlink" title="生成新的ssh"></a>生成新的ssh</h2><p>  上面的任意两种情况之后，会出现</p><pre><code>Enter same passphrase again: </code></pre><p>再次<strong>回车</strong>，这时候你会看见：</p><pre><code>Your identification has been saved in /Users/username/.ssh/id_rsa.Your public key has been saved in /Users/username/.ssh/id_rsa.pub.The key fingerprint is:16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48 your_email@example.comThe key&#39;s randomart image is:+--[ RSA 2048]----+    *(心形的图案)*</code></pre><p>这说明SSH key就已经生成了。文件目录就是：&#x2F;Users&#x2F;username&#x2F;.ssh&#x2F;id_rsa</p><h2 id="查看ssh"><a href="#查看ssh" class="headerlink" title="查看ssh"></a>查看ssh</h2><p><code>cat c/User/username/.ssh/id_rsa.pub</code>   &#x2F;&#x2F;<strong>这里的username 是你电脑的名字。</strong></p><p>接下来将会看到公钥ssh-rsa AAAAB3NzaC1yc2。。。。。。。。。</p><p>后面的内容我省略了<br>(说明：ssh-rsa 后面的内容这就是你的SSH keys，复制ssh keys的时候要<em>全部复制</em>下来)</p>]]></content>
      
      
      <categories>
          
          <category> ECS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的Hexo 趟坑之旅</title>
      <link href="/2021/07/28/wo-de-hexo-tang-keng-zhi-lu/"/>
      <url>/2021/07/28/wo-de-hexo-tang-keng-zhi-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="从零搭建Hexo博客并部署阿里云服务器（无坑化教学）"><a href="#从零搭建Hexo博客并部署阿里云服务器（无坑化教学）" class="headerlink" title="从零搭建Hexo博客并部署阿里云服务器（无坑化教学）"></a>从零搭建Hexo博客并部署阿里云服务器（无坑化教学）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>   前些天在阿里云买了个云主机，顺便买了个域名，就开始学着搭博客了，对比几个高大上的博客 （ Wordpress 、 z-blog） ，最终还是选择使用 Hexo 来作为自己的博客框架。今天将自己搭博客过程中踩过的坑做一个输出，希望对有想法要做自己的博客的同学们有一些帮助。顺便借此博客来记录自己成长过程的所获所得。   </p><h2 id="我的搭建环境"><a href="#我的搭建环境" class="headerlink" title="我的搭建环境"></a>我的搭建环境</h2><ul><li>本地端 windows10    </li><li>服务端 阿里云ECS（2核4G）Ubuntu 18.04系统   </li><li>域名（域名仅仅只是为了方便访问，你也可以用服务器公ip地址访问）<br>主要思路如图所示：<br><img src="https://i.loli.net/2020/03/28/ty3SNlYWHVw1A5P.jpg"></li></ul><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="服务器的购买以及域名的备案"><a href="#服务器的购买以及域名的备案" class="headerlink" title="服务器的购买以及域名的备案"></a>服务器的购买以及域名的备案</h3><ul><li>我的服务器是阿里云这边的，由于自己是学生所以体验了一把阿里云的云翼计划，当然阿里云和腾讯云的价格都差不多，同学们可以自行选择。</li><li>域名可以上阿里云的域名专区找自己喜欢的后缀，如果是国内的域名是要<strong>备案</strong>的，备案大概需要7-20天，同学们如果不想等的话，也可以购买国外的域名。</li></ul><h3 id="本地端"><a href="#本地端" class="headerlink" title="本地端"></a>本地端</h3><ul><li>git 安装 （后续都是在git bash操作的）</li><li>nodejs安装</li><li>本地公钥</li><li>hexo</li></ul><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><ul><li>git  </li><li>nodejs</li><li>nginx</li></ul><h2 id="阿里云服务器实例以及的域名解析"><a href="#阿里云服务器实例以及的域名解析" class="headerlink" title="阿里云服务器实例以及的域名解析"></a>阿里云服务器实例以及的域名解析</h2><h3 id="配置安全组"><a href="#配置安全组" class="headerlink" title="配置安全组"></a>配置安全组</h3><p>由于阿里云是默认不授权80端口的访问的，所以我们要手动配置。打开阿里云服务器管理控制台 -&gt; 点击左侧安全组 -&gt; 点击右侧的配置规则 -&gt; 点击添加安全组规则<br><img src="https://i.loli.net/2020/03/28/w6pCMyNGgYrQ3t8.png" alt="开启80端口"><br>这是个<strong>大坑</strong>！！！如果不配置，我们是进不了网页的。</p><h3 id="域名的解析"><a href="#域名的解析" class="headerlink" title="域名的解析"></a>域名的解析</h3><blockquote><p>没有买域名的，或者域名还在备案的，可以不执行此步骤，直接通过ip地址访问也是可以的。<br>这个操作能够是把你注册的域名解析到你服务器的ip上,注意如果是阿里云服务,则是解析到公网ip上.后面在服务器上有对ip的操作也是指的公网IP。打开域名控制台-&gt; 解析 -&gt; 添加记录 （添加A记录，记录值填公网ip即可）<br><img src="https://i.loli.net/2020/03/31/rSIOXRvCotnY1sL.png" alt="解析ip"></p></blockquote><h2 id="本地端的相关操作"><a href="#本地端的相关操作" class="headerlink" title="本地端的相关操作"></a>本地端的相关操作</h2><p>这个Hexo博客的搭建大部分是在本地端完成的。 </p><h3 id="1-下载nodejs"><a href="#1-下载nodejs" class="headerlink" title="1. 下载nodejs"></a>1. 下载nodejs</h3><p>点击<a href="https://nodejs.org/en/download/">官网</a>下载Node.js安装包及源码。</p><h3 id="2-下载git工具"><a href="#2-下载git工具" class="headerlink" title="2.下载git工具"></a>2.下载git工具</h3><p>点击git<a href="http://msysgit.github.com/">官网</a>下载</p><blockquote><p>nodejs 和 git 工具都下载好了之后 </p></blockquote><pre class="line-numbers language-none"><code class="language-none">node -v   npm -v            &#x2F;&#x2F;检查版本<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-生成本地的公钥"><a href="#3-生成本地的公钥" class="headerlink" title="3.生成本地的公钥"></a>3.生成本地的公钥</h3><blockquote><p>如果你之前已经生成过公钥了，可以不进行这一步只需要把公钥提取出来即可。  </p></blockquote><p>在命令行（或Git Bash）输入以下命令， 回车三下： </p><p><code>ssh-keygen -t rsa -C &quot;邮箱地址&quot;</code>  </p><p>复制密钥文件内容（路径形如C:\Users\username.ssh\id_rsa.pub），粘贴保存，后面服务端会用到。这里的 <em>username</em> 是你电脑的名字</p><p>如果这一步你有困难，具体操作请看<a href="http://golife.top/2020/03/28/chuang-jian-ssh-key-ji-cha-kan-ssh-key/">这里</a>。</p><h3 id="4-安装-Cnpm"><a href="#4-安装-Cnpm" class="headerlink" title="4. 安装 Cnpm"></a>4. 安装 Cnpm</h3><blockquote><p>由于使用npm直接下载会有很多人遇到卡顿的问题(国外服务器)，所以我们要做的第一步工作是将npm换成淘宝的服务器。</p></blockquote><p><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p><h3 id="5-安装Hexo及修改相应文件"><a href="#5-安装Hexo及修改相应文件" class="headerlink" title="5. 安装Hexo及修改相应文件"></a>5. 安装Hexo及修改相应文件</h3><ul><li><p><code>cnpm install -g hexo-cli</code>    &#x2F;&#x2F;Cnpm 的安装速度很快，后面也直接用 cnpm 在<strong>git bash</strong> 里面进行操作。</p><ul><li><p>选择创建的blog文件<br> 我这里是选择在了F盘</p> <pre class="line-numbers language-none"><code class="language-none">cd G:cd Bloghexo init<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> 再安装 Hexo的插件<br> <code>npm install hexo-deployer-git --save</code><br> 执行完成后：</p> <pre class="line-numbers language-none"><code class="language-none">hexo cleanhexo ghexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> 我们可以在本地端看我们的博客啦<br> 打开浏览器访问 <a href="http://localhost:4000/">http://localhost:4000</a></p></li><li><p>配置 _config.yml 文件<br>  在刚才生成hexo的目录下，找到_config.yml，打开它。<br>  找到deploy 做如下配置</p>  <pre class="line-numbers language-none"><code class="language-none">deploy:type: gitrepo: git@这里改为服务器公网IP:&#x2F;home&#x2F;git&#x2F;blog.git       branch: master                           message:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  保存退出</p></li></ul></li></ul><h2 id="服务端相关操作"><a href="#服务端相关操作" class="headerlink" title="服务端相关操作"></a>服务端相关操作</h2><h3 id="1-安装-nodej环境"><a href="#1-安装-nodej环境" class="headerlink" title="1. 安装 nodej环境"></a>1. 安装 nodej环境</h3><blockquote><p>方式有很多中，这里我说其中一种安装方法，并把nodejs更新到最新版）可以执行如下指令:     </p></blockquote><p><code> sudo apt install nodejs</code>    &#x2F;&#x2F;从存储库安装Nodejs<br><code>sudo apt install npm</code>     &#x2F;&#x2F;需要额外安装npm<br><code>node -v&#39; &#39;npm -v</code>         &#x2F;&#x2F;检查 node npm版本，结果发现 是8.x  3.x 版本<br>在Ubuntu 18.04 下升级Nodejs 至最新版本</p><pre class="line-numbers language-none"><code class="language-none">$ curl -sL https:&#x2F;&#x2F;deb.nodesource.com&#x2F;setup_10.x -o nodesource_setup.sh$ sudo bash nodesource_setup.sh$ sudo apt install nodejs   &#x2F;&#x2F;从源代码编译 升级 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>最后检查 版本</p><pre class="line-numbers language-none"><code class="language-none">node -vnpm - v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>此时发现 node 和npm都安装好啦，并且是最新版    </p><h3 id="2-安装-git"><a href="#2-安装-git" class="headerlink" title="2. 安装 git"></a>2. 安装 git</h3><pre><code>`apt-get install git`</code></pre><h3 id="3-安装nginx"><a href="#3-安装nginx" class="headerlink" title="3. 安装nginx"></a>3. 安装nginx</h3><p>nginx的安装是非常简单的   </p><p><code>apt install nginx</code>     </p><p><code>/etc/init.d/nginx restart</code>   &#x2F;&#x2F;重启nginx   </p><p>现在我们可以尝试使用自己的电脑去访问服务器的公网IP。我们可以惊喜地发现，公网IP可以打开一个nginx的默认网页。这样，我们离成功了就近了一大步。<br><img src="https://i.loli.net/2020/03/28/z3sXbgdo6Iupi1O.png"></p><blockquote><p>接下来就要开始在服务器上面敲啦</p></blockquote><h3 id="4-增加-git-用户并进入-git-用户"><a href="#4-增加-git-用户并进入-git-用户" class="headerlink" title="4. 增加 git 用户并进入 git 用户"></a>4. 增加 git 用户并进入 git 用户</h3><ul><li><p><code>useradd git</code> &#x2F;&#x2F;增加一个git用户 </p><p><code>vi /etc/sudoers</code>  &#x2F;&#x2F;进去sudoers文件</p><p>找到 root all&#x3D;(all:all) all<br>在下面增加 git all&#x3D;(all:all) all</p><p><img src="https://i.loli.net/2020/03/28/9Nw3tabZz8VxvsW.png" alt="修改后的sudoers文件"><br>修改好后 ，按 ESC键  ：wq! 强制保存退出</p><p><code>chmod 740 /etc/sudoers</code>  &#x2F;&#x2F;给这个文件增加可读可写可执行权限    </p><p><code>vi /etc/passwd</code>  &#x2F;&#x2F;进入passwd文件修改   将sh修改成bash</p><p><img src="https://i.loli.net/2020/03/28/E9eSZvgLOx2iTVz.png" alt="修改后">        </p><p><code>mkdir /home/git</code>  </p><p><code>chown -R git:git /home/git</code></p><p><code>ls-l</code>  &#x2F;&#x2F;验证：查看文件多少个 并且可以查看权限</p><p><code>ls – l /home</code>   &#x2F;&#x2F;验证：<br><img src="https://i.loli.net/2020/03/28/UnVASZMXf2oT5gc.png"></p><p><code>passwd git</code> &#x2F;&#x2F;创建用户密码<br>再次输入密码，需要注意的是，系统设置输入密码都是不可见的，这里的密码很重要 </p><p><code>mkdir -p /var/www</code><br><code>cd /var/www</code><br><code>mkdir blog</code>              &#x2F;&#x2F;这是服务器放置blog文件的地方<br><code>chown –R git:git /var/www/blog</code>   &#x2F;&#x2F;修改文件权限</p></li><li><p><code>su git</code>   &#x2F;&#x2F;进入git用户    </p><p> <code>cd</code>       &#x2F;&#x2F;回到git主目录  </p><p> <code>pwd</code>     &#x2F;&#x2F;检查：查看路径，检查是否出错。<img src="https://i.loli.net/2020/03/28/yiRvaQZs92NqJjc.png"> </p><p> <code>mkdir blog.git</code><br> <code>cd blog.git</code><br> <code>git init - -bare</code>     &#x2F;&#x2F;初始化<strong>仓库</strong><br> <img src="https://i.loli.net/2020/03/28/ZdNqv1EX4BCUnzk.png" alt="仓库里面的文件.png"></p><p> <code>cd blog.git/hooks/</code> </p><p> <code>ls</code>      &#x2F;&#x2F;查看文件   </p><p> <code>vi post-receive.</code>   &#x2F;&#x2F;设置git的<strong>钩子</strong>脚本，这是非常重要的</p> <pre class="line-numbers language-none"><code class="language-none">#!&#x2F;bin&#x2F;bashGIT_REPO&#x3D;&#x2F;home&#x2F;git&#x2F;blog.git   &#x2F;&#x2F;定义一个变量GIT_REPO并指定所在位置TMP_DIR_CLONE&#x3D;&#x2F;tmp&#x2F;blog       &#x2F;&#x2F;定义一个临时的文件并指定所在位置PUBLIC_WWW&#x3D;&#x2F;var&#x2F;www&#x2F;blog      &#x2F;&#x2F;最后发布的网站服务器根目录rm -rf $&#123;TMP_DIR_CLONE&#125;git clone $GIT_REPO $TMP_DIR_CLONErm -rf $PUBLIC_WWW&#x2F;*cp -rf $TMP_DIR_CLONE&#x2F;* $PUBLIC_WWW<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <em>大概作用:本地客户端有pushug更新,就会运行上面脚本.<br> 删除临时文件<br> 从GIT_REPO中pull一部分到TMP_DIR_CLONE中<br> 删除网站服务器根目录<br> 把临时文件中的内容拷贝到网站服务器根目录.</em></p><p> 保存退出 :wq   </p><p> <code>chmod +x post-receive</code>        &#x2F;&#x2F;给文章加权限 </p><p> <code>cd</code>                          &#x2F;&#x2F;到git主目录</p><p> <code>mkdir .ssh</code>    </p><p> <code>cd .ssh</code>   </p><p> <code>vi authorized_keys</code>      &#x2F;&#x2F;将自己本地的公钥拷贝过来    再 :wq 保存退出  </p><p> <code>Exit</code>   &#x2F;&#x2F;回到root用户</p></li></ul><h3 id="5-接下来是nginx的操作"><a href="#5-接下来是nginx的操作" class="headerlink" title="5. 接下来是nginx的操作"></a>5. 接下来是nginx的操作</h3><ul><li><p><code>vi /etc/nginx/sites-enabled/default</code>  &#x2F;&#x2F;进入文件</p><p>  只需要将 html 改成 blog 即可</p><p>  <img src="https://i.loli.net/2020/03/28/EblmFaGWrsHQYwp.png" alt="修改后">  </p></li><li><p><code>/etc/init.d/nginx restart</code>    &#x2F;&#x2F;重启 nginx<br><img src="https://i.loli.net/2020/03/28/grkbmdi52Fpf7uZ.png" alt="重启nginx成功"></p></li></ul><blockquote><p>服务端就此完成啦！！！！！</p></blockquote><h2 id="最终验证"><a href="#最终验证" class="headerlink" title="最终验证"></a>最终验证</h2><p>在<strong>自己的电脑上自己的电脑上自己的电脑上</strong>   </p><p>cmd 或者git bash都行</p><ul><li><p>ssh -v git@server_ip    (服务器公网ip地址)<br>需要输入服务端 git 用户创建的密码<br><img src="https://i.loli.net/2020/03/28/v8nBHycr9dYK45l.png"></p><p>  最后提示        </p><p>  Welcome to Alibaba Cloud Elastic Compute Service !      </p><p>  说明登录成功了。</p></li><li><p>尝试写一篇文章并且发布到服务器上     </p><p>  <strong>cd 到自己的本地端的Hexo目录</strong></p><p>  <code>hexo new &quot;Hello My First Blog&quot;</code><br>  <code>hexo clean &amp;&amp; hexo generate --deploy</code><br>  &#x2F;&#x2F;需要输入服务端 git 用户创建的密码，以后 deploy 都需要这个密码</p></li></ul><h2 id="博客美化"><a href="#博客美化" class="headerlink" title="博客美化"></a>博客美化</h2><p>完成部署后可以去Hexo主题下载自己喜欢的主题，美化博客。</p><p>现在去本地主机浏览器上输入域名或者公网IP，访问你的博客吧！</p><hr><p>参考链接：</p><ol><li><a href="http://golife.top/2020/03/28/chuang-jian-ssh-key-ji-cha-kan-ssh-key/">创建SSH KEY及查看SSH KEY</a></li><li>Linux 基础命令</li><li><a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">hexo-theme-matery主题讲解</a></li><li><a href="http://leon.cmylife.xyz/">参考博客 ：学习进化史</a></li><li><a href="https://m.youtube.com/watch?v=-M7BOQjCFZM&list=PLq9fAEr-k3Nx37LC5xRCnmmwTkXRI8V5A&index=1">本文章所跟教程</a>  TIP：这个链接来源于youtube.你跟着视频一步一步的做在阿里云上是可以成功的。</li><li><a href="https://oceanwang.top/personal-website-7/">部署Github Pages</a></li><li><a href="https://www.cnblogs.com/jijunhao/p/16972921.html">matery主题美化</a><blockquote><p>如果还有问题，请通过qq联系我！！！</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> ECS </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/06/10/hello-world/"/>
      <url>/2021/06/10/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new &quot;My New Post&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><p>db.json文件：编译过程中产生的中间文件，不用关心；<br>public文件夹：新生成的静态网页文件就存放在这个目录下。</p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h3 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h3><pre class="line-numbers language-none"><code class="language-none">---tilte: Hello Worlddate: 2021-04-07 13:43:05tags:    - Hexo    - Markdowncategories: Blogkeywords:     - Hexo    - Markdown---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hello World </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 书写入门指南</title>
      <link href="/2021/06/07/hexo-shu-xie-ru-men-zhi-nan/"/>
      <url>/2021/06/07/hexo-shu-xie-ru-men-zhi-nan/</url>
      
        <content type="html"><![CDATA[<h1 id="使用-Markdown-去写-hexo"><a href="#使用-Markdown-去写-hexo" class="headerlink" title="使用 Markdown 去写 hexo"></a>使用 Markdown 去写 hexo</h1><ul><li>使用 Typora 来编辑文件更加方便，Typora 编辑器来讲解 Markdown 的语法，Typora 支持 MacOS 、Windows、Linux 平台，且包含多种主题，编辑后直接渲染出效果。点击<a href="https://typora.io/">这里</a>即可下载。</li><li>也可以用vs code 进行编写，点击<a href="https://code.visualstudio.com/">这里</a>g官网下载，建议在vs code里面下载 Markdown Preview Enhanced ，这是是一个很好用的完善预览功能的插件，可以更加形象的展示所编写的pdf格式的文档样式。</li></ul><h1 id="Markdown-的基本使用"><a href="#Markdown-的基本使用" class="headerlink" title="Markdown 的基本使用"></a>Markdown 的基本使用</h1><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>建议在 # 号后加一个空格，这是 Markdown 的基本语法</p><pre class="line-numbers language-none"><code class="language-none">#  一级标题## 二级标题### 三级标题 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>列表的显示只需要在文字前加上 - 或 * 即可变为无序列表，有序列表则直接在文字前加 1. 2. 3.  符号要和文字之间加上一个字符的空格。</p><pre class="line-numbers language-none"><code class="language-none">- 列表1- 列表2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="插入代码"><a href="#插入代码" class="headerlink" title="插入代码"></a>插入代码</h2><p> &#96;  这是tab键上面那个符号</p><pre><code>- 插入代码行    在两个 ` 中间插入代码行- 插入代码框    在六个 ` 插入代码框&lt;``````&gt;     `code` //代码行<pre class="line-numbers language-none"><code class="language-none">    &lt;html&gt;&lt;html&gt;    code    &#96;&#96;&#96;     &#x2F;&#x2F; 代码框## 上标与下标上标：    X^1^下标：    10~1~## 插入图片与链接括号里面填图片或者链接的所处路径。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre><p>图片为：<img src="/"><br>链接为： <a href=""></a></p><pre><code>## 粗体与斜体粗体和斜体也非常简单，用两个 * 包含一段文本就是粗体的语法，用一个 * 包含一段文本就是斜体的语法。## 引用只需要在文本前加入 &gt; 这种尖括号（大于号）即可   eg: &gt; 你好## 表格表格是我觉得 Markdown 比较累人的地方，例子如下：![表格](https://i.loli.net/2020/03/26/1nvIk24fbaLiqUM.png)| A | B | 总计 ||---|:-:|-----:|| 1 | 1 | 2    || 2 | 2 | 4    |## 分割线分割线的语法只需要三个 * 号## 脚注文字内容[^1]在文章末尾[^1]:脚注说明文字注：1可以为任意数字或文字或单词，但文章末尾[^]中内容与文中应保持一致。##  其他补充Markdown中的转义字符为\，若不想使符号变成文字的格式等，在符号前加\。&gt; 至此，markdown的基本使用方法就写到这里，只要多加运用，写Hexo应该是行云流水了吧！</code></pre>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
